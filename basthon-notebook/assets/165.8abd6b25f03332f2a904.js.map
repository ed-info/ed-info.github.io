{"version":3,"file":"assets/165.8abd6b25f03332f2a904.js","mappings":"oKACA,IAAIA,EAAQ,CACV,WACA,YACA,MACA,UACA,SACA,QACA,UACA,UACA,OACA,OACA,OACA,WACA,QACA,UACA,MACA,WAEEC,EAAW,IAAIC,OAAO,YAAYF,EAAMG,KAAK,kBAC7CC,EAAS,WA+DTC,EAAc,CAChBC,WAFe,CA5DM,CACrBC,KAAM,aACNC,MAAO,QACPC,MAAMC,GACJ,IAAIC,EAGJ,OAFiG,OAAlFA,EAAKD,EAAIE,MAAM,IAAIV,OAAO,uBAAuBF,EAAMG,KAAK,wBAA6B,EAASQ,EAAGE,KAGtH,EACAC,UAAUJ,EAAKK,GAEb,MAAMC,EAAQN,EAAIO,MAAM,MACxB,GAAIhB,EAASiB,KAAKF,EAAM,IAAK,CAC3B,MAAMG,EAAU,CAAEC,GAAI,EAAGC,GAAI,GACvBC,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACnCtB,EAASiB,KAAKF,EAAMO,IACtBJ,EAAQC,EAAIG,EACHnB,EAAOc,KAAKF,EAAMO,MAC3BJ,EAAQE,EAAIE,EACRJ,EAAQC,GAAK,IACfE,EAASI,KAAK,IAAKP,IACnBA,EAAQC,GAAK,EACbD,EAAQE,GAAK,IAInB,GAAIC,EAASG,OAAQ,CACnB,MAAME,EAAWL,EAAS,IACnBM,EAAGC,EAAMC,GAAS7B,EAAS8B,KAAKf,EAAMW,EAASP,KAAO,GACvDY,EAAOhB,EAAMiB,MAAMN,EAASP,EAAI,EAAGO,EAASN,GAAGlB,KAAK,MAEpD+B,EAAQ,CACZC,KAAM,aACNC,IAHUpB,EAAMiB,MAAMN,EAASP,EAAGO,EAASN,EAAI,GAAGlB,KAAK,MAIvD0B,OACAC,QACAE,OACAK,YAAa,GACbC,OAAQ,GACRC,YAAa,CAAC,QAAS,SAIzB,OAFAC,KAAKC,MAAMC,aAAaR,EAAMJ,MAAOI,EAAMG,aAC3CG,KAAKC,MAAME,YAAYT,EAAMF,KAAME,EAAMI,QAClCJ,CACT,CACF,CACF,EACAU,SAASV,GASP,MAPa,qCAAqCA,EAAML,2CAC1BW,KAAKK,OAAOC,YACxCZ,EAAMG,YACN,kBAEAG,KAAKK,OAAOE,MAAMb,EAAMI,qBAG5B,I","sources":["webpack://@basthon/basthon-notebook/./node_modules/marked-admonition-extension/dist/index.mjs"],"sourcesContent":["// src/index.ts\nvar types = [\n  \"abstract\",\n  \"attention\",\n  \"bug\",\n  \"caution\",\n  \"danger\",\n  \"error\",\n  \"example\",\n  \"failure\",\n  \"hint\",\n  \"info\",\n  \"note\",\n  \"question\",\n  \"quote\",\n  \"success\",\n  \"tip\",\n  \"warning\"\n];\nvar startReg = new RegExp(`^!!!\\\\s+(${types.join(\"|\")})\\\\s+(.*)$`);\nvar endReg = /^!!!\\s*$/;\nvar debug = false;\nvar admonitionPlugin = {\n  name: \"admonition\",\n  level: \"block\",\n  start(src) {\n    var _a;\n    const index = (_a = src.match(new RegExp(`(^|[\\\\r\\\\n])!!!\\\\s+(${types.join(\"|\")})\\\\s+(.*)`))) == null ? void 0 : _a.index;\n    debug && console.log(\"\\u{1F38B}[marked start]\", src, index);\n    return index;\n  },\n  tokenizer(src, _tokens) {\n    debug && console.log(\"\\u{1F5FC}[marked tokenizer]\", src, _tokens);\n    const lines = src.split(/\\n/);\n    if (startReg.test(lines[0])) {\n      const section = { x: -1, y: -1 };\n      const sections = [];\n      for (let i = 0, k = lines.length; i < k; i++) {\n        if (startReg.test(lines[i])) {\n          section.x = i;\n        } else if (endReg.test(lines[i])) {\n          section.y = i;\n          if (section.x >= 0) {\n            sections.push({ ...section });\n            section.x = -1;\n            section.y = -1;\n          }\n        }\n      }\n      if (sections.length) {\n        const section2 = sections[0];\n        const [_, icon, title] = startReg.exec(lines[section2.x]) || [];\n        const text = lines.slice(section2.x + 1, section2.y).join(\"\\n\");\n        const raw = lines.slice(section2.x, section2.y + 1).join(\"\\n\");\n        const token = {\n          type: \"admonition\",\n          raw,\n          icon,\n          title,\n          text,\n          titleTokens: [],\n          tokens: [],\n          childTokens: [\"title\", \"text\"]\n        };\n        this.lexer.inlineTokens(token.title, token.titleTokens);\n        this.lexer.blockTokens(token.text, token.tokens);\n        return token;\n      }\n    }\n  },\n  renderer(token) {\n    debug && console.log(\"\\u{1F409}[marked renderer]\", this, token);\n    const html = `<div class=\"admonition admonition-${token.icon}\">\n    <p class=\"admonition-title\">${this.parser.parseInline(\n      token.titleTokens,\n      null\n    )}</p>\n    ${this.parser.parse(token.tokens)}\n    </div>`;\n    return html;\n  }\n};\nvar extensions = [admonitionPlugin];\nvar src_default = {\n  extensions\n};\nexport {\n  src_default as default\n};\n"],"names":["types","startReg","RegExp","join","endReg","src_default","extensions","name","level","start","src","_a","match","index","tokenizer","_tokens","lines","split","test","section","x","y","sections","i","k","length","push","section2","_","icon","title","exec","text","slice","token","type","raw","titleTokens","tokens","childTokens","this","lexer","inlineTokens","blockTokens","renderer","parser","parseInline","parse"],"sourceRoot":""}