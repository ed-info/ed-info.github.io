{"version":3,"file":"assets/9267.56e4b8b1525b22cb02db.js","mappings":"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","sources":["webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/kernel.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/version.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-ocaml/lib/kernel.js"],"sourcesContent":["import { PromiseDelegate } from \"promise-delegate\";\nimport { VERSION } from './version';\n/**\n * An error thrown by not implemented API functions.\n */\nclass NotImplementedError extends Error {\n    constructor(funcName) {\n        super(`Function ${funcName} not implemented!`);\n        this.name = \"NotImplementedError\";\n    }\n}\n/**\n * Event for Basthon's dispatch/listen.\n */\nclass BasthonEvent extends Event {\n    constructor(id, data) {\n        super(id);\n        this.detail = data;\n    }\n}\n/**\n * API that any Basthon kernel should fill to be supported\n * in console/notebook.\n */\nexport class KernelBase {\n    constructor(options) {\n        this._ready = false;\n        this._loaded = new PromiseDelegate();\n        this._execution_count = 0;\n        this._pendingInput = false;\n        // root path where kernel is installed\n        this._rootPath = options.rootPath;\n    }\n    /**\n     * Kernel version number (string).\n     */\n    version() { return VERSION; }\n    ;\n    /**\n     * Language implemented in the kernel (string).\n     * Generally lower case.\n     */\n    language() { throw new NotImplementedError(\"language\"); }\n    ;\n    /**\n     * Language name implemented in the kernel (string).\n     * As it should be displayed in text.\n     */\n    languageName() { throw new NotImplementedError(\"languageName\"); }\n    ;\n    /**\n     * Script (module) file extensions\n     */\n    moduleExts() {\n        throw new NotImplementedError(\"moduleExts\");\n    }\n    ;\n    /**\n     * Launch the kernel.\n     */\n    async launch() { throw new NotImplementedError(\"launch\"); }\n    ;\n    /**\n     * Execution count getter.\n     */\n    get execution_count() { return this._execution_count; }\n    /**\n     * Async code evaluation that resolves with the result.\n     */\n    evalAsync(code, outCallback, errCallback, data = null) {\n        throw new NotImplementedError(\"evalAsync\");\n    }\n    ;\n    restart() { throw new NotImplementedError(\"restart\"); }\n    ;\n    async putFile(filename, content) {\n        throw new NotImplementedError(\"putFile\");\n    }\n    ;\n    async putModule(filename, content) {\n        throw new NotImplementedError(\"putModule\");\n    }\n    ;\n    userModules() { return []; }\n    ;\n    getFile(path) { throw new NotImplementedError(\"getFile\"); }\n    ;\n    getUserModuleFile(filename) {\n        throw new NotImplementedError(\"getUserModuleFile\");\n    }\n    ;\n    more(source) { throw new NotImplementedError(\"more\"); }\n    ;\n    complete(code) { return []; }\n    ;\n    banner() { return `Welcome to the ${this.languageName()} REPL!`; }\n    ;\n    ps1() { return \">>> \"; }\n    ;\n    ps2() { return \"... \"; }\n    ;\n    /**\n     * Initialize the kernel.\n     */\n    async init() {\n        try {\n            await this.launch();\n        }\n        catch (error) {\n            this._loaded.reject(error);\n            return;\n        }\n        // connecting eval to basthon.eval.request event.\n        this.addEventListener(\"eval.request\", this.evalFromEvent.bind(this));\n        this._ready = true;\n        this._loaded.resolve();\n    }\n    /**\n     * Is the kernel ready?\n     */\n    get ready() { return this._ready; }\n    /**\n     * Promise that resolve when the kernel is loaded.\n     */\n    async loaded() { await this._loaded.promise; }\n    /**\n     * Root for kernel files. This is always the language directory\n     * inside the version number directory inside the kernel directory.\n     */\n    basthonRoot(absolute = false) {\n        let url = this._rootPath + \"/\" + this.version() + \"/\" + this.language();\n        if (absolute && !url.startsWith(\"http\")) {\n            const base = window.location.origin + window.location.pathname;\n            url = base.substring(0, base.lastIndexOf('/')) + \"/\" + url;\n        }\n        return url;\n    }\n    /**\n     * Downloading data (bytes array or data URL) as filename\n     * (opening browser dialog).\n     */\n    download(data, filename) {\n        if (!(typeof data === 'string' || data instanceof String)) {\n            const blob = new Blob([data], { type: \"application/octet-stream\" });\n            data = window.URL.createObjectURL(blob);\n        }\n        const anchor = document.createElement(\"a\");\n        anchor.download = filename;\n        anchor.href = data;\n        anchor.target = \"_blank\";\n        anchor.style.display = \"none\"; // just to be safe!\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n    }\n    ;\n    /**\n     * Dynamically load a script asynchronously.\n     */\n    static loadScript(url) {\n        return new Promise(function (resolve, reject) {\n            let script = document.createElement('script');\n            script.onload = resolve;\n            script.onerror = reject;\n            script.src = url;\n            document.head.appendChild(script);\n        });\n    }\n    ;\n    /**\n     * Wrapper around document.dispatchEvent.\n     * It adds the 'basthon.' prefix to each event name and\n     * manage the event lookup to retreive relevent data.\n     */\n    dispatchEvent(eventName, data) {\n        document.dispatchEvent(new BasthonEvent(`basthon.${eventName}`, data));\n    }\n    ;\n    /**\n     * Wrapper around document.addEventListener.\n     * It manages the 'basthon.' prefix to each event name and\n     * manage the event lookup to retreive relevent data.\n     */\n    addEventListener(eventName, callback) {\n        document.addEventListener(`basthon.${eventName}`, function (event) { callback(event.detail); });\n    }\n    ;\n    /**\n     * Send eval.input event then wait for the user response and return it.\n     */\n    async inputAsync(prompt, password = false, data = undefined) {\n        data = this.clone(data);\n        data.content = { prompt, password };\n        const promise = new Promise(function (resolve, reject) {\n            data.resolve = resolve;\n            data.reject = reject;\n        });\n        this._pendingInput = true;\n        this.dispatchEvent(\"eval.input\", data);\n        const res = await promise;\n        this._pendingInput = false;\n        return res;\n    }\n    /**\n     * Simple clone via JSON copy.\n     */\n    clone(obj) {\n        // simple trick that is enough for our purpose.\n        return JSON.parse(JSON.stringify(obj));\n    }\n    ;\n    /**\n     * Put a ressource (file or module).\n     * Detection is based on extension.\n     */\n    async putRessource(filename, content) {\n        var _a;\n        const ext = (_a = filename.split('.').pop()) !== null && _a !== void 0 ? _a : \"\";\n        if (this.moduleExts().includes(ext)) {\n            return await this.putModule(filename, content);\n        }\n        else {\n            return await this.putFile(filename, content);\n        }\n    }\n    ;\n    /**\n     * Is an input pending?\n     */\n    pendingInput() {\n        return this._pendingInput;\n    }\n    /**\n     * Internal. Code evaluation after an eval.request event.\n     */\n    async evalFromEvent(data) {\n        const stdCallback = (std) => (text) => {\n            let dataEvent = this.clone(data);\n            dataEvent.stream = std;\n            dataEvent.content = text;\n            this.dispatchEvent(\"eval.output\", dataEvent);\n        };\n        const outCallback = stdCallback(\"stdout\");\n        const errCallback = stdCallback(\"stderr\");\n        let args;\n        try {\n            args = await this.evalAsync(data.code, outCallback, errCallback, data);\n        }\n        catch (error) {\n            errCallback(error.toString());\n            const dataEvent = this.clone(data);\n            dataEvent.error = error;\n            dataEvent.execution_count = this.execution_count;\n            this.dispatchEvent(\"eval.error\", dataEvent);\n            return;\n        }\n        if (args == null)\n            return; // this should not happend\n        const result = args[0];\n        const executionCount = args[1];\n        let dataEvent = this.clone(data);\n        dataEvent.execution_count = executionCount;\n        if (result != null)\n            dataEvent.result = result;\n        this.dispatchEvent(\"eval.finished\", dataEvent);\n    }\n}\n","export const VERSION = \"0.60.2\";\n","import { KernelBase } from \"@basthon/kernel-base\";\n/**\n * An OCaml kernel that satisfies Basthon's API.\n */\nexport class KernelOCaml extends KernelBase {\n    constructor(options) {\n        super(options);\n        this.__eval_data__ = {};\n        this._initInnerCode = `\\\nopen Js_of_ocaml\nmodule Basthon = struct\n  let download (path: string): unit = ignore((Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##download path)\n  let create_canvas () = (Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##createcanvas()\n  let display_canvas canvas: unit = ignore((Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##displaycanvas canvas)\n  let save_canvas canvas (path: string): unit = ignore((Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##savecanvas canvas path)\n  let download_canvas ?(format = \"png\") canvas: unit = ignore((Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##downloadcanvas canvas format)\n  let display_image (path: string): unit = ignore((Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##displayimage path)\n  let version () : string = (Js.Unsafe.eval_string \"window.Basthon.__kernel__\")##version()\n  let help () : unit = print_endline {ext|\\\nBasthon module\n  help:               Show this help.\n  download path:      Download a file from the local filesystem.\n  display_image path: Display a PNG image from the local filesystem.\n  create_canvas:      Create a HTML5 canvas to be displayed with display_canvas.\n  display_canvas canvas:   Display a HTML5 canvas created with create_canvas.\n  save_canvas canvas path: Save a canvas to a PNG/JPG file to the local filesystem.\n  download_canvas ?(format = \"png\") canvas: Download a canvas to a PNG/JPG file.\n|ext}\nend`;\n    }\n    language() {\n        return \"ocaml\";\n    }\n    languageName() {\n        return \"OCaml\";\n    }\n    moduleExts() {\n        return [\"ml\"];\n    }\n    /**\n     * Start the Basthon kernel asynchronously.\n     */\n    async launch() {\n        const { __kernel__ } = await import(\"./__kernel__\");\n        this.__kernel__ = __kernel__;\n        this.restart();\n    }\n    /**\n     * Basthon async code evaluation function.\n     */\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        var _a, _b;\n        // force interactivity in all modes\n        if (this.__kernel__ == null)\n            return;\n        if (this._execution_count === 0)\n            (_a = this.__kernel__) === null || _a === void 0 ? void 0 : _a.exec(this._initInnerCode);\n        data.interactive = true;\n        this.__eval_data__ = data;\n        // set stream callbacks\n        this.__kernel__.io.stdout = outCallback;\n        this.__kernel__.io.stderr = errCallback;\n        this._execution_count++;\n        let result = (_b = this.__kernel__) === null || _b === void 0 ? void 0 : _b.exec(code);\n        // restoration\n        this.__kernel__.io.stdout = console.log;\n        this.__kernel__.io.stderr = console.error;\n        // return result\n        if (typeof result === \"string\" && result.length > 0)\n            result = { \"text/plain\": result.replace(/\\n$/, \"\") };\n        else\n            result = undefined;\n        return [result, this._execution_count];\n    }\n    /**\n     * Restart the kernel.\n     */\n    restart() {\n        var _a;\n        if (((_a = this.__kernel__) === null || _a === void 0 ? void 0 : _a.init()) !== 0)\n            throw new Error(\"Can't start OCaml kernel!\");\n        this._execution_count = 0;\n    }\n    /**\n     * OCaml wrapper arround Kernel.download (to be called by __kernel__.ml).\n     */\n    ocamlDownload(content, filename) {\n        const array = window.jsoo_runtime.caml_convert_bytes_to_array(content);\n        this.download(array, filename);\n    }\n    /**\n     * Send eval.display event with the given canvas\n     * and ocaml-canvas as display_type.\n     */\n    displayCanvas(canvas) {\n        // simple copy to update evaluation data with display_data\n        const display_data = JSON.parse(JSON.stringify(this.__eval_data__));\n        display_data[\"display_type\"] = \"ocaml-canvas\";\n        display_data[\"content\"] = canvas;\n        this.dispatchEvent(\"eval.display\", display_data);\n    }\n    /**\n     * Save a canvas to a file on the local FS.\n     */\n    async saveCanvas(canvas, path) {\n        var _a;\n        if (this.__kernel__ == null)\n            return;\n        const ext = (_a = path.split(\".\").pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        let mime = \"image/png\";\n        if (ext === \"jpg\" || ext === \"jpeg\")\n            mime = \"image/jpeg\";\n        const blob = await new Promise((resolve) => canvas.toBlob(resolve, mime));\n        if (blob == null)\n            return;\n        // await blob.arrayBuffer() seems not support for old browser version\n        const content = await new Response(blob).arrayBuffer();\n        this.__kernel__.createfile(path, content);\n    }\n    /**\n     * Download a canvas as an image file (png or jpg).\n     */\n    downloadCanvas(canvas, format) {\n        if (format == null ||\n            !(typeof format === \"string\" || format instanceof String))\n            format = \"png\";\n        format = format.toLowerCase();\n        let mime;\n        switch (format) {\n            case \"jpg\":\n            case \"jpeg\":\n                mime = \"image/jpeg\";\n                break;\n            case \"png\":\n            default:\n                mime = \"image/png\";\n                // we force png\n                format = \"png\";\n                break;\n        }\n        const image = canvas.toDataURL(mime).replace(mime, \"image/octet-stream\");\n        this.download(image, `canvas.${format}`);\n    }\n    /**\n     * Display a PNG image.\n     */\n    async displayImage(content) {\n        // simple copy to update evaluation data with display_data\n        const display_data = JSON.parse(JSON.stringify(this.__eval_data__));\n        const array = window.jsoo_runtime.caml_convert_bytes_to_array(content);\n        // convert array to\n        const blob = new Blob([array], { type: \"image/png\" });\n        const dataURL = await new Promise((resolve) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(blob);\n        });\n        const png = dataURL.slice(\"data:image/png;base64,\".length);\n        display_data[\"display_type\"] = \"multiple\";\n        display_data[\"content\"] = { \"image/png\": png };\n        this.dispatchEvent(\"eval.display\", display_data);\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    async putFile(filename, content) {\n        if (this.__kernel__ == null)\n            return;\n        this.__kernel__.createfile(filename, content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    async putModule(filename, content) {\n        var _a;\n        this.putFile(filename, content);\n        /* why is this needed?\n         * even if path is already added using the #directory directive,\n         * one should recall the directive each time the folder is modified...\n         */\n        (_a = this.__kernel__) === null || _a === void 0 ? void 0 : _a.loadmodule(filename);\n    }\n    /**\n     * List modules launched via putModule.\n     */\n    userModules() {\n        return [];\n    }\n    /**\n     * Download a file from the VFS.\n     */\n    getFile(path) { }\n    /**\n     * Download a user module file.\n     */\n    getUserModuleFile(filename) { }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 in teminal prompt.\n     */\n    more(source) {\n        return false;\n    }\n    /**\n     * Mimic the OCaml's REPL banner.\n     */\n    banner() {\n        return \"        OCaml version 4.11.1\\n\";\n    }\n    ps1() {\n        return \"# \";\n    }\n    ps2() {\n        return \"  \";\n    }\n    /**\n     * Complete a code at the end (usefull for tab completion).\n     *\n     * Returns an array of two elements: the list of completions\n     * and the start index.\n     */\n    complete(code) {\n        return [];\n    }\n}\n"],"names":["NotImplementedError","Error","constructor","funcName","super","this","name","BasthonEvent","Event","id","data","detail","KernelBase","options","_ready","_loaded","PromiseDelegate","_execution_count","_pendingInput","_rootPath","rootPath","version","language","languageName","moduleExts","async","execution_count","evalAsync","code","outCallback","errCallback","restart","filename","content","userModules","getFile","path","getUserModuleFile","more","source","complete","banner","ps1","ps2","launch","error","reject","addEventListener","evalFromEvent","bind","resolve","ready","promise","basthonRoot","absolute","url","startsWith","base","window","location","origin","pathname","substring","lastIndexOf","download","String","blob","Blob","type","URL","createObjectURL","anchor","document","createElement","href","target","style","display","body","appendChild","click","removeChild","static","Promise","script","onload","onerror","src","head","dispatchEvent","eventName","callback","event","prompt","password","clone","res","obj","JSON","parse","stringify","_a","ext","split","pop","includes","putModule","putFile","pendingInput","stdCallback","std","text","dataEvent","stream","args","toString","result","executionCount","KernelOCaml","__eval_data__","_initInnerCode","__kernel__","_b","exec","interactive","io","stdout","stderr","console","log","length","replace","undefined","init","ocamlDownload","array","jsoo_runtime","caml_convert_bytes_to_array","displayCanvas","canvas","display_data","toLowerCase","mime","toBlob","Response","arrayBuffer","createfile","downloadCanvas","format","image","toDataURL","png","reader","FileReader","onloadend","readAsDataURL","slice","loadmodule"],"sourceRoot":""}