{"version":3,"file":"assets/4750.44373617d1977ca9add8.js","mappings":"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","sources":["webpack://@basthon/basthon-notebook/./node_modules/codemirror/mode/go/go.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"go\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n    \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n    \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n    \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n    \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n    \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n    \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n    \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n    \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n    \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n    \"rune\":true, \"any\":true, \"comparable\":true\n  };\n\n  var atoms = {\n    \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n    \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n    \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n    \"println\":true, \"real\":true, \"recover\":true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n      }\n      if (end || !(escaped || quote == \"`\"))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        if (ctx.type == \"case\") ctx.type = \"}\";\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"case\") ctx.type = \"case\";\n      else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n      else if (curPunc == ctx.type) popContext(state);\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n        state.context.type = \"}\";\n        return ctx.indented;\n      }\n      var closing = firstChar == ctx.type;\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}):\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-go\", \"go\");\n\n});\n"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","keywords","atoms","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","test","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","context","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","t","popContext","indent","textAfter","Pass","firstChar","charAt","closing","electricChars","closeBrackets","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod"],"sourceRoot":""}