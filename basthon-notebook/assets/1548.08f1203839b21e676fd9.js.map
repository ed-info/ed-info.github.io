{"version":3,"file":"assets/1548.08f1203839b21e676fd9.js","mappings":"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","sources":["webpack://@basthon/basthon-notebook/./node_modules/codemirror/mode/jsx/jsx.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state; this.mode = mode; this.depth = depth; this.prev = prev\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state),\n                       context.mode,\n                       context.depth,\n                       context.prev && copyContext(context.prev))\n  }\n\n  CodeMirror.defineMode(\"jsx\", function(config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {name: \"xml\", allowMissing: true, multilineTagIndentPastTag: false, allowMissingTagName: true})\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\")\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName\n      state.tagName = null\n      var result = xmlMode.indent(state, \"\", \"\")\n      state.tagName = tagName\n      return result\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode)\n        return xmlToken(stream, state, state.context)\n      else\n        return jsToken(stream, state, state.context)\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) { // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1\n        else stream.skipToEnd()\n        return \"comment\"\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state)\n\n        var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine)\n            xmlContext = xmlContext.prev\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented\n        // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent),\n                                    jsMode, 0, state.context)\n        return null\n      }\n\n      if (cx.depth == 1) { // Inside of tag\n        if (stream.peek() == \"<\") { // Tag inside of tag\n          xmlMode.skipAttribute(cx.state)\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)),\n                                      xmlMode, 0, state.context)\n          return null\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd()\n          return \"comment\"\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2\n          return token(stream, state)\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0\n          else state.context = state.context.prev\n        } else if (/^</.test(cur)) {\n          cx.depth = 1\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop)\n      }\n      return style\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")),\n                                    xmlMode, 0, state.context)\n        jsMode.skipExpression(cx.state)\n        return null\n      }\n\n      var style = jsMode.token(stream, cx.state)\n      if (!style && cx.depth != null) {\n        var cur = stream.current()\n        if (cur == \"{\") {\n          cx.depth++\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev\n        }\n      }\n      return style\n    }\n\n    return {\n      startState: function() {\n        return {context: new Context(CodeMirror.startState(jsMode), jsMode)}\n      },\n\n      copyState: function(state) {\n        return {context: copyContext(state.context)}\n      },\n\n      token: token,\n\n      indent: function(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine)\n      },\n\n      innerMode: function(state) {\n        return state.context\n      }\n    }\n  }, \"xml\", \"javascript\")\n\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\")\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {name: \"jsx\", base: {name: \"javascript\", typescript: true}})\n});\n"],"names":["CodeMirror","Context","state","mode","depth","prev","this","copyContext","context","copyState","defineMode","config","modeConfig","xmlMode","getMode","name","allowMissing","multilineTagIndentPastTag","allowMissingTagName","jsMode","base","flatXMLIndent","tagName","result","indent","token","stream","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","stop","style","cur","current","test","indexOf","backUp","length","xmlToken","expressionAllowed","skipExpression","jsToken","textAfter","fullLine","innerMode","defineMIME","typescript","mod"],"sourceRoot":""}