
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    let database = {
        fileName: "",
        tables: [], // –ö–æ–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚Äî –æ–±'—î–∫—Ç –∑ name —Ç–∞ schema
        reports: [], // üÜï –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤
        relations: [], // üÜï–º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤'—è–∑–∫—ñ–≤
        forms: [] // ‚¨ÖÔ∏è –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º

    };

    // New structure for query definitions and results
    let queries = {
        definitions: [], // Stores query configurations
        results: [] // Stores query result tables (virtual tables)
    };

    let SQL = null;
    let db = null;
    let dbToDelete = null;
    let selectedReportName = null;
    let currentEditTable = null;
    let selectedCell = null;
    let selectedQueryName = null; // To keep track of the selected query in the saved queries dialog
    let selectedTableNameForEdit = null; // To keep track of the selected table in the saved tables dialog for opening
    let selectedTableNameForDelete = null; // To keep track of the selected table in the saved tables dialog for deletion
    let selectedDbFile = null;
    let newDbFile = false; // –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É

    
    closeAllModals();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SQL.js
    initSqlJs({
        locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${file}`
    }).then(SQLLib => {
        SQL = SQLLib;
        //loadDatabase();
    });
   
     function getCurrentTableNames() {
      return Object.keys(database.tables || {});
    }
    function getCurrentQueryNames() {
      console.log("Queries=",queries.definitions)
      return Object.keys(queries.definitions || {});
    }
    function getCurrentReportNames() {
      return (database.reports || []).map(r => r.name);
    }
    function getCurrentFormNames() {
      return (database.forms || []).map(f => f.name);
    }
       
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ë–î –∑ localStorage –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó
    function loadDatabase() {
        const name = database.fileName || "my_database";
        const saved = localStorage.getItem(name + ".db-data");
        console.log("name =",name )
        
        if (saved) {
            const uIntArray = Uint8Array.from(atob(saved), c => c.charCodeAt(0));
            db = new SQL.Database(uIntArray);
            console.log("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ localStorage");
            console.log("db =",db )
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –±–∞–∑–∞
            const savedQueries = localStorage.getItem(name + ".queries-data");
            if (savedQueries) {
                queries.definitions = JSON.parse(savedQueries);
                console.log("–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage");
                
            } else {
                queries.definitions = [];
            }
            
            const savedQueryResults = localStorage.getItem(name + ".query-results");
            if (savedQueryResults) {
                queries.results = JSON.parse(savedQueryResults);
                console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage");
            } else {
                queries.results = [];
            }

            const savedReports = localStorage.getItem(name + ".reports-data");
            if (savedReports) {
                database.reports = JSON.parse(savedReports);
                console.log("–ó–≤—ñ—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage");
                console.log("Load Report: ",database.reports)
            } else {
                database.reports = [];
            }
            
            const savedForms = localStorage.getItem(name + ".forms-data");
            if (savedForms) {
                database.forms = JSON.parse(savedForms);
                console.log("–§–æ—Ä–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage");
            } else {
                database.forms = [];
            }
            
            const savedRelations = localStorage.getItem(name + ".relations-data");
            if (savedRelations) {
                database.relations = JSON.parse(savedRelations);
                console.log("–ó–≤'—è–∑–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage");
            } else {
                database.relations = [];
            }

        } else {
            db = new SQL.Database(); // —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ë–î, –∞–ª–µ –±–µ–∑ –∑–∞–ø–∏—Ç—ñ–≤
            queries.definitions = []; // –æ–±–Ω—É–ª—è—î–º–æ, –±–æ –±–∞–∑–∏ –Ω–µ–º–∞—î
            database.reports = [];
            database.forms = [];
            console.log("–ù–æ–≤–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞");
        }
        newDbFile = false;
        queries.results = []; // –ó–∞–≤–∂–¥–∏ –æ—á–∏—â–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        updateMainTitle();
        updateQuickAccessPanel(
                  getCurrentTableNames(),
                  getCurrentQueryNames(),
                  getCurrentReportNames(),
                  getCurrentFormNames()
                );                
                    
    }


    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ë–î —É localStorage
    function saveDatabase() {
        console.log("DBSCHM=", database.tables)
        if (!db) return;
        const data = db.export();
        const base64 = btoa(String.fromCharCode(...data));
        localStorage.setItem(database.fileName + ".db-data", base64);
        console.log("Save file: ", database.fileName)
        localStorage.setItem(database.fileName + ".tables-data", JSON.stringify(database.tables));
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ —Ç–∞ —ó—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        localStorage.setItem(database.fileName + ".queries-data", JSON.stringify(queries.definitions));
        localStorage.setItem(database.fileName + ".query-results", JSON.stringify(queries.results || []));


        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç–∏
        localStorage.setItem(database.fileName + ".reports-data", JSON.stringify(database.reports || []));
        console.log("Report: ",database.reports)
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ä–º–∏
        localStorage.setItem(database.fileName + ".forms-data", JSON.stringify(database.forms || []));
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤'—è–∑–∫–∏
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤'—è–∑–∫–∏=",database.relations)
        localStorage.setItem(database.fileName + ".relations-data", JSON.stringify(database.relations || []));
        
        console.log("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É localStorage");
        updateQuickAccessPanel(
                  getCurrentTableNames(),
                  getCurrentQueryNames(),
                  getCurrentReportNames(),
                  getCurrentFormNames()
                );                
                    
    }
    //

    function showStorageDialog() {
        const listEl = document.getElementById("storageList");
        listEl.innerHTML = "";
        selectedDbFile = null;

        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.endsWith(".db-data")) {
                const fileName = key.replace(".db-data", "");
                const li = document.createElement("li");
                li.textContent = fileName;
                li.style.padding = "8px";
                li.style.cursor = "pointer";

                li.addEventListener("click", () => {
                    // –∑–Ω—è—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
                    [...listEl.children].forEach(el => el.style.background = "");
                    li.style.background = "#d0e0ff";
                    selectedDbFile = fileName;
                });

                listEl.appendChild(li);
            }
        }

        document.getElementById("storageModal").style.display = "flex";
    }

    function closeStorageDialog() {
        document.getElementById("storageModal").style.display = "none";
    }

    function loadSelectedDb() {
        if (!selectedDbFile) {
            Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
            return;

        }
        
        const saved = localStorage.getItem(selectedDbFile + ".db-data");
        
        if (!saved) {
            Message("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        const uIntArray = Uint8Array.from(atob(saved), c => c.charCodeAt(0));
        db = new SQL.Database(uIntArray);

        // üîÑ –û—á–∏—Å—Ç–∏—Ç–∏ database, queries —Ç–∞ –º–µ–Ω—é
        database.fileName = selectedDbFile;
        database.tables = [];
        queries.definitions = []; // Clear query definitions on new DB load
        queries.results = []; // Clear query results on new DB load
        database.forms = [];
        database.reports = [];

        const dataMenu = document.getElementById("data-menu");
        dataMenu.innerHTML = "";

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
        const fullDatabase = JSON.parse(localStorage.getItem(selectedDbFile + ".tables-data"));
        console.log("fullDatabase=",fullDatabase)
        if (fullDatabase) {
            database.tables = fullDatabase;
        
            // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ SQLite, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
            database.tables.forEach(t => {
                try {
                    db.exec(`SELECT * FROM "${t.name}" LIMIT 1`);
                } catch (e) {
                    console.warn(`–¢–∞–±–ª–∏—Ü—è "${t.name}" –≤—ñ–¥—Å—É—Ç–Ω—è –≤ SQLite, —Å—Ç–≤–æ—Ä—é—î–º–æ...`);
                    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤—Ä—É—á–Ω—É –∑ —ó—ó schema
                    const fields = t.schema.map(field => {
                        let type = field.type.toUpperCase();
                        if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
                        else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
                        else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
                        else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
                        else if (type === "–î–ê–¢–ê") type = "TEXT";
        
                        let def = `"${field.title}" ${type}`;
                        if (field.primaryKey) def += " PRIMARY KEY";
                        return def;
                    });
        
                    // –î–æ–¥–∞—Ç–∏ FOREIGN KEY (—è–∫—â–æ —î)
                    const foreignKeys = t.schema
                        .filter(f => f.foreignKey && f.refTable && f.refField)
                        .map(f => `FOREIGN KEY ("${f.title}") REFERENCES "${f.refTable}"("${f.refField}")`);
        
                    const fullFields = [...fields, ...foreignKeys].join(", ");
                    db.run(`CREATE TABLE "${t.name}" (${fullFields});`);
                }
        
                // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
                const res = db.exec(`SELECT * FROM "${t.name}"`);
                t.data = res.length ? res[0].values : [];
            });
        } else {
            Message("–§–∞–π–ª –¥–∞–Ω–∏—Ö –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—å.");
            return;
        }
        

        // Load queries definitions
        loadDatabase() 

        // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—Ç–∏ –∑–≤‚Äô—è–∑–∫–∏ –∑ foreign key
        database.relations = [];
        
        database.tables.forEach(table => {
            table.schema.forEach(field => {
                if (field.foreignKey && field.refTable && field.refField) {
                    database.relations.push({
                        fromTable: table.name,
                        fromField: field.title,
                        toTable: field.refTable,
                        toField: field.refField,
                        readonly: true, // üëà –¶–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó —è–∫ "—á–µ—Ä–≤–æ–Ω–∏–π —ñ –Ω–µ–∑–º—ñ–Ω–Ω–∏–π"
                    });
                }
            });
        });
        console.log("database.relations=",database.relations)

        console.log("database.tables=", database.tables)
        database.tables.forEach(t => addTableToMenu(t.name)); // üîß –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é "–î–∞–Ω—ñ"
        Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö '" + selectedDbFile + "' –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
        closeStorageDialog();
        updateMainTitle();
    }



    // -------------

/*
 * –§—É–Ω–∫—Ü—ñ—è editData
 * ------------------
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Ç—É —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: tableName ‚Äî –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ –∑–∞–ø–∏—Ç—É (–∑ * –Ω–∞ –ø–æ—á–∞—Ç–∫—É).
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–∞–Ω–∏–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥—É.
 * –†–æ–±–æ—Ç–∞:
 * - –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—É –∑ SQLite –∞–±–æ –æ–±'—î–∫—Ç–∞ database.
 * - –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î —ó—ó, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ —Å—Ö–µ–º—ñ.
 * - –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
 */
function editData(tableName) {
    let table = null; // –ü–æ—Ç–æ—á–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
    let isReadOnly = false; // –ß–∏ —î —Ç–∞–±–ª–∏—Ü—è –¥–æ—Å—Ç—É–ø–Ω–æ—é –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
    let columns = []; // –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
    let rows = [];    // –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
    document.getElementById("savedTablesModal").style.display = "none";
   
    const isQueryTable = tableName.startsWith('*'); // –ß–∏ —î —Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø–∏—Ç—É
    console.log("Edit=", tableName);

    if (isQueryTable) {
        const originalQueryName = tableName.substring(1);
        table = queries.results.find(t => t.name === originalQueryName);
        isReadOnly = true;
        if (table) {
            columns = table.schema.map(col => col.title);
            rows = table.data;
        }
    } else {
        table = database.tables.find(t => t.name === tableName);
        isReadOnly = false;

        if (table) {
            try {
                const res = db.exec(`SELECT * FROM "${tableName}"`);
                rows = res.length ? res[0].values : [];
                columns = res.length ? res[0].columns : table.schema.map(col => col.title);
            } catch (e) {
                console.warn(`–¢–∞–±–ª–∏—Ü—è "${tableName}" –Ω–µ —ñ—Å–Ω—É—î –≤ SQLite. –°—Ç–≤–æ—Ä—é—î–º–æ...`);

                const fields = table.schema.map(field => {
                    let type = field.type.toUpperCase();
                    if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
                    else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
                    else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
                    else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
                    else if (type === "–î–ê–¢–ê") type = "TEXT";

                    let def = `"${field.title}" ${type}`;
                    if (field.primaryKey) def += " PRIMARY KEY";
                    return def;
                });

                const foreignKeys = table.schema
                    .filter(f => f.foreignKey && f.refTable && f.refField)
                    .map(f => `FOREIGN KEY (\"${f.title}\") REFERENCES \"${f.refTable}\"(\"${f.refField}\")`);

                const createSQL = `CREATE TABLE \"${tableName}\" (${[...fields, ...foreignKeys].join(", ")});`;
                try {
                    db.run("PRAGMA foreign_keys = ON;");
                    db.run(createSQL);
                    console.log("–¢–∞–±–ª–∏—Ü—é —Å—Ç–≤–æ—Ä–µ–Ω–æ:", createSQL);
                } catch (err) {
                    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é:", err);
                    Message(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ \"${tableName}\"`);
                    return;
                }

                table.data = table.data || [];
                table.data.forEach(record => {
                    const columns = table.schema.map(f => `\"${f.title}\"`);
                    const values = record.map(v => v === null ? "NULL" : `'${String(v).replace(/'/g, "''")}'`);
                    const insertSQL = `INSERT INTO \"${tableName}\" (${columns.join(", ")}) VALUES (${values.join(", ")});`;
                    try {
                        db.run(insertSQL);
                    } catch (e) {
                        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ:", insertSQL, e);
                        Message(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Å: ${e.message}`);
                    }
                });

                const res = db.exec(`SELECT * FROM \"${tableName}\"`);
                rows = res.length ? res[0].values : [];
                columns = res.length ? res[0].columns : table.schema.map(col => col.title);
            }

            table.data = rows;
            console.log("table.data=", table.data);
        }
    }

    if (!table) {
        Message("–¢–∞–±–ª–∏—Ü—é/–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
    }

    currentEditTable = table;
    document.getElementById("editTitle").innerText = isReadOnly
        ? `–ü–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—É \"${table.name}\"`
        : `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ \"${table.name}\"`;

    const head = document.getElementById("editHead");
    const body = document.getElementById("editBody");
    head.innerHTML = "";
    body.innerHTML = "";
    selectedCell = null;

    const headerRow = document.createElement("tr");
    columns.forEach((colTitle, i) => {
        const th = document.createElement("th");
        th.textContent = colTitle;
        th.style.backgroundColor = "#eee";
        if (!isReadOnly && table.schema[i] && table.schema[i].primaryKey) th.classList.add("pk");
        headerRow.appendChild(th);
    });
    head.appendChild(headerRow);

    dataRows = rows || [];
    console.log("dataRows=", dataRows);

    dataRows.forEach(rowData => {
        const tr = document.createElement("tr");
        rowData.forEach((cellData, index) => {
            const td = document.createElement("td");
            const col = table.schema[index];

            const isPrimaryKey = !isQueryTable && col && col.primaryKey;
            const isForeignKey = !isQueryTable && col && col.foreignKey && col.refTable && col.refField;

            if (isForeignKey) {
                const select = document.createElement("select");

                const emptyOption = document.createElement("option");
                emptyOption.value = "empty";
                emptyOption.textContent = "(–ø—É—Å—Ç–æ)";
                select.appendChild(emptyOption);

                const refTableObj = database.tables.find(t => t.name === col.refTable);
                if (refTableObj) {
                    const refIdIndex = refTableObj.schema.findIndex(f => f.title === col.refField);
                    const refTextIndex = refTableObj.schema.findIndex(f => f.title.toLowerCase().includes("name") || f.title !== col.refField);

                    if (refIdIndex !== -1) {
                        console.log("refTableObj=",refTableObj)
                        refTableObj.data.forEach(refRow => {
                            console.log("refTextIndex,refRow[refIdIndex]=",refTextIndex,refRow[refIdIndex])
                            const option = document.createElement("option");
                            option.value = refRow[refIdIndex];
                            option.textContent = refTextIndex !== -1 ? refRow[refTextIndex] : refRow[refIdIndex];
                            select.appendChild(option);
                        });
                        select.value = cellData ?? "empty";
                    }
                }
                td.appendChild(select);
                select.disabled = isQueryTable;
                select.addEventListener("change", () => {
                    rowData[index] = select.value === "empty" ? null : select.value;
                });
            } else if (col.type === "–¢–∞–∫/–ù—ñ" || col.type.toLowerCase() === "boolean") {
                const select = document.createElement("select");
                const optionYes = document.createElement("option");
                optionYes.value = "1";
                optionYes.textContent = "–¢–∞–∫";
                select.appendChild(optionYes);

                const optionNo = document.createElement("option");
                optionNo.value = "0";
                optionNo.textContent = "–ù—ñ";
                select.appendChild(optionNo);

                select.value = cellData == 1 ? "1" : "0";
                select.disabled = isQueryTable;
                td.appendChild(select);
                select.addEventListener("change", () => {
                    rowData[index] = Number(select.value);
                });
            } else if (col.type === "–î–∞—Ç–∞") {
                const input = document.createElement("input");
                input.type = "date";
                let value = typeof cellData === "string" && cellData.match(/^\d{4}-\d{2}-\d{2}$/)
                    ? cellData
                    : new Date().toISOString().split("T")[0];
                input.value = value;
                input.disabled = isQueryTable;
                td.appendChild(input);
                input.addEventListener("change", () => {
                    rowData[index] = input.value;
                });
                rowData[index] = input.value;
            } else {
                td.innerText = cellData ?? "";
                td.contentEditable = !isQueryTable && !isPrimaryKey;
                if (!isQueryTable && isPrimaryKey) td.classList.add("pk");
            }

            td.addEventListener("click", () => {
                selectedCell = td;
            });

            tr.appendChild(td);
        });
        body.appendChild(tr);
    });

    document.getElementById("addDataRowBtn").style.display = isReadOnly ? 'none' : 'inline-block';
    document.getElementById("deleteSelectedRowBtn").style.display = isReadOnly ? 'none' : 'inline-block';
    document.getElementById("saveTableDataBtn").style.display = isReadOnly ? 'none' : 'inline-block';
    document.getElementById("editModal").style.display = "flex";
}

/*
 * –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö
 */
 
 function addDataRow() {
        if (!currentEditTable || currentEditTable.name.startsWith('*')) return; // –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
        const tbody = document.getElementById("editBody");
        const tr = document.createElement("tr");
    
        currentEditTable.schema.forEach((col, index) => {
            const td = document.createElement("td");
            console.log("Add data row, col=",col)
    
            if ((col.primaryKey)&&(col.type=="–¶—ñ–ª–µ —á–∏—Å–ª–æ")) {
                // –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è PK —É –∫–æ–ª–æ–Ω—Ü—ñ
                let max = 0;
                const rows = tbody.querySelectorAll("tr");
                rows.forEach(row => {
                    const val = parseInt(row.children[index].innerText);
                    if (!isNaN(val)) max = Math.max(max, val);
                });
                td.innerText = max + 1;
                td.contentEditable = "false";
            }
            else if (col.foreignKey && col.refTable && col.refField) {
                const select = document.createElement("select");
            
                const refTableObj = database.tables.find(t => t.name === col.refTable);
                if (refTableObj) {
                    const refFieldObj = refTableObj.schema.find(f => f.title === col.refField);
                    const refIdIndex = refTableObj.schema.findIndex(f => f.title === col.refField);
            
                    let refTextIndex = -1;
            
                    if (refFieldObj) {
                        if (refFieldObj.type === "–¢–µ–∫—Å—Ç") {
                            // –ü–æ–∫–∞–∑—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–∞–º–æ–≥–æ refField
                            refTextIndex = refIdIndex;
                        } else if (refFieldObj.type === "–¶—ñ–ª–µ —á–∏—Å–ª–æ") {
                            // –®—É–∫–∞—î–º–æ —ñ–Ω—à–µ –ø–æ–ª–µ –∑ —Ç–∞–∫–∏–º —Å–∞–º–∏–º title, —è–∫ –ø–æ–ª–µ —É –≥–æ–ª–æ–≤–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
                            refTextIndex = refTableObj.schema.findIndex(f => f.title === col.title);
                        }
                    }
            
                    if (refIdIndex !== -1 && refTextIndex !== -1) {
                        refTableObj.data.forEach(refRow => {
                            const option = document.createElement("option");
                            option.value = refRow[refIdIndex];     // id, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
                            option.textContent = refRow[refTextIndex]; // –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
                            select.appendChild(option);
                        });
                    }
                }
            
                td.appendChild(select);
            }
            
            
            else if (col.type === "–¢–∞–∫/–ù—ñ" || col.type.toLowerCase() === "boolean") {
                const select = document.createElement("select");
            
                const optionYes = document.createElement("option");
                optionYes.value = "1";
                optionYes.textContent = "–¢–∞–∫";
                select.appendChild(optionYes);
            
                const optionNo = document.createElement("option");
                optionNo.value = "0";
                optionNo.textContent = "–ù—ñ";
                select.appendChild(optionNo);
            
                td.appendChild(select);
            } else if (col.type === "–î–∞—Ç–∞") {
                const input = document.createElement("input");
                input.type = "date";
            
                // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞
                const today = new Date().toISOString().split("T")[0];
                input.value = today;
            
                td.appendChild(input);           

            }
             else {
                td.contentEditable = "true";
                td.innerText = "";
            }
            
    
            td.addEventListener("click", () => {
                selectedCell = td;
            });
    
            tr.appendChild(td);
        });
    
        tbody.appendChild(tr);
    }
    
   

/*
–§—É–Ω–∫—Ü—ñ—è deleteSelectedRow()
---------------------------
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í–∏–¥–∞–ª—è—î –≤–∏–±—Ä–∞–Ω–∏–π —Ä—è–¥–æ–∫ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —î –∑–∞–ø–∏—Ç–æ–º —ñ –º–∞—î –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –í—ñ–¥—Å—É—Ç–Ω—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–ª–æ–±–∞–ª—å–Ω—ñ selectedCell —Ç–∞ currentEditTable).
–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –∑ DOM —ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –≤–∏–∫–ª–∏–∫–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
–°–ø–æ—Å—ñ–± —Ä–æ–±–æ—Ç–∏:
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤–∏–±—Ä–∞–Ω–∞ —Ç–∞ —á–∏ —Ç–∞–±–ª–∏—Ü—è –Ω–µ —î –∑–∞–ø–∏—Ç–æ–º;
- –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å —Å—Ç–æ–≤–ø—Ü—è –∑ –ø–µ—Ä–≤–∏–Ω–Ω–∏–º –∫–ª—é—á–µ–º;
- –§–æ—Ä–º—É—î SQL-–∑–∞–ø–∏—Ç DELETE —ñ –≤–∏–∫–æ–Ω—É—î –π–æ–≥–æ;
- –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –ë–î.
*/
function deleteSelectedRow() {
    if (!selectedCell || currentEditTable.name.startsWith('*')) { // –ó–∞–ø–æ–±—ñ–≥–∞—î –≤–∏–¥–∞–ª–µ–Ω–Ω—é –∑ –∑–∞–ø–∏—Ç—É –∞–±–æ –±–µ–∑ –≤–∏–±–æ—Ä—É –∫–ª—ñ—Ç–∏–Ω–∫–∏
        Message("–°–ø–æ—á–∞—Ç–∫—É –∫–ª–∞—Ü–Ω—ñ—Ç—å —É –∫–æ–º—ñ—Ä–∫—É —Ä—è–¥–∫–∞, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏, –∞–±–æ —Ü–µ –≤—ñ–∫–Ω–æ –Ω–µ —î —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–º.");
        return;
    }

    const row = selectedCell.parentElement; // –û—Ç—Ä–∏–º—É—î–º–æ HTML-–µ–ª–µ–º–µ–Ω—Ç —Ä—è–¥–∫–∞
    const cells = row.querySelectorAll("td"); // –í—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Ä—è–¥–∫–∞

    const pkColIndex = currentEditTable.schema.findIndex(col => col.primaryKey); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    if (pkColIndex === -1) {
        Message("–£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞, —Ç–æ–º—É –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –∑ –±–∞–∑–∏.");
        return;
    }

    const pkValue = cells[pkColIndex].innerText.trim(); // –ó–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    const sql = `DELETE FROM "${currentEditTable.name}" WHERE "${currentEditTable.schema[pkColIndex].title}" = '${pkValue}';`; // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É
    db.run(sql); // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    row.remove(); // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –∑ DOM
    saveDatabase(); // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ë–î
}

/*
–§—É–Ω–∫—Ü—ñ—è saveTableData()
------------------------
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É –±–∞–∑—É –¥–∞–Ω–∏—Ö, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (select, input).
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –í—ñ–¥—Å—É—Ç–Ω—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î DOM —Ç–∞ currentEditTable).
–†–µ–∑—É–ª—å—Ç–∞—Ç: –î–∞–Ω—ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É –ë–î, —Ç–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è.
–°–ø–æ—Å—ñ–± —Ä–æ–±–æ—Ç–∏:
- –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Å—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ;
- –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –±–µ—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ select / input / —Ç–µ–∫—Å—Ç—É;
- –Ø–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —Ñ–æ—Ä–º—É—î INSERT OR REPLACE SQL;
- –ó–±–µ—Ä—ñ–≥–∞—î –±–∞–∑—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î currentEditTable.data.
*/
function saveTableData() {
    if (!currentEditTable || currentEditTable.name.startsWith('*')) {
        Message("–¶—è —Ç–∞–±–ª–∏—Ü—è –Ω–µ –ø—ñ–¥–ª—è–≥–∞—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—é.");
        return;
    }

    const rows = document.querySelectorAll("#editBody tr"); // –í—Å—ñ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏
    const newData = []; // –ú–∞—Å–∏–≤ –¥–ª—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—ñ

    rows.forEach(row => {
        const cells = row.querySelectorAll("td"); // –ö–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        const values = []; // –ú–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É
        const rowData = {}; // –û–±'—î–∫—Ç –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ currentEditTable
        let allEmpty = true; // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞

        currentEditTable.schema.forEach((col, index) => {
            const cell = cells[index];
            let val = "";

            // 1. –Ø–∫—â–æ —î <select> ‚Äî –±–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –Ω—å–æ–≥–æ
            const select = cell.querySelector("select");
            if (select) {
                val = select.value;
            }
            // 2. –Ø–∫—â–æ —î <input type="date"> ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            else {
                const input = cell.querySelector("input[type='date']");
                if (input) {
                    val = input.value;
                } else {
                    // 3. –Ü–Ω–∞–∫—à–µ –±–µ—Ä–µ–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
                    val = cell.innerText.trim();
                }
            }

            if (val !== "") allEmpty = false; // –Ø–∫—â–æ —Ö–æ—á –æ–¥–Ω–µ –ø–æ–ª–µ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä—è–¥–æ–∫

            const escaped = val.replace(/'/g, "''"); // –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –ª–∞–ø–æ–∫ —É SQL
            values.push(`'${escaped}'`); // –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –º–∞—Å–∏–≤—É
            rowData[col.title] = val; // –î–æ–¥–∞—î–º–æ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –æ–±'—î–∫—Ç
        });

        if (allEmpty) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

        newData.push(rowData); // –î–æ–¥–∞—î–º–æ –æ–±'—î–∫—Ç –¥–æ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö

        const columns = currentEditTable.schema.map(col => `"${col.title}"`); // –ú–∞—Å–∏–≤ –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—Ü—ñ–≤
        const sql = `INSERT OR REPLACE INTO "${currentEditTable.name}" (${columns.join(", ")}) VALUES (${values.join(", ")});`; // SQL-–∑–∞–ø–∏—Ç
        db.run(sql); // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    });

    saveDatabase(); // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
    currentEditTable.data = newData; // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö —É –∑–º—ñ–Ω–Ω—ñ–π
    Message("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ."); // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    closeEditModal(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
}

/*
–§—É–Ω–∫—Ü—ñ—è closeEditModal()
-------------------------
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–∞–∫—Ä–∏–≤–∞—î –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —Å–∫–∏–¥–∞—é—á–∏ –≤–∏–±—Ä–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –í—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–Ω–∏–∫–∞—î, –∑–º—ñ–Ω–Ω—ñ –æ—á–∏—â—É—é—Ç—å—Å—è.
*/
function closeEditModal() {
    document.getElementById("editModal").style.display = "none"; // –•–æ–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ
    currentEditTable = null; // –°–∫–∏–¥–∞—î–º–æ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é
    selectedCell = null; // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
}

/* 
–§—É–Ω–∫—Ü—ñ—è createDbFile()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø–æ–ª–µ–º –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –±–∞–∑–∏.
*/
function createDbFile() {
    newDbFile = true;
    document.getElementById("dbName").value = "my_database"; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    document.getElementById("dbModal").style.display = "flex"; // –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
}

/* 
–§—É–Ω–∫—Ü—ñ—è closeDbModal()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ö–æ–≤—É—î –≤—ñ–∫–Ω–æ –∑ –≤–∏–±–æ—Ä–æ–º –Ω–∞–∑–≤–∏ –ë–î.
*/
function closeDbModal() {
    document.getElementById("dbModal").style.display = "none";
}
/*
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
 */
function saveNewDb() {
    console.log("Save new file")
    newDbFile = true; 
    const name = document.getElementById("dbName").value.trim() || "my_database"; // –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ë–î –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    console.log("Save new file=",name + ".db-data")
    // –Ø–∫—â–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª —ñ —Ç–∞–∫–∏–π –≤–∂–µ —ñ—Å–Ω—É—î
    if (localStorage.getItem(name + ".tables-data")) {
        console.log("Overwrite!!!")
        const msg = document.getElementById("overwtiteConfirmText");
        msg.innerHTML = `<p>–§–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é <b>${name}</b> –≤–∂–µ —ñ—Å–Ω—É—î.</p><p>–©–æ —Ä–æ–±–∏—Ç–∏?</p>`;
        showOverwriteConfirm(name);
    } else newDbFile = false; 
    saveDb()
} 
/*
 * –í—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */ 
function showOverwriteConfirm(name) {
     document.getElementById("overwriteModal").style.display = "flex"; // –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É
}
function doOverwriteDb() {
    newDbFile = false;
}

function doNewNameDb() {
    document.getElementById("overwriteModal").style.display = "none"; // —Ö–æ–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É     
    newDbFile = true; 
}

function doCloseOverwriteConfirm() {
    document.getElementById("overwriteModal").style.display = "none"; // —Ö–æ–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É     
    newDbFile = false;
    closeDbModal()
}



/* 
–§—É–Ω–∫—Ü—ñ—è saveDb()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É –ø–∞–º º—è—Ç—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SQLite –±–∞–∑–∏, –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É localStorage.
*/
function saveDb() {
    const name = document.getElementById("dbName").value.trim() || "my_database"; // –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ë–î –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    // –Ø–∫—â–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é —â–æ —ñ—Å–Ω—É—î
    if (newDbFile) return;    
    
    database.fileName = name; // –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —É —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ database
    database.tables = []; // –æ—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å
    queries.definitions = []; // –æ—á–∏—â–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω—å –∑–∞–ø–∏—Ç—ñ–≤
    queries.results = []; // –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
    const dataMenu = document.getElementById("data-menu"); // –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—å
    dataMenu.innerHTML = ""; // –æ—á–∏—â–µ–Ω–Ω—è –º–µ–Ω—é
    db = new SQL.Database(); // —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—Ä–æ–∂–Ω—å–æ—ó SQLite –±–∞–∑–∏
    saveDatabase(); // –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–∑–∏ —É localStorage
    newDbFile = false;
    console.log("–§–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ:", database);
    Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–æ."); // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    closeDbModal(); // –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    updateMainTitle(); // –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
}

/* 
–§—É–Ω–∫—Ü—ñ—è saveDbAndCreateTable()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –°—Ç–≤–æ—Ä—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–∫—Ä–∏–≤–∞—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ.
*/
function saveDbAndCreateTable() {
    saveDb(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑—É
    closeDbModal(); // –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    createTable(); // –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
}

// –û–± º—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–≤–æ—Ä—é–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é
let table = {
    name: "–ù–µ–Ω–∞–∑–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è", // –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    schema: [] // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
};

// –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –±–∞–∑–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ —É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ
let tableList = [];

/* 
–§—É–Ω–∫—Ü—ñ—è createTable()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ó—ó —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ –ø–æ–ª—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ.
*/
function createTable() {
    table.schema = []; // –æ—á–∏—â–µ–Ω–Ω—è —Å—Ö–µ–º–∏
    document.getElementById("schemaBody").innerHTML = ""; // –æ—á–∏—â–µ–Ω–Ω—è HTML
    document.getElementById("tableName").value = "–ù–µ–Ω–∞–∑–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è"; // –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
    tableList = database.tables.map(t => t.name); // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å (–¥–ª—è –∑–≤ º—è–∑–∫—ñ–≤)
    addSchemaRow(); // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
    document.getElementById("makeTable").innerText = `–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ`; // –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById("modal").style.display = "flex"; // –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
}

/* 
–§—É–Ω–∫—Ü—ñ—è closeModal()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ö–æ–≤—É—î –≤—ñ–∫–Ω–æ.
*/
function closeModal() {
    document.getElementById("modal").style.display = "none";
}

/* 
–§—É–Ω–∫—Ü—ñ—è deleteSchemaRow(button)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í–∏–¥–∞–ª—è—î –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: button ‚Äî –∫–Ω–æ–ø–∫–∞ "‚ùå", –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∑ DOM.
*/
function deleteSchemaRow(button) {
    const row = button.closest("tr"); // –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä—è–¥–∫–∞
    if (row) row.remove(); // –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ DOM
}

/* 
–§—É–Ω–∫—Ü—ñ—è addSchemaRow()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ, —â–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –í—Å—Ç–∞–≤–∫–∞ HTML-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ —Ç—ñ–ª–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑—ñ –≤—Å—ñ–º–∞ –ø–æ–ª—è–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è.
*/
function addSchemaRow() {
    const tbody = document.getElementById("schemaBody");
    const row = document.createElement("tr");

    const tableOptions = tableList.map(t => `<option value="${t}">${t}</option>`).join("");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —Ö–æ—á –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å "–ó–æ–≤–Ω. –∫–ª—é—á" –∞–∫—Ç–∏–≤–Ω–∏–π?
    const anyChecked = Array.from(document.querySelectorAll('#schemaBody tr input[type="checkbox"]'))
        .some(cb => cb.closest('td')?.cellIndex === 3 && cb.checked);
    console.log("anyChecked=",anyChecked)
    row.innerHTML = `
        <td style="text-align:center;">
          <input type="checkbox" onchange="handlePrimaryKey(this)">
        </td>
        <td contenteditable="true"></td>
        <td>
          <select>
            <option>–¢–µ–∫—Å—Ç</option>
            <option>–¶—ñ–ª–µ —á–∏—Å–ª–æ</option>
            <option>–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ</option>
            <option>–¢–∞–∫/–ù—ñ</option>
            <option>–î–∞—Ç–∞</option>
          </select>
        </td>
        <td style="text-align:center;">
          <input type="checkbox" onchange="handleForeignKey(this)">
        </td>
        ${anyChecked ? `
        <td>
          <select onchange="updateFieldOptions(this)">
            <option value="">(—Ç–∞–±–ª–∏—Ü—è)</option>
            ${tableOptions}
          </select>
        </td>
        <td>
          <select>
            <option value="">(–ø–æ–ª–µ)</option>
          </select>
        </td>` : ''}
        <td contenteditable="true"></td>
        <td style="text-align:center;">
          <button onclick="deleteSchemaRow(this)">‚ùå</button>
        </td>
    `;

    tbody.appendChild(row);
}


    
 /*
–§—É–Ω–∫—Ü—ñ—è getFieldsForTable(tableName)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 - tableName (string): –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–∞—Å–∏–≤ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.
*/
function getFieldsForTable(tableName) {
    const table = database.tables.find(t => t.name === tableName);
    if (!table) return [];
    return table.schema.map(field => field.title);
}

/*
–§—É–Ω–∫—Ü—ñ—è handlePrimaryKey(checkbox)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–Ω—è—Ç—Ç—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ñ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 - checkbox (HTMLInputElement): –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –û–Ω–æ–≤–ª—é—î —Ç–∏–ø –ø–æ–ª—è —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –Ω—å–æ–≥–æ.
*/
function handlePrimaryKey(checkbox) {
    const row = checkbox.closest("tr");

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—è–¥–∫–∞:
    // 0 - —á–µ–∫–±–æ–∫—Å PK
    // 1 - –Ω–∞–∑–≤–∞ –ø–æ–ª—è
    // 2 - —Ç–∏–ø
    // 3 - —á–µ–∫–±–æ–∫—Å FK
    // 4 - —Ç–∞–±–ª–∏—Ü—è FK
    // 5 - –ø–æ–ª–µ FK
    // 6 - –∫–æ–º–µ–Ω—Ç–∞—Ä
    // 7 - –≤–∏–¥–∞–ª–µ–Ω–Ω—è

    const commentCell = row.cells[6]; 
    const typeSelect = row.cells[2].querySelector("select");

    if (checkbox.checked) {
        if (!commentCell.innerText.includes("–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á")) {
            commentCell.innerText = "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á";
        }
        if (typeSelect) {
            typeSelect.value = "–¶—ñ–ª–µ —á–∏—Å–ª–æ";
        }
    } else {
        if (commentCell.innerText === "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á") {
            commentCell.innerText = "";
        }
    }
}

/*
–§—É–Ω–∫—Ü—ñ—è handleForeignKey(checkbox)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–Ω—è—Ç—Ç—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—è.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 - checkbox (HTMLInputElement): –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ/–ø–æ–ª—è –¥–ª—è FK.
*/
function handleForeignKey(checkbox) {
    const tbody = document.getElementById("schemaBody");
    const rows = tbody.querySelectorAll("tr");

    const anyChecked = Array.from(rows).some(row => {
        const cb = row.cells[3]?.querySelector('input[type="checkbox"]');
        return cb?.checked;
    });

    rows.forEach(row => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º—ñ—Ä–æ–∫ —É —Ä—è–¥–∫—É
        const hasForeignKeyColumns = row.cells.length > 6;

        if (anyChecked && !hasForeignKeyColumns) {
            // –î–æ–¥–∞—î–º–æ 2 –∫–æ–º—ñ—Ä–∫–∏: –¢–∞–±–ª–∏—Ü—è –ó–ö —ñ –ü–æ–ª–µ –ó–ö
            const tableSelect = document.createElement("td");
            const fieldSelect = document.createElement("td");

            const tableOptions = tableList.map(t => `<option value="${t}">${t}</option>`).join("");

            tableSelect.innerHTML = `<select onchange="updateFieldOptions(this)">
                <option value="">(—Ç–∞–±–ª–∏—Ü—è)</option>
                ${tableOptions}
            </select>`;
            fieldSelect.innerHTML = `<select><option value="">(–ø–æ–ª–µ)</option></select>`;

            // –í—Å—Ç–∞–≤–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º —ñ –∫–Ω–æ–ø–∫–æ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            row.insertBefore(tableSelect, row.cells[6]);
            row.insertBefore(fieldSelect, row.cells[7]);
        }

        if (!anyChecked && hasForeignKeyColumns) {
            // –í–∏–¥–∞–ª—è—î–º–æ 2 –∑–∞–π–≤—ñ –∫–æ–º—ñ—Ä–∫–∏
            row.deleteCell(5); // –ø–æ–ª–µ –ó–ö
            row.deleteCell(4); // —Ç–∞–±–ª–∏—Ü—è –ó–ö
        }
    });
}


/*
–§—É–Ω–∫—Ü—ñ—è updateFieldOptions(tableSelect)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–ª—ñ–≤ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ —É –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É –∫–ª—é—á—ñ.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 - tableSelect (HTMLSelectElement): —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–ª—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ.
*/
function updateFieldOptions(tableSelect) {
    const row = tableSelect.closest("tr");
    const fieldSelect = row.cells[5].querySelector("select");
    const selectedTable = tableSelect.value;

    fieldSelect.innerHTML = `<option value="">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</option>`;

    const fields = getFieldsForTable(selectedTable);
    fieldSelect.innerHTML = fields.map(f => `<option value="${f}">${f}</option>`).join("");
}

/*
–§—É–Ω–∫—Ü—ñ—è saveSchema()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ, —Å—Ç–≤–æ—Ä—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—é –≤ SQLite, –≤—Å—Ç–∞–≤–ª—è—î –¥–∞–Ω—ñ, –æ–Ω–æ–≤–ª—é—î UI —Ç–∞ –±–∞–∑—É.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ –Ω–æ–≤–æ—é —Å—Ö–µ–º–æ—é –≤ –ë–î.
*/
function saveSchema() {
    let tableName = document.getElementById("tableName").value.trim() || "–ù–µ–Ω–∞–∑–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è";
    const rows = document.querySelectorAll("#schemaBody tr");

    const schema = [];
    const fieldNames = new Set();
    let hasDuplicate = false;
    let hasPrimaryKey = false;

    for (let row of rows) {
        const isPrimaryKey = row.cells[0].querySelector("input").checked;
        let title = row.cells[1].innerText.trim();
        const type = row.cells[2].querySelector("select").value;
        const comment = row.cells[3].innerText.trim();

        if (!title) continue;

        const lowerTitle = title.toLowerCase();
        if (fieldNames.has(lowerTitle)) {
            hasDuplicate = true;
            break;
        }

        fieldNames.add(lowerTitle);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å checkbox –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞ (—É –∫–ª—ñ—Ç–∏–Ω—Ü—ñ 3)
        let isForeignKey = false;
        const foreignKeyCell = row.cells[3];
        if (foreignKeyCell) {
            const fkCheckbox = foreignKeyCell.querySelector("input[type=checkbox]");
            if (fkCheckbox) {
                isForeignKey = fkCheckbox.checked;
            }
        }

        // –ë–µ–∑–ø–µ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∫–ª—ñ—Ç–∏–Ω–æ–∫ 4 —ñ 5 —Ç–∞ —ó—Ö select-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        let refTable = null;
        let refField = null;

        if (isForeignKey) {
            const refTableCell = row.cells[4];
            const refFieldCell = row.cells[5];

            if (refTableCell) {
                const refTableSelect = refTableCell.querySelector("select");
                if (refTableSelect) {
                    refTable = refTableSelect.value || null;
                }
            }

            if (refFieldCell) {
                const refFieldSelect = refFieldCell.querySelector("select");
                if (refFieldSelect) {
                    refField = refFieldSelect.value || null;
                }
            }
        }

        if (isPrimaryKey) hasPrimaryKey = true;

        schema.push({
            primaryKey: isPrimaryKey,
            title: title,
            type: type,
            comment: comment,
            foreignKey: isForeignKey,
            refTable: isForeignKey ? refTable : null,
            refField: isForeignKey ? refField : null
        });
    }

    if (hasDuplicate) {
        Message("–ù–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –º–∞—é—Ç—å –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏.");
        return;
    }

    if (schema.length === 0) {
        Message("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.");
        return;
    }

    if (!hasPrimaryKey) {
        Message("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞. –¢–∞–±–ª–∏—Ü—è –Ω–µ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.");
        return;
    }

    // –î–∞–ª—ñ –±–µ–∑ –∑–º—ñ–Ω...
    console.log("Schema=", schema);

    const table = {
        name: tableName,
        schema: schema,
        data: []
    };

    // –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
    let oldData = [];
    let oldSchema = [];
    const existingIndex = database.tables.findIndex(t => t.name === tableName);
    if (existingIndex !== -1) {
        try {
            const stmt = db.prepare(`SELECT * FROM "${tableName}"`);
            while (stmt.step()) {
                oldData.push(stmt.getAsObject());
            }
            stmt.free();
        } catch (e) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:", e);
        }
        oldSchema = database.tables[existingIndex].schema || [];
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    try {
        db.run(`DROP TABLE IF EXISTS "${tableName}"`);
    } catch (e) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é:", e);
    }

    // –ü–æ–±—É–¥–æ–≤–∞ SQL –¥–ª—è –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    db.run("PRAGMA foreign_keys = ON;");

    let fieldsSQL = schema.map(field => {
        let type = field.type.toUpperCase();
        if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
        else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
        else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
        else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
        else if (type === "–î–ê–¢–ê") type = "TEXT";

        let fieldDef = `"${field.title}" ${type}`;
        if (field.primaryKey) fieldDef += " PRIMARY KEY";
        return fieldDef;
    });

    const foreignKeys = schema
      .filter(f => f.foreignKey && f.refTable && f.refField)
      .map(f => `FOREIGN KEY ("${f.title}") REFERENCES "${f.refTable}"("${f.refField}")`);

    const fullFieldsSQL = [...fieldsSQL, ...foreignKeys].join(", ");
    const createSQL = `CREATE TABLE "${tableName}" (${fullFieldsSQL});`;
    try {
        db.run(createSQL);
    } catch (e) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é:", e, createSQL);
    }

    // –í—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞–∑–∞–¥ (–∑–∞ —Å–ø—ñ–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –ø–æ–ª—ñ–≤)
    let newFieldNames = schema.map(f => f.title);
    oldData.forEach(record => {
        let insertFields = [];
        let insertValues = [];
        for (let key of newFieldNames) {
            if (key in record) {
                insertFields.push(`"${key}"`);
                insertValues.push(JSON.stringify(record[key]));
            }
        }
        if (insertFields.length > 0) {
            let insertSQL = `INSERT INTO "${tableName}" (${insertFields.join(", ")}) VALUES (${insertValues.join(", ")});`;
            try {
                db.run(insertSQL);
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Å:", e, insertSQL);
            }
        }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–æ —Å–ø–∏—Å–∫—É
    if (existingIndex !== -1) {
        database.tables[existingIndex] = table;
    } else {
        database.tables.push(table);
    }

    addTableToMenu(tableName);
    saveDatabase();
    Message("–°—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
    closeModal();
    console.log("Table.schema=", table.schema);
}


/*
–§—É–Ω–∫—Ü—ñ—è addTableToMenu(tableName)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –î–æ–¥–∞—î –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –¥–æ —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å —É –º–µ–Ω—é.
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 - tableName (string): –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.
–†–µ–∑—É–ª—å—Ç–∞—Ç: –ï–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ DOM.
*/
function addTableToMenu(tableName) {
    const dataMenu = document.getElementById("data-menu");

    // –Ø–∫—â–æ –≤–∂–µ —î ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å)
    const existingItem = Array.from(dataMenu.children).find(item => item.textContent === tableName);
    if (existingItem) {
        existingItem.remove();
    }

    const item = document.createElement("a");
    item.href = "#";
    item.textContent = tableName;
    item.onclick = () => editData(tableName);

    dataMenu.appendChild(item);
}

/* 
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   msg ‚Äî —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–∫–∞–∑—É—î –≤—ñ–∫–Ω–æ –∑ –∑–∞–¥–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
 */
function Message(msg) {
    const modal = document.getElementById("messageModal"); // –û—Ç—Ä–∏–º–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const content = document.getElementById("messageContent"); // –û—Ç—Ä–∏–º–∞—Ç–∏ –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç—É

    content.innerText = msg; // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    modal.style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ
}

/* 
 * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 
 */
function closeMessage() {
    document.getElementById("messageModal").style.display = "none"; // –°—Ö–æ–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ
}

/* 
 * –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
 */
function confirmDeleteDb() {
    if (!selectedDbFile) {
        Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."); // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return;
    }

    dbToDelete = selectedDbFile; // –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–º‚Äô—è –ë–î –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    document.getElementById("deleteConfirmText").innerHTML =
        `–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö <b>"${dbToDelete}"</b>?`; // –í–∏–≤–µ—Å—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

    document.getElementById("deleteModal").style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
}

/* 
 * –í–∏–¥–∞–ª—è—î –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–∑ localStorage
 * –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫
 */
function doDeleteDb() {
    if (dbToDelete) {
        // –í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ –±–∞–∑–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∏
        localStorage.removeItem(dbToDelete + ".db-data");
        localStorage.removeItem(dbToDelete + ".queries-data");

        Message(`–§–∞–π–ª "${dbToDelete}" –≤–∏–¥–∞–ª–µ–Ω–æ.`); // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        closeDeleteModal();     // –ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        closeStorageDialog();   // –ó–∞–∫—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
        showStorageDialog();    // –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
    }
}

function doDeleteDb() {
    if (dbToDelete) {
        // –Ø–∫—â–æ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö ‚Äî —Å–ø–æ—á–∞—Ç–∫—É —ó—ó –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
        if (dbToDelete === database.fileName) {
                    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –±–∞–∑—É, –æ–±–Ω—É–ª–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, UI —Ç–æ—â–æ           
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
                    saveDatabase();
            
                    // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
                    db = null;
                    database.fileName = "";
                    database.tables = [];
                    database.reports = [];
                    database.relations = [];
                    database.forms = [];
            
                    queries.definitions = [];
                    queries.results = [];
            
                    const dataMenu = document.getElementById("data-menu");
                    dataMenu.innerHTML = "";
            
                    updateMainTitle(); // –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ "–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö"                    
                    updateQuickAccessPanel([], [], [], []);            
        }

        // –í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ –±–∞–∑–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∏ –∑ localStorage
        localStorage.removeItem(dbToDelete + ".db-data");
        localStorage.removeItem(dbToDelete + ".queries-data");

        Message(`–§–∞–π–ª "${dbToDelete}" –≤–∏–¥–∞–ª–µ–Ω–æ.`); // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        closeDeleteModal();     // –ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        closeStorageDialog();   // –ó–∞–∫—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
        showStorageDialog();    // –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
    }
}

/* 
 * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è 
 */
function closeDeleteModal() {
    document.getElementById("deleteModal").style.display = "none"; // –°—Ö–æ–≤–∞—Ç–∏
    dbToDelete = null; // –û—á–∏—Å—Ç–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
}

/* 
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ SQL-–∑–∞–ø–∏—Ç—É 
 * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 */
function createQuery() {
    document.getElementById("queryName").value = "–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç"; // –ù–∞–∑–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    document.getElementById("queryBody").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ä—è–¥–∫–∏
    addQueryRow(); // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
    document.getElementById("queryModal").style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ
    populateTableDropdowns(); // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü—å
}

/* 
 * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 */
function closeQueryModal() {
    document.getElementById("queryModal").style.display = "none";
}

/* 
 * –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 * –†—è–¥–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –≤–∏–±—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ, –ø–æ–ª—è, –≤–∏–¥–∏–º—ñ—Å—Ç—å, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, —Ñ—ñ–ª—å—Ç—Ä
 */
function addQueryRow() {
    const tbody = document.getElementById("queryBody");
    const row = document.createElement("tr");

    row.innerHTML = `
        <td><select class="query-table-select" onchange="populateFieldDropdown(this)"></select></td>
        <td><select class="query-field-select"></select></td>
        <td><input type="checkbox" checked class="query-visible-checkbox"></td>
        <td>
            <select class="query-sort-select">
                <option value="">–ù–µ–≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–æ</option>
                <option value="ASC">–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º</option>
                <option value="DESC">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</option>
            </select>
        </td>
        <td>
            <div style="display: flex; gap: 4px; align-items: center;">
                <select class="query-operator-select" style="width: 60px;">
                    <option value="==">==</option>
                    <option value="<">&lt;</option>
                    <option value="<=">&lt;=</option>
                    <option value=">">&gt;</option>
                    <option value=">=">&gt;=</option>
                    <option value="!=">!=</option>
                    <option value="IN">IN</option>
                    <option value="NOT IN">NOT IN</option>
                </select>
                <input type="text" class="query-criteria-input" style="flex: 1;">
            </div>
        </td>
        <td>
            <select class="query-field-role" title="–¢–∏–ø —É—á–∞—Å—Ç—ñ —É –∑–∞–ø–∏—Ç—ñ">
                <option value="select">–ü–æ–ª–µ</option>
                <option value="group">–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è</option>
                <option value="count">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</option>
                <option value="sum">–°—É–º–∞</option>
                <option value="avg">–°–µ—Ä–µ–¥–Ω—î</option>
                <option value="min">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ</option>
                <option value="max">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ</option>
            </select>
        </td>
        <td><button onclick="deleteQueryRow(this)">‚ùå</button></td>
    `;

    tbody.appendChild(row);
    populateTableDropdownsForRow(row);
}


/* 
 * –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 * –ü–∞—Ä–∞–º–µ—Ç—Ä:
 *   button ‚Äî –∫–Ω–æ–ø–∫–∞ ‚ùå, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –ø–æ–¥—ñ—é
 */
function deleteQueryRow(button) {
    const row = button.closest("tr"); // –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
    row.remove(); // –í–∏–¥–∞–ª–∏—Ç–∏ —Ä—è–¥–æ–∫
}

/* 
 * –ó–∞–ø–æ–≤–Ω—é—î –≤—Å—ñ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü—å —É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ –∑–∞–ø–∏—Ç—É
 */
function populateTableDropdowns() {
    const tableSelects = document.querySelectorAll(".query-table-select"); // –í—Å—ñ —Å–µ–ª–µ–∫—Ç–∏ —Ç–∞–±–ª–∏—Ü—å
    tableSelects.forEach(select => {
        select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>"; // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é "*"
        const starOption = document.createElement("option");
        starOption.value = "*";
        starOption.textContent = "* (–í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ)";
        select.appendChild(starOption);
        database.tables.forEach(table => {
            const option = document.createElement("option");
            option.value = table.name;
            option.textContent = table.name;
            select.appendChild(option); // –î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ
        });
    });
}

/* 
 * –ó–∞–ø–æ–≤–Ω—é—î —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä—è–¥–∫—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 * –ü–∞—Ä–∞–º–µ—Ç—Ä:
 *   row ‚Äî —Ä—è–¥–æ–∫, —É —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
 */
function populateTableDropdownsForRow(row) {
    const select = row.querySelector(".query-table-select"); // –ó–Ω–∞–π—Ç–∏ select —É —Ä—è–¥–∫—É
    select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é "*"
    const starOption = document.createElement("option");
    starOption.value = "*";
    starOption.textContent = "* (–í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ)";
    select.appendChild(starOption);
    database.tables.forEach(table => {
        const option = document.createElement("option");
        option.value = table.name;
        option.textContent = table.name;
        select.appendChild(option);
    });
}

/* 
 * –ó–∞–ø–æ–≤–Ω—é—î —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
 * –ü–∞—Ä–∞–º–µ—Ç—Ä:
 *   tableSelect ‚Äî select-–µ–ª–µ–º–µ–Ω—Ç –∑ –≤–∏–±—Ä–∞–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é
 */
function populateFieldDropdown(tableSelect) {
    const row = tableSelect.closest("tr"); // –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
    const fieldSelect = row.querySelector(".query-field-select"); // Select –ø–æ–ª—ñ–≤
    fieldSelect.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏

    const selectedTableName = tableSelect.value; // –í–∏–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è

    if (selectedTableName === "*") {
        // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "*", —Ç–æ –ø–æ–ª–µ –≤–∏–±–æ—Ä—É –ø–æ–ª—è —Ä–æ–±–∏–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –∑ –ø—É—Å—Ç–æ—é –æ–ø—Ü—ñ—î—é
        const emptyOption = document.createElement("option");
        emptyOption.value = "";
        emptyOption.textContent = ""; // –∞–±–æ "–ù–µ–º–∞—î –ø–æ–ª—ñ–≤"
        fieldSelect.appendChild(emptyOption);
        fieldSelect.disabled = true; // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ - –∑–∞–±–ª–æ–∫—É—î–º–æ –≤–∏–±—ñ—Ä –ø–æ–ª—è
    } else {
        fieldSelect.disabled = false;
        const selectedTable = database.tables.find(t => t.name === selectedTableName); // –ó–Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
        if (selectedTable) {
            fieldSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ</option>"; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É –æ–ø—Ü—ñ—é
            selectedTable.schema.forEach(field => {
                const option = document.createElement("option");
                option.value = field.title;
                option.textContent = field.title;
                fieldSelect.appendChild(option); // –î–æ–¥–∞—Ç–∏ –∫–æ–∂–Ω–µ –ø–æ–ª–µ
            });
        }
    }
}


/* 
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–∏–ø –ø–æ–ª—è —É –≤–∫–∞–∑–∞–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   tableName ‚Äî –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   fieldName ‚Äî –Ω–∞–∑–≤–∞ –ø–æ–ª—è
 * –ü–æ–≤–µ—Ä—Ç–∞—î: —Ç–∏–ø –ø–æ–ª—è –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
 */
function getFieldType(tableName, fieldName) {
    console.log("getFieldType=", database); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    const table = database.tables.find(t => t.name === tableName); // –ó–Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
    if (!table) return ""; // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ ""
    const field = table.schema.find(f => f.title === fieldName); // –ó–Ω–∞–π—Ç–∏ –ø–æ–ª–µ
    console.log("getFieldType Field=", field); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    return field?.type || ""; // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–∏–ø –∞–±–æ "" —è–∫—â–æ –Ω–µ–º–∞
}

//**************************************************************************
    
function generateSqlQuery() {
    const queryName = document.getElementById("queryName").value.trim();
    const rows = document.querySelectorAll("#queryBody tr");

    let selectFields = [];
    let groupByFields = [];
    let baseTable = null;
    let joins = [];
    let whereClauses = [];
    let orderByClauses = [];
    const queryConfig = [];

    let hasSelect = false;
    let hasAggregate = false;
    let aggregateAliasCounter = 0; // –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö alias

    rows.forEach(row => {
        const tableSelect = row.querySelector(".query-table-select");
        const fieldSelect = row.querySelector(".query-field-select");
        const visibleCheckbox = row.querySelector(".query-visible-checkbox");
        const sortSelect = row.querySelector(".query-sort-select");
        const operatorSelect = row.querySelector(".query-operator-select");
        const criteriaInput = row.querySelector(".query-criteria-input");
        const roleSelect = row.querySelector(".query-field-role");

        const tableName = tableSelect.value;
        const fieldName = fieldSelect ? fieldSelect.value : "";
        const isVisible = visibleCheckbox.checked;
        const sortBy = sortSelect.value;
        const operator = operatorSelect.value.trim();
        let criteria = criteriaInput.value.trim();
        const fieldRole = roleSelect.value;

        // –Ø–∫—â–æ tableName = "*", —Ç–æ–¥—ñ –ø–æ–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º (–∞–≥—Ä–µ–≥–∞—Ç –±–µ–∑ –ø–æ–ª—è)
        if (tableName && (fieldName || tableName === "*")) {
            if (tableName !== "*" && !baseTable) baseTable = tableName;

            let selectExpr = "";
            let alias = "";
            let fieldExpr = "";

            if (tableName === "*") {
                // –ê–≥—Ä–µ–≥–∞—Ç–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
                switch (fieldRole) {
                    case "count":
                        alias = `count_${aggregateAliasCounter++}`;
                        selectExpr = `COUNT(*) AS ${alias}`;
                        hasAggregate = true;
                        break;
                    default:
                        // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –∞–≥—Ä–µ–≥–∞—Ç–∏ –±–µ–∑ –ø–æ–ª—è
                        selectExpr = "*";
                        hasSelect = true;
                        break;
                }
            } else {
                fieldExpr = `"${tableName}"."${fieldName}"`;
                switch (fieldRole) {
                    case "select":
                        selectExpr = fieldExpr;
                        hasSelect = true;
                        break;
                    case "group":
                        selectExpr = fieldExpr;
                        groupByFields.push(fieldExpr);
                        break;
                    case "count":
                        alias = `count_${aggregateAliasCounter++}`;
                        selectExpr = `COUNT(${fieldExpr}) AS ${alias}`;
                        hasAggregate = true;
                        break;
                    case "sum":
                        alias = `sum_${aggregateAliasCounter++}`;
                        selectExpr = `SUM(${fieldExpr}) AS ${alias}`;
                        hasAggregate = true;
                        break;
                    case "avg":
                        alias = `avg_${aggregateAliasCounter++}`;
                        selectExpr = `AVG(${fieldExpr}) AS ${alias}`;
                        hasAggregate = true;
                        break;
                    case "min":
                        alias = `min_${aggregateAliasCounter++}`;
                        selectExpr = `MIN(${fieldExpr}) AS ${alias}`;
                        hasAggregate = true;
                        break;
                    case "max":
                        alias = `max_${aggregateAliasCounter++}`;
                        selectExpr = `MAX(${fieldExpr}) AS ${alias}`;
                        hasAggregate = true;
                        break;
                    default:
                        selectExpr = fieldExpr;
                        hasSelect = true;
                        break;
                }
            }

            if (isVisible && selectExpr) {
                selectFields.push(selectExpr);
            }

            // WHERE —É–º–æ–≤–∞ –º–æ–∂–Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ª–∏—à–µ —è–∫—â–æ —î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–ª–µ (–Ω–µ "*")
            if (tableName !== "*" && criteria.length > 0 && operator.length > 0) {
                const fieldType = getFieldType(tableName, fieldName);
                let processedCriteria = criteria;

                if (fieldType === "–¢–∞–∫/–ù—ñ") {
                    let value = processedCriteria.toLowerCase();
                    if (["—Ç–∞–∫", "true", "1"].includes(value)) value = "1";
                    else if (["–Ω—ñ", "false", "0"].includes(value)) value = "0";
                    processedCriteria = `${operator} ${value}`;
                } else if (fieldType === "–î–∞—Ç–∞") {
                    const match = processedCriteria.match(/^([0-9]{2})[.\-\/]([0-9]{2})[.\-\/]([0-9]{4})$/);
                    if (match) {
                        const [ , dd, mm, yyyy ] = match;
                        const isoDate = `${yyyy}-${mm}-${dd}`;
                        processedCriteria = `${operator} '${isoDate}'`;
                    } else {
                        processedCriteria = `${operator} '${processedCriteria}'`;
                    }
                } else {
                    processedCriteria = isNaN(processedCriteria)
                        ? `${operator} '${processedCriteria}'`
                        : `${operator} ${processedCriteria}`;
                }

                whereClauses.push(`${fieldExpr} ${processedCriteria}`);
            }

            if (sortBy) {
                if (alias) {
                    orderByClauses.push(`${alias} ${sortBy}`);
                } else if (tableName !== "*") {
                    orderByClauses.push(`${fieldExpr} ${sortBy}`);
                } else {
                    // –Ø–∫—â–æ tableName = "*", –∞–ª–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —î ‚Äî —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ alias —è–∫—â–æ —î, –∞–±–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                }
            }

            queryConfig.push({
                tableName,
                fieldName,
                isVisible,
                sortBy,
                operator,
                criteria,
                fieldRole,
                alias
            });
        }
    });

    // JOIN-–∑–≤‚Äô—è–∑–∫–∏
    const joinRows = document.querySelectorAll("#joinBody tbody tr");
    joinRows.forEach(row => {
        const tableA = row.querySelector(".join-table-a").value;
        const fieldA = row.querySelector(".join-field-a").value;
        const tableB = row.querySelector(".join-table-b").value;
        const fieldB = row.querySelector(".join-field-b").value;
        if (tableA && fieldA && tableB && fieldB) {
            joins.push({
                table: tableA,
                condition: `"${tableA}"."${fieldA}" = "${tableB}"."${fieldB}"`
            });
            if (!baseTable) baseTable = tableA;
        }
    });

    if (selectFields.length === 0) {
        Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –≤–∏–¥–∏–º–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–∏—Ç—É.");
        return;
    }

    // –Ø–∫—â–æ baseTable –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –∑ —Ä–µ–∞–ª—å–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é
    if (!baseTable) {
        // –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±–∞–∑–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ JOIN-—ñ–≤, —è–∫—â–æ —î
        if (joins.length > 0) {
            baseTable = joins[0].table;
        } else {
            Message("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –±–∞–∑–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è FROM.");
            return;
        }
    }

    // –ü–æ–±—É–¥–æ–≤–∞ SQL-–∑–∞–ø–∏—Ç—É
    let sql = `SELECT ${selectFields.join(", ")}`;
    sql += `\nFROM "${baseTable}"`;

    joins.forEach(join => {
        sql += `\nJOIN "${join.table}" ON ${join.condition}`;
    });

    if (whereClauses.length > 0) {
        sql += `\nWHERE ${whereClauses.join(" AND ")}`;
    }

    if (groupByFields.length > 0) {
        sql += `\nGROUP BY ${groupByFields.join(", ")}`;
    } else if (hasSelect && hasAggregate) {
        // –Ø–∫—â–æ —î –∞–≥—Ä–µ–≥–∞—Ç–∏ —ñ –≤–∏–±—ñ—Ä–∫–æ–≤—ñ –ø–æ–ª—è –±–µ–∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è ‚Äî –¥–æ–¥–∞—Ç–∏ –≤—Å—ñ select –ø–æ–ª—è (–æ–∫—Ä—ñ–º –∞–≥—Ä–µ–≥–∞—Ç—ñ–≤) —É GROUP BY
        const groupByFromSelects = selectFields
            .filter(f => !f.match(/^(COUNT|SUM|AVG|MIN|MAX)\(/i)) // –≤–∏–∫–ª—é—á–∏—Ç–∏ –∞–≥—Ä–µ–≥–∞—Ç–∏
            .map(f => {
                // –ü—Ä–∏–±—Ä–∞—Ç–∏ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–∏, —è–∫—â–æ —î
                const aliasMatch = f.match(/ AS (.+)$/i);
                if (aliasMatch) {
                    return aliasMatch[1];
                }
                return f;
            });
        if (groupByFromSelects.length > 0) {
            sql += `\nGROUP BY ${groupByFromSelects.join(", ")}`;
        }
    }

    if (orderByClauses.length > 0) {
        sql += `\nORDER BY ${orderByClauses.join(", ")}`;
    }

    const queryDefinition = {
        name: queryName,
        config: queryConfig,
        joins: joins,
        sql: sql
    };

    const existingQueryIndex = queries.definitions.findIndex(q => q.name === queryName);
    if (existingQueryIndex !== -1) {
        queries.definitions[existingQueryIndex] = queryDefinition;
    } else {
        queries.definitions.push(queryDefinition);
    }
    saveDatabase();

    document.getElementById("generatedSql").innerText = sql;
    document.getElementById("sqlModal").style.display = "flex";
}




    


    function closeSqlModal() {
        document.getElementById("sqlModal").style.display = "none";
    }

    let pendingQueryText = "";
    let pendingPlaceholders = [];
    let pendingQueryName = "";
    let currentPlaceholderIndex = 0;
    
    function showNextParameterPrompt() {
        if (currentPlaceholderIndex >= pendingPlaceholders.length) {
            executeFinalSqlQuery();
            return;
        }
    
        const placeholder = pendingPlaceholders[currentPlaceholderIndex];
        document.getElementById("parameterPrompt").innerText = placeholder;
        document.getElementById("parameterInput").value = "";
        document.getElementById("parameterModal").style.display = "flex";
    }
    
    function confirmParameter() {
        const value = document.getElementById("parameterInput").value;
        const placeholder = pendingPlaceholders[currentPlaceholderIndex];
        const safeValue = `'${value.replace(/'/g, "''")}'`;
    
        pendingQueryText = pendingQueryText.replace(`[${placeholder}]`, safeValue);
        currentPlaceholderIndex++;
        document.getElementById("parameterModal").style.display = "none";
        showNextParameterPrompt();
    }
    
    function cancelParameter() {
        document.getElementById("parameterModal").style.display = "none";
        Message("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
    }
    

    function validateSqlQuery(sql) {
        try {
            const errors = [];
    
            // 1. –ü—Ä–∏–±—Ä–∞—Ç–∏ —Ä–æ–∑—Ä–∏–≤–∏ —Ä—è–¥–∫—ñ–≤ (—É –ª–∞–ø–∫–æ–≤–∞–Ω–∏—Ö –Ω–∞–∑–≤–∞—Ö —Ü–µ –º–æ–∂–µ –∑–ª–∞–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑)
            sql = sql.replace(/\s+/g, ' ').trim();
    
            // 2. –ü–æ–±—É–¥–æ–≤–∞ map —Ç–∞–±–ª–∏—Ü—å -> –ø–æ–ª—ñ–≤
            const tableMap = new Map();
            database.tables.forEach(table => {
                const fieldTitles = table.schema.map(col => col.title);
                tableMap.set(table.name, fieldTitles);
            });
    
            // 3. –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –∑ FROM
            const fromMatch = sql.match(/FROM\s+["'`](.*?)["'`]/i);
            if (!fromMatch) {
                Message("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–∞–±–ª–∏—Ü—é –≤ –∑–∞–ø–∏—Ç—ñ.");
                return false;
            }
            
            const tableName = fromMatch[1].trim();
            if (!tableMap.has(tableName)) {
                Message(`–¢–∞–±–ª–∏—Ü—è "${tableName}" –Ω–µ —ñ—Å–Ω—É—î.`);
                return false;
            }
    
            const currentFields = tableMap.get(tableName);
    
            // 4. –í–∏—Ç—è–≥–Ω—É—Ç–∏ –≤—Å—ñ –ª–∞–ø–∫–æ–≤–∞–Ω—ñ –ø–æ–ª—è, –∫—Ä—ñ–º –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑ FROM
            const allMatches = [...sql.matchAll(/"([^"]+)"/g)].map(m => m[1]);
    
            // –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ, –±–æ –≤–æ–Ω–∞ —Ç–µ–∂ –ª–∞–ø–∫–æ–≤–∞–Ω–∞, –∞–ª–µ –Ω–µ —î –ø–æ–ª–µ–º
            const fieldNames = allMatches.filter(name => name !== tableName);
    
            // 5. –£–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ (–º–æ–∂–µ –±—É—Ç–∏ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ –ø–æ–ª–µ –≤ SELECT —Ç–∞ WHERE)
            const uniqueFieldNames = [...new Set(fieldNames)];
    
            for (const field of uniqueFieldNames) {
                if (!currentFields.includes(field)) {
                    errors.push(`–ü–æ–ª–µ "${field}" –Ω–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ "${tableName}".`);
                }
            }
    
            if (errors.length > 0) {
                Message("–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∏—Ç—ñ:\n" + errors.join("\n"));
                return false;
            }
    
            return true;
        } catch (err) {
            Message("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç: " + err.message);
            return false;
        }
    }
    
    
    

    function executeSqlQuery() {
        const sqlQuery = document.getElementById("generatedSql").innerText;
        const queryName = document.getElementById("queryName").value.trim();
        pendingQueryName = queryName;
    
        const matches = [...sqlQuery.matchAll(/\[([^\]]+)\]/g)];
        const uniquePlaceholders = [...new Set(matches.map(m => m[1]))];
    
        if (uniquePlaceholders.length > 0) {
            pendingQueryText = sqlQuery;
            pendingPlaceholders = uniquePlaceholders;
            currentPlaceholderIndex = 0;
            showNextParameterPrompt();
        } else {
            pendingQueryText = sqlQuery;
            executeFinalSqlQuery();
        }
    }

function executeFinalSqlQuery() {
    const internalQueryName = `–∑–∞–ø–∏—Ç "${pendingQueryName}"`;
    const menuDisplayName = `*${internalQueryName}`;

    try {
        if (!validateSqlQuery(pendingQueryText)) return;
        const res = db.exec(pendingQueryText); 
        
        if (res.length > 0) {
            const columns = res[0].columns;
            const dataRows = res[0].values;

            const schema = columns.map(col => ({
                title: col,
                type: "–¢–µ–∫—Å—Ç",
                primaryKey: false,
                comment: ""
            }));

            const queryResultTable = {
                name: internalQueryName,
                schema: schema,
                data: dataRows
            };

            const existingIndex = queries.results.findIndex(t => t.name === internalQueryName);
            if (existingIndex !== -1) {
                queries.results[existingIndex] = queryResultTable;
                const dataMenu = document.getElementById("data-menu");
                const existingItem = Array.from(dataMenu.children).find(item => item.textContent === menuDisplayName);
                if (existingItem) existingItem.remove();
            } else {
                queries.results.push(queryResultTable);
            }

            addTableToMenu(menuDisplayName);
            Message(`–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.\n–ó–Ω–∞–π–¥–µ–Ω–æ ${dataRows.length} –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`);
            closeSqlModal();
            closeQueryModal();
            editData(menuDisplayName);
        } else {
            Message("–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ, –∞–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            closeSqlModal();
        }
    } catch (e) {
        Message(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: ${e.message}`);
    }
}

    

    // Functions for managing saved queries
    function showSavedQueriesDialog() {
        const listEl = document.getElementById("savedQueriesList");
        listEl.innerHTML = "";
        selectedQueryName = null;

        queries.definitions.forEach(query => {
            const li = document.createElement("li");
            li.textContent = query.name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.queryName = query.name; // Store the query name in a data attribute

            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedQueryName = li.dataset.queryName;
            });
            listEl.appendChild(li);
        });
        document.getElementById("savedQueriesModal").style.display = "flex";
    }

    function closeSavedQueriesDialog() {
        document.getElementById("savedQueriesModal").style.display = "none";
        selectedQueryName = null;
    }

    
    function editSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
            return;
        }
    
        const queryToEdit = queries.definitions.find(q => q.name === selectedQueryName);
        console.log("Edit query=",selectedQueryName, queryToEdit )
        if (queryToEdit) {
            if (queryToEdit.config === null && queryToEdit.joins === null) {
                // –í–ª–∞—Å–Ω–∏–π SQL-–∑–∞–ø–∏—Ç
                editOwnQuery(queryToEdit);
            } else {
                populateQueryModal(queryToEdit);
                // –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Ç
            }
            closeSavedQueriesDialog();
        } else {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
    
    
    function executeSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.");
            return;
        }
    
        const queryDef = queries.definitions.find(q => q.name === selectedQueryName);
        if (!queryDef) {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
    
        document.getElementById("queryName").value = queryDef.name;
        document.getElementById("generatedSql").innerText = queryDef.sql;
        closeSavedQueriesDialog();
        executeSqlQuery();
    }

function populateQueryModal(queryDefinition) {
    document.getElementById("queryName").value = queryDefinition.name;
    const queryBody = document.getElementById("queryBody");
    queryBody.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ä—è–¥–∫–∏ –ø–æ–ª—ñ–≤
    document.getElementById("joinBody").querySelector("tbody").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ –∑–≤‚Äô—è–∑–∫–∏

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –ø–æ–ª—ñ–≤
    queryDefinition.config.forEach(item => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td><select class="query-table-select" onchange="populateFieldDropdown(this)"></select></td>
            <td><select class="query-field-select"></select></td>
            <td><input type="checkbox" class="query-visible-checkbox"></td>
            <td>
                <select class="query-sort-select">
                    <option value="">–ù–µ–≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–æ</option>
                    <option value="ASC">–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º</option>
                    <option value="DESC">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</option>
                </select>
            </td>
            <td>
                <div style="display: flex; gap: 4px;">
                    <select class="query-operator-select">
                        <option value="==">==</option>
                        <option value="<"><</option>
                        <option value="<="><=</option>
                        <option value=">">></option>
                        <option value=">=">>=</option>
                        <option value="!=">!=</option>
                        <option value="IN">IN</option>
                        <option value="NOT IN">NOT IN</option>
                    </select>
                    <input type="text" class="query-criteria-input">
                </div>
            </td>
            <td>
                <select class="query-field-role" title="–¢–∏–ø —É—á–∞—Å—Ç—ñ —É –∑–∞–ø–∏—Ç—ñ">
                    <option value="select">–ü–æ–ª–µ</option>
                    <option value="group">–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è</option>
                    <option value="count">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</option>
                    <option value="sum">–°—É–º–∞</option>
                    <option value="avg">–°–µ—Ä–µ–¥–Ω—î</option>
                    <option value="min">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ</option>
                    <option value="max">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ</option>
                </select>
            </td>
            <td><button onclick="deleteQueryRow(this)">‚ùå</button></td>
        `;
        queryBody.appendChild(row);

        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏
        populateTableDropdownsForRow(row);
        row.querySelector(".query-table-select").value = item.tableName;
        populateFieldDropdown(row.querySelector(".query-table-select"));
        row.querySelector(".query-field-select").value = item.fieldName;
        row.querySelector(".query-visible-checkbox").checked = item.isVisible;
        row.querySelector(".query-sort-select").value = item.sortBy;

        const operatorSelect = row.querySelector(".query-operator-select");
        const criteriaInput = row.querySelector(".query-criteria-input");

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —ñ –∫—Ä–∏—Ç–µ—Ä—ñ–π –∑ item.criteria
        const opMatch = item.criteria?.match(/^(\!\=|\>\=|\<\=|\=\=|\<|\>|\bIN\b|\bNOT IN\b)?\s*(.*)$/i);
        if (opMatch) {
            const [, operator = "==", value = ""] = opMatch;
            operatorSelect.value = operator.trim();
            criteriaInput.value = value.trim();
        } else {
            operatorSelect.value = "==";
            criteriaInput.value = item.criteria;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—å –ø–æ–ª—è (–≤–∞–∂–ª–∏–≤–æ!)
        const roleSelect = row.querySelector(".query-field-role");
        roleSelect.value = item.fieldRole || "select";
    });

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è JOIN-–∑–≤‚Äô—è–∑–∫—ñ–≤
    if (queryDefinition.joins && queryDefinition.joins.length > 0) {
        const joinTable = document.getElementById("joinBody");
        const tbody = joinTable.querySelector("tbody");
        joinTable.style.display = "table";

        queryDefinition.joins.forEach(join => {
            const match = join.condition.match(/"([^"]+)"\."([^"]+)" = "([^"]+)"\."([^"]+)"/);
            if (!match) return;

            const [, tableA, fieldA, tableB, fieldB] = match;

            const row = document.createElement("tr");
            row.innerHTML = `
                <td><select class="join-table-a" onchange="populateJoinFields(this, true)"></select></td>
                <td><select class="join-field-a"></select></td>
                <td><select class="join-table-b" onchange="populateJoinFields(this, false)"></select></td>
                <td><select class="join-field-b"></select></td>
                <td><button onclick="this.closest('tr').remove()">‚ùå</button></td>
            `;
            tbody.appendChild(row);

            const tableSelectA = row.querySelector(".join-table-a");
            const tableSelectB = row.querySelector(".join-table-b");
            const fieldSelectA = row.querySelector(".join-field-a");
            const fieldSelectB = row.querySelector(".join-field-b");

            [tableSelectA, tableSelectB].forEach(select => {
                select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
                database.tables.forEach(t => {
                    const opt = document.createElement("option");
                    opt.value = t.name;
                    opt.textContent = t.name;
                    select.appendChild(opt);
                });
            });

            tableSelectA.value = tableA;
            tableSelectB.value = tableB;

            populateJoinFields(tableSelectA, true);
            populateJoinFields(tableSelectB, false);

            fieldSelectA.value = fieldA;
            fieldSelectB.value = fieldB;
        });
    }

    document.getElementById("queryModal").style.display = "flex";
}



    function deleteSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        const queryIndex = queries.definitions.findIndex(q => q.name === selectedQueryName);
        if (queryIndex !== -1) {
            const deletedQueryName = queries.definitions[queryIndex].name;
            queries.definitions.splice(queryIndex, 1); // Remove from definitions
            saveDatabase(); // Save updated definitions

            // Also remove any corresponding query results from `queries.results` and from the `data-menu`
            const menuDisplayName = `*–∑–∞–ø–∏—Ç "${deletedQueryName}"`; // Construct the display name for the result
            const resultIndex = queries.results.findIndex(r => r.name === `–∑–∞–ø–∏—Ç "${deletedQuery_name}"`); // Find the result by its internal name
            if (resultIndex !== -1) {
                queries.results.splice(resultIndex, 1); // Remove from results
            }

            const dataMenu = document.getElementById("data-menu");
            const existingMenuItem = Array.from(dataMenu.children).find(item => item.textContent === menuDisplayName);
            if (existingMenuItem) {
                existingMenuItem.remove(); // Remove from menu
            }

            Message(`–ó–∞–ø–∏—Ç "${deletedQueryName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
            showSavedQueriesDialog(); // Refresh the list
        } else {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
    // --------------------

    function addJoinRow() {
        const joinTable = document.getElementById("joinBody");
        const tbody = joinTable.querySelector("tbody");

        joinTable.style.display = "table"; // –ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞

        const row = document.createElement("tr");
        row.innerHTML = `
            <td><select class="join-table-a" onchange="populateJoinFields(this, true)"></select></td>
            <td><select class="join-field-a"></select></td>
            <td><select class="join-table-b" onchange="populateJoinFields(this, false)"></select></td>
            <td><select class="join-field-b"></select></td>
            <td><button onclick="this.closest('tr').remove()">‚ùå</button></td>
        `;
        tbody.appendChild(row);

        const selects = row.querySelectorAll("select");
        selects.forEach(select => {
            if (select.classList.contains("join-table-a") || select.classList.contains("join-table-b")) {
                select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
                database.tables.forEach(t => {
                    const opt = document.createElement("option");
                    opt.value = t.name;
                    opt.textContent = t.name;
                    select.appendChild(opt);
                });
            }
        });
    }


    function populateJoinFields(tableSelect, isLeft) {
        const row = tableSelect.closest("tr");
        const fieldSelect = isLeft ? row.querySelector(".join-field-a") : row.querySelector(".join-field-b");
        fieldSelect.innerHTML = "";

        const table = database.tables.find(t => t.name === tableSelect.value);
        if (table) {
            table.schema.forEach(field => {
                const opt = document.createElement("option");
                opt.value = field.title;
                opt.textContent = field.title;
                fieldSelect.appendChild(opt);
            });
        }
    }
    //

    function openRelationFromQuery() {
        const joinRows = document.querySelectorAll("#joinBody tbody tr");
        database.relations = [];

        joinRows.forEach(row => {
            const tableA = row.querySelector(".join-table-a")?.value;
            const fieldA = row.querySelector(".join-field-a")?.value;
            const tableB = row.querySelector(".join-table-b")?.value;
            const fieldB = row.querySelector(".join-field-b")?.value;

            if (tableA && fieldA && tableB && fieldB) {
                database.relations.push({
                    fromTable: tableA,
                    fromField: fieldA,
                    toTable: tableB,
                    toField: fieldB
                });
            }
        });

        saveDatabase();
        openRelationDesigner(() => {
            // callback –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ JOIN
            loadRelationsToJoinTable();
        });
    }




    // Functions for managing saved tables
    function showSavedTablesDialog() {
        const listEl = document.getElementById("savedTablesList");
        listEl.innerHTML = "";
        selectedTableNameForEdit = null; // Reset selection

        database.tables.forEach(table => {
            const li = document.createElement("li");
            li.textContent = table.name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.tableName = table.name; // Store the table name in a data attribute

            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedTableNameForEdit = li.dataset.tableName;
            });
            listEl.appendChild(li);
        });
        document.getElementById("savedTablesModal").style.display = "flex";
    }

    function closeSavedTablesDialog() {
        document.getElementById("savedTablesModal").style.display = "none";
        selectedTableNameForEdit = null;
    }

    function openSelectedTable() {
        if (!selectedTableNameForEdit) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è.");
            return;
        }
        editData(selectedTableNameForEdit); // Use existing editData function
        closeSavedTablesDialog();
    }

    function confirmDeleteTable() {
        if (!selectedTableNameForEdit) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        selectedTableNameForDelete = selectedTableNameForEdit; // Store for confirmation
        document.getElementById("deleteTableConfirmText").innerHTML =
            `–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é <b>"${selectedTableNameForDelete}"</b>?`;
        document.getElementById("deleteTableConfirmModal").style.display = "flex";
    }

    function doDeleteTable() {
        if (selectedTableNameForDelete) {
            try {
                db.run(`DROP TABLE IF EXISTS "${selectedTableNameForDelete}"`);
                // Remove from in-memory database.tables array
                database.tables = database.tables.filter(t => t.name !== selectedTableNameForDelete);
                saveDatabase(); // Persist changes to localStorage

                // Remove from "–î–∞–Ω—ñ" menu
                const dataMenu = document.getElementById("data-menu");
                const menuItemToRemove = Array.from(dataMenu.children).find(item => item.textContent === selectedTableNameForDelete);
                if (menuItemToRemove) {
                    menuItemToRemove.remove();
                }

                Message(`–¢–∞–±–ª–∏—Ü—é "${selectedTableNameForDelete}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
                closeDeleteTableConfirmModal();
                showSavedTablesDialog(); // Refresh the list in the dialog
            } catch (e) {
                Message(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: ${e.message}`);
            }
        }
    }

    function closeDeleteTableConfirmModal() {
        document.getElementById("deleteTableConfirmModal").style.display = "none";
        selectedTableNameForDelete = null;
    }


    // New function for Report Creator
    let isGridVisible = false; // Track grid visibility

    function createReport(report = null) {
        const modal = document.getElementById("reportBuilderModal");
        const canvas = document.getElementById("reportCanvas");
        const nameInput = document.getElementById("reportNameInput");
        document.getElementById("reportTitle").textContent = "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É";

        canvas.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        populateFieldPanelTableSelect();

        if (report) {
            nameInput.value = report.name || "–ó–≤—ñ—Ç –±–µ–∑ –Ω–∞–∑–≤–∏";
            document.getElementById("reportTitle").textContent = "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É";

            report.elements.forEach(el => {
                const div = document.createElement("div");
                console.log("el.x,el.y=", el.x, el.y)
                div.classList.add("report-element");

                if (el.type === "label") {
                    div.classList.add("report-label");
                    div.innerText = el.text || "–ù–∞–ø–∏—Å";

                    // –†–æ–±–∏–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–º
                    div.contentEditable = true;
                    div.style.cursor = "text";

                    // (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –º–æ–∂–Ω–∞ –≤—ñ–¥–ª–æ–≤–ª—é–≤–∞—Ç–∏ Enter —ñ Blur
                    div.addEventListener("keydown", (e) => {
                        if (e.key === "Enter") {
                            e.preventDefault();
                            div.blur();
                        }
                    });
                } else if (el.type === "field") {
                    div.classList.add("report-field");
                    const textDiv = document.createElement("div");
                    textDiv.classList.add("field-text");
                    textDiv.innerText = `${el.tableName}.${el.fieldName}`;

                    div.dataset.tableName = el.tableName;
                    div.dataset.fieldName = el.fieldName;

                    div.appendChild(textDiv);
                }

                Object.assign(div.style, {
                    position: "absolute",
                    left: addPx(el.left),
                    top: addPx(el.top),
                    width: addPx(el.width),
                    height: addPx(el.height),
                    fontFamily: el.fontFamily,
                    fontSize: el.fontSize,
                    fontWeight: el.fontWeight,
                    fontStyle: el.fontStyle,
                    textDecoration: el.textDecoration,
                    color: el.color,
                    backgroundColor: "transparent",
                    padding: "5px",
                    cursor: "move"
                });
                initializeReportElement(div);
                addResizeHandles(div);
                canvas.appendChild(div);
            });
        } else {
            nameInput.value = "–ù–æ–≤–∏–π –∑–≤—ñ—Ç";
        }

        reportCreatorModal.style.display = "flex";
    }
    
    function populateFieldPanelTableSelect() {
            fieldPanelTableSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –∞–±–æ –∑–∞–ø–∏—Ç</option>";
            console.log("queries.results=",queries.results)
            // –¢–∞–±–ª–∏—Ü—ñ
            database.tables.forEach(table => {
                const option = document.createElement("option");
                option.value = table.name;
                option.textContent = table.name;
                fieldPanelTableSelect.appendChild(option);
            });
        
            // –ó–∞–ø–∏—Ç–∏
            queries.results.forEach(query => {
                const option = document.createElement("option");
                option.value = `*${query.name}`;
                option.textContent = `*${query.name}`; // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: *–∑–∞–ø–∏—Ç "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å"
                fieldPanelTableSelect.appendChild(option);
            });
        }

    let resizing = false;
    let resizeElement = null;
    let startX, startY, startWidth, startHeight;
    
    function startResize(e) {
        e.stopPropagation(); // –©–æ–± –Ω–µ –∞–∫—Ç–∏–≤—É–≤–∞–≤—Å—è drag
        e.preventDefault();
        resizing = true;
        resizeElement = e.target.parentElement;
        startX = e.clientX;
        startY = e.clientY;
        startWidth = resizeElement.offsetWidth;
        startHeight = resizeElement.offsetHeight;
    
        document.addEventListener("mousemove", doResize);
        document.addEventListener("mouseup", stopResize);
    }
    
    function doResize(e) {
        if (!resizing || !resizeElement) return;
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
    
        // –ú–æ–∂–Ω–∞ —É—Å–∫–ª–∞–¥–Ω–∏—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—É—Ç–∞, –∞–ª–µ —Å–ø—Ä–æ—Å—Ç–∏–º–æ:
        resizeElement.style.width = (startWidth + dx) + "px";
        resizeElement.style.height = (startHeight + dy) + "px";
    }
    
    function stopResize() {
        resizing = false;
        resizeElement = null;
        document.removeEventListener("mousemove", doResize);
        document.removeEventListener("mouseup", stopResize);
    }

    function addResizeHandles(element) {
        const positions = ["top-left", "top-right", "bottom-left", "bottom-right"];
        positions.forEach(pos => {
            const handle = document.createElement("div");
            handle.classList.add("resize-handle", pos);
            handle.addEventListener("mousedown", startResize); // üëà –î–û–î–ê–ô –¶–ï
            element.appendChild(handle);
        });
    }
    

    // ******************
    function initializeReportElement(el) {
        el.classList.add("report-element");
        el.style.cursor = "grab";

        el.onmousedown = function(e) {
            const reportCanvas = document.getElementById("reportCanvas");                     
            const fieldSelectionModal = document.getElementById("fieldSelectionModal");
            
            const handle = e.target.closest(".resize-handle");
            activeElement = el;
            document.querySelectorAll(".report-element").forEach(el => {
                el.classList.remove("selected");
                el.querySelectorAll(".resize-handle").forEach(h => h.remove()); // –ø—Ä–∏–±—Ä–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏
            });
            document.querySelectorAll(".report-element.selected").forEach(el => el.classList.remove("selected"));
            el.classList.add("selected");
            addResizeHandles(el);                     
            closeTextOptionsModal();

            const rect = el.getBoundingClientRect();
            initialLeft = el.offsetLeft;
            initialTop = el.offsetTop;
            initialWidth = rect.width;
            initialHeight = rect.height;
            initialX = e.clientX;
            initialY = e.clientY;

            if (handle) {
                isResizing = true;
                resizeHandle = handle;
                el.style.cursor = handle.style.cursor;
            } else {
                isDragging = true;
                el.style.cursor = "grabbing";

                const BORDER_TOLERANCE = 10;
                const elementRect = el.getBoundingClientRect();
                const relativeClickX = e.clientX - elementRect.left;
                const relativeClickY = e.clientY - elementRect.top;

                const nearLeft = relativeClickX < BORDER_TOLERANCE;
                const nearRight = elementRect.width - relativeClickX < BORDER_TOLERANCE;
                const nearTop = relativeClickY < BORDER_TOLERANCE;
                const nearBottom = elementRect.height - relativeClickY < BORDER_TOLERANCE;

                if (el.classList.contains("report-label")) {
                    if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                        isDragging = false;
                        el.focus();
                    }
                } else if (el.classList.contains("report-field")) {
                    if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                        document.getElementById("fieldSelectionModal").style.display = "flex";
                        populateFieldSelectionPanel();
                        isDragging = false;
                    } else {
                        fieldSelectionModal.style.display = "none";
                    }
                }
            }

            if (isDragging || isResizing || (el.classList.contains("report-label") && !isDragging)) {
                e.preventDefault();
            }
        };
    }

    //*******************
    function cancelFieldSelection() {
        document.getElementById("fieldSelectionModal").style.display = "none";
    }
    function closeReportCreatorModal() {
        document.getElementById("reportCreatorModal").style.display = "none";                
        // Ensure grid is off when closing report creator
        document.getElementById("reportCanvas").classList.remove('grid-visible');
        isGridVisible = false;
    }

    let activeElement = null; // The element currently being dragged or resized
    let isDragging = false;
    let isResizing = false;
    let resizeHandle = null;
    let initialX, initialY; // Initial mouse position
    let initialLeft, initialTop, initialWidth, initialHeight; // Initial element properties

    // Ensure DOM is loaded before attempting to access reportCanvas
    document.addEventListener('DOMContentLoaded', () => {
        const reportCanvas = document.getElementById("reportCanvas");
        const fieldSelectionModal = document.getElementById("fieldSelectionModal");        
        const fieldPanelTableSelect = document.getElementById("fieldPanelTableSelect");
        const fieldPanelFieldSelect = document.getElementById("fieldPanelFieldSelect");
        

        reportCanvas.addEventListener("mousedown", (e) => {
            // Check if the click is on an element or a resize handle
            const element = e.target.closest(".report-element");
            const handle = e.target.closest(".resize-handle");

            // Deselect all elements first and hide field selection panel
            document.querySelectorAll(".report-element.selected").forEach(el => {
                el.classList.remove("selected");
            });
            closeTextOptionsModal(); // Close text options modal on canvas click or new element selection


            if (element) {
                activeElement = element;
                activeElement.classList.add("selected");
                const rect = activeElement.getBoundingClientRect();

                initialLeft = activeElement.offsetLeft;
                initialTop = activeElement.offsetTop;
                initialWidth = rect.width;
                initialHeight = rect.height;

                initialX = e.clientX;
                initialY = e.clientY;

                if (handle) {
                    isResizing = true;
                    resizeHandle = handle;
                    element.style.cursor = handle.style.cursor; // Set cursor for the element during resize
                } else { // No handle, so it's a click on the element itself for drag or edit
                    // Default action for click on element: assume drag
                    isDragging = true;
                    element.style.cursor = "grabbing";

                    const BORDER_TOLERANCE = 10;
                    const elementRect = activeElement.getBoundingClientRect();
                    const relativeClickX = e.clientX - elementRect.left;
                    const relativeClickY = e.clientY - elementRect.top;

                    const nearLeft = relativeClickX < BORDER_TOLERANCE;
                    const nearRight = elementRect.width - relativeClickX < BORDER_TOLERANCE;
                    const nearTop = relativeClickY < BORDER_TOLERANCE;
                    const nearBottom = elementRect.height - relativeClickY < BORDER_TOLERANCE;

                    if (activeElement.classList.contains("report-label")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            // Click is inside and not near a border, allow editing
                            isDragging = false; // Prevent dragging
                            element.focus(); // Focus for editing
                        } else {
                            // Click is near border, allow dragging (isDragging remains true)
                            // No additional action needed, fall through to default drag setup
                        }
                    } else if (activeElement.classList.contains("report-field")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            // Click is inside and not near a border, show panel                           
                            
                            populateFieldSelectionPanel();
                            fieldSelectionModal.style.display = "flex";
                            isDragging = false; // Prevent dragging when panel is shown for field selection
                        } else {
                            // Click is near border, allow dragging (isDragging remains true)       
                            fieldSelectionModal.style.display = "none"; // Ensure panel is hidden
                        }
                    }
                }
                // Prevent default browser drag behavior (e.g., for images or text selection)
                // if we are actively dragging, resizing, or initiating a custom edit
                if (isDragging || isResizing || (activeElement.classList.contains("report-label") && !isDragging)) {
                    e.preventDefault();
                }

            } else {
                activeElement = null; // No element selected
            }
        });

        reportCanvas.addEventListener("mousemove", (e) => {
            if (!activeElement) return;

            if (isDragging) {
                const dx = e.clientX - initialX;
                const dy = e.clientY - initialY;

                activeElement.style.left = `${initialLeft + dx}px`;
                activeElement.style.top = `${initialTop + dy}px`;
            } else if (isResizing) {
                const dx = e.clientX - initialX;
                const dy = e.clientY - initialY;

                let newWidth = initialWidth;
                let newHeight = initialHeight;
                let newLeft = initialLeft;
                let newTop = initialTop;

                if (resizeHandle.classList.contains("bottom-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight + dy);
                } else if (resizeHandle.classList.contains("bottom-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight + dy);
                    newLeft = initialLeft + dx;
                } else if (resizeHandle.classList.contains("top-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newTop = initialTop + dy;
                } else if (resizeHandle.classList.contains("top-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newLeft = initialLeft + dx;
                    newTop = initialTop + dy;
                }

                activeElement.style.width = `${newWidth}px`;
                activeElement.style.height = `${newHeight}px`;
                activeElement.style.left = `${newLeft}px`;
                activeElement.style.top = `${newTop}px`;
            }
        });

        reportCanvas.addEventListener("mouseup", () => {
            if (activeElement) {
                activeElement.style.cursor = "grab"; // Reset cursor
            }
            isDragging = false;
            isResizing = false;
            resizeHandle = null;
        });

        // Populate the field selection panel when a table is selected
        fieldPanelTableSelect.addEventListener("change", () => {
            const selectedTableName = fieldPanelTableSelect.value;            
            const selectedTable =
                    database.tables.find(t => t.name === selectedTableName) ||
                    queries.results.find(q => `*${q.name}` === selectedTableName);


            fieldPanelFieldSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ</option>";

            if (selectedTable) {
                selectedTable.schema.forEach(field => {
                    const option = document.createElement("option");
                    option.value = field.title;
                    option.textContent = field.title;
                    fieldPanelFieldSelect.appendChild(option);
                });
            }

            // ‚õî –ù–ï —Å–∫–∏–¥–∞—Ç–∏ fieldName –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ ‚Äî –ª–∏—à–µ –ø—Ä–∏ —è–≤–Ω—ñ–π –∑–º—ñ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
            if ((activeElement && activeElement.classList.contains("report-field"))||(activeElement && activeElement.classList.contains("form-field"))) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    // –Ø–∫—â–æ –ø–æ–ª–µ –≤–∂–µ —î ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ, —ñ–Ω–∞–∫—à–µ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ table
                    const currentField = activeElement.dataset.fieldName || "";
                    fieldTextDiv.innerText = selectedTableName ? `${selectedTableName}.${currentField}` : "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
                }
                activeElement.dataset.tableName = selectedTableName;
            }
        });


        // Update the active element's text when a field is selected
        fieldPanelFieldSelect.addEventListener("change", () => {
            const selectedTableName = fieldPanelTableSelect.value;
            const selectedFieldName = fieldPanelFieldSelect.value;
            if ((activeElement && activeElement.classList.contains("report-field") && selectedTableName && selectedFieldName)||(activeElement && activeElement.classList.contains("form-field") && selectedTableName && selectedFieldName)) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = `${selectedTableName}.${selectedFieldName}`;
                }
                activeElement.dataset.tableName = selectedTableName;
                activeElement.dataset.fieldName = selectedFieldName;
            } else if ((activeElement && activeElement.classList.contains("report-field"))||(activeElement && activeElement.classList.contains("report-field"))) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = fieldPanelTableSelect.value ? `${fieldPanelTableSelect.value}.` : "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
                }
                delete activeElement.dataset.fieldName;
            }
        });

       

        // Text options modal listeners
        document.getElementById("fontFamilySelect").addEventListener("change", (e) => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontFamily = e.target.value;
        });
        document.getElementById("fontSizeInput").addEventListener("input", (e) => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontSize = `${e.target.value}px`;
        });
        document.getElementById("fontColorInput").addEventListener("input", (e) => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.color = e.target.value;
        });
        document.getElementById("fontWeightToggle").addEventListener("change", (e) => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontWeight = e.target.checked ? 'bold' : 'normal';
        });
        document.getElementById("fontStyleToggle").addEventListener("change", (e) => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontStyle = e.target.checked ? 'italic' : 'normal';
        });
        document.getElementById("textDecorationUnderline").addEventListener("change", (e) => {
            if (activeElement && isTextElement(activeElement)) updateTextDecoration();
        });
        document.getElementById("textDecorationStrikethrough").addEventListener("change", (e) => {
            if (activeElement && isTextElement(activeElement)) updateTextDecoration();
        });
    }); // End DOMContentLoaded

    // Helper to populate the field selection panel when a report-field is selected
    function populateFieldSelectionPanel() {
        const fieldSelectionModal = document.getElementById("fieldSelectionModal");
        const fieldPanelTableSelect = document.getElementById("fieldPanelTableSelect");
        const fieldPanelFieldSelect = document.getElementById("fieldPanelFieldSelect");        
        const reportCanvas = document.getElementById("reportCanvas");

        fieldPanelTableSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
        database.tables.forEach(table => {
            const option = document.createElement("option");
            option.value = table.name;
            option.textContent = table.name;
            fieldPanelTableSelect.appendChild(option);
            console.log("table=", table.name)
        });
        // –ó–∞–ø–∏—Ç–∏
        queries.results.forEach(query => {
            const option = document.createElement("option");
            option.value = `*${query.name}`;
            option.textContent = `*${query.name}`; // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: *–∑–∞–ø–∏—Ç "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å"
            fieldPanelTableSelect.appendChild(option);
        });

        // Set initial values if activeElement has data- attributes
        if (activeElement && activeElement.dataset.tableName) {
            fieldPanelTableSelect.value = activeElement.dataset.tableName;
            // Manually trigger change to populate fieldSelect
            const event = new Event('change');
            fieldPanelTableSelect.dispatchEvent(event);
        } else {
            fieldPanelTableSelect.value = ""; // Clear selection
        }

        if (activeElement && activeElement.dataset.fieldName) {
            fieldPanelFieldSelect.value = activeElement.dataset.fieldName;
        } else {
            fieldPanelFieldSelect.value = ""; // Clear selection
        }

        // Show popup message

    }


    function addReportLabel() {
        const reportCanvas = document.getElementById("reportCanvas");
        const labelElement = document.createElement("div");
        labelElement.className = "report-element report-label";
        labelElement.style.left = "50px";
        labelElement.style.top = "50px";
        labelElement.style.width = "150px";
        labelElement.style.height = "50px";
        labelElement.contentEditable = "true";
        labelElement.innerText = "–ù–æ–≤–∏–π –Ω–∞–ø–∏—Å";

        // Add resize handles (simplified)
        labelElement.innerHTML += `
            <div class="resize-handle top-left"></div>
            <div class="resize-handle top-right"></div>
            <div class="resize-handle bottom-left"></div>
            <div class="resize-handle bottom-right"></div>
        `;

        reportCanvas.appendChild(labelElement);
        Message("–ï–ª–µ–º–µ–Ω—Ç '–ù–∞–ø–∏—Å' –¥–æ–¥–∞–Ω–æ. –ö–ª–∞—Ü–Ω—ñ—Ç—å –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω—å–æ–≥–æ (–ø–æ–¥–∞–ª—ñ –≤—ñ–¥ –∫—Ä–∞—ó–≤), —â–æ–± –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç, –∞–±–æ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å.");
    }

    function addReportField() {
        const reportCanvas = document.getElementById("reportCanvas");
        const fieldElement = document.createElement("div");
        fieldElement.className = "report-element report-field";
        fieldElement.style.left = "200px";
        fieldElement.style.top = "100px";
        fieldElement.style.width = "200px";
        fieldElement.style.height = "60px";

        // Create an inner div for text content to preserve resize handles
        const fieldTextDiv = document.createElement("div");
        fieldTextDiv.className = "field-text";
        fieldTextDiv.innerText = "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
        fieldElement.appendChild(fieldTextDiv);

        // Add resize handles
        fieldElement.innerHTML += `
            <div class="resize-handle top-left"></div>
            <div class="resize-handle top-right"></div>
            <div class="resize-handle bottom-left"></div>
            <div class="resize-handle bottom-right"></div>
        `;

        reportCanvas.appendChild(fieldElement);
        Message("–ï–ª–µ–º–µ–Ω—Ç '–ü–æ–ª–µ' –¥–æ–¥–∞–Ω–æ. –ö–ª–∞—Ü–Ω—ñ—Ç—å –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω—å–æ–≥–æ (–ø–æ–¥–∞–ª—ñ –≤—ñ–¥ –∫—Ä–∞—ó–≤), —â–æ–± –æ–±—Ä–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é —Ç–∞ –ø–æ–ª–µ.");
    }


    function addReportGrid() {
        const reportCanvas = document.getElementById("reportCanvas");
        if (isGridVisible) {
            reportCanvas.classList.remove('grid-visible');
            Message("–°—ñ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞.");
        } else {
            reportCanvas.classList.add('grid-visible');
            Message("–°—ñ—Ç–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞.");
        }
        isGridVisible = !isGridVisible; // Toggle the state
    }

    function openTextOptions() {
        if (!activeElement || !isTextElement(activeElement)) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç '–ù–∞–ø–∏—Å' –∞–±–æ '–ü–æ–ª–µ' –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.");
            return;
        }


        // Populate modal with current activeElement styles
        const fontFamilySelect = document.getElementById("fontFamilySelect");
        const fontSizeInput = document.getElementById("fontSizeInput");
        const fontColorInput = document.getElementById("fontColorInput");
        const fontWeightToggle = document.getElementById("fontWeightToggle");
        const fontStyleToggle = document.getElementById("fontStyleToggle");
        const textDecorationUnderline = document.getElementById("textDecorationUnderline");
        const textDecorationStrikethrough = document.getElementById("textDecorationStrikethrough");

        fontFamilySelect.value = activeElement.style.fontFamily || 'Arial';
        fontSizeInput.value = parseInt(activeElement.style.fontSize) || 16;
        fontColorInput.value = activeElement.style.color || '#000000';
        fontWeightToggle.checked = activeElement.style.fontWeight === 'bold';
        fontStyleToggle.checked = activeElement.style.fontStyle === 'italic';

        const textDecoration = activeElement.style.textDecoration;
        textDecorationUnderline.checked = textDecoration.includes('underline');
        textDecorationStrikethrough.checked = textDecoration.includes('line-through');


        document.getElementById("textOptionsModal").style.display = "flex";
    }

    function closeTextOptionsModal() {
        document.getElementById("textOptionsModal").style.display = "none";
    }

    function updateTextDecoration() {
        const textDecorationUnderline = document.getElementById("textDecorationUnderline");
        const textDecorationStrikethrough = document.getElementById("textDecorationStrikethrough");

        let decorations = [];
        if (textDecorationUnderline.checked) {
            decorations.push('underline');
        }
        if (textDecorationStrikethrough.checked) {
            decorations.push('line-through');
        }
        if (activeElement) {
            activeElement.style.textDecoration = decorations.join(' ');
        }
    }

    function saveReport() {
        const reportName = document.getElementById("reportNameInput").value.trim();
        const reportCanvas = document.getElementById("reportCanvas");

        const elements = [...reportCanvas.querySelectorAll('.report-element')].map(el => {
            const type = el.classList.contains("report-label") ? "label" : "field";

            return {
                type,
                left: el.offsetLeft,
                top: el.offsetTop,
                width: el.offsetWidth,
                height: el.offsetHeight,
                fontFamily: el.style.fontFamily || "Arial",
                fontSize: el.style.fontSize || "16px",
                fontWeight: el.style.fontWeight || "normal",
                fontStyle: el.style.fontStyle || "normal",
                textDecoration: el.style.textDecoration || "",
                color: el.style.color || "#000000",
                text: el.innerText || "",
                tableName: el.dataset.tableName || null,
                fieldName: el.dataset.fieldName || null
            };
        });

        const reportObject = {
            name: reportName,
            elements
        };

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ø–∞–º‚Äô—è—Ç—ñ
        const index = database.reports.findIndex(r => r.name === reportName);
        if (index !== -1) {
            database.reports[index] = reportObject;
        } else {
            database.reports.push(reportObject);
        }

        saveDatabase();
        Message(`–ó–≤—ñ—Ç "${reportName}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`);
    }



    function isTextElement(el) {
        return el.classList.contains("report-label") || el.classList.contains("report-field") || el.classList.contains("form-label") || el.classList.contains("form-field");
    }

    function addPx(value) {
        if (typeof value === "number") return value + "px";
        if (typeof value === "string" && !value.endsWith("px") && /^\d+$/.test(value)) {
            return value + "px";
        }
        return value;
    }


    function previewReport(report = null) {
        const previewModal = document.getElementById("reportPreviewModal");
        const previewCanvas = document.getElementById("reportPreviewCanvas");
        const titleEl = document.getElementById("reportPreviewTitle");

        previewCanvas.innerHTML = "";

        let elements = [];
        let reportName = "";

        if (report) {
            reportName = report.name || "–ó–≤—ñ—Ç –±–µ–∑ –Ω–∞–∑–≤–∏";
            elements = report.elements || [];
        } else {
            reportName = document.getElementById("reportNameInput").value.trim();
            const canvasElements = document.querySelectorAll("#reportCanvas .report-element");
            elements = Array.from(canvasElements).map(el => {
                const type = el.classList.contains("report-label") ? "label" : "field";
                return {
                    type: type,
                    text: el.innerText.trim(),
                    left: el.style.left,
                    top: el.style.top,
                    width: el.style.width,
                    height: el.style.height,
                    fontFamily: el.style.fontFamily || 'Arial',
                    fontSize: el.style.fontSize || '16px',
                    fontWeight: el.style.fontWeight || 'normal',
                    fontStyle: el.style.fontStyle || 'normal',
                    textDecoration: el.style.textDecoration || '',
                    color: el.style.color || '#000000',
                    tableName: el.dataset.tableName || '',
                    fieldName: el.dataset.fieldName || ''
                };
            });
        }

        titleEl.innerText = reportName;

        elements.forEach(el => {
            const clone = document.createElement("div");

            Object.assign(clone.style, {
                position: "absolute",
                left: addPx(el.left),
                top: addPx(el.top),
                width: addPx(el.width),
                height: addPx(el.height),
                fontFamily: el.fontFamily,
                fontSize: el.fontSize,
                fontWeight: el.fontWeight,
                fontStyle: el.fontStyle,
                textDecoration: el.textDecoration,
                color: el.color,
                padding: "5px",
                boxSizing: "border-box",
                overflow: "auto",
                whiteSpace: "pre-line",
                border: "none",
                backgroundColor: "transparent"
            });

            if (el.type === "label") {
                clone.innerText = el.text;
            }

        if (el.type === "field") {
            const tableName = el.tableName;
            const fieldName = el.fieldName;
        
            let lines = [];
            const table = findTableOrQuery(tableName);  // üÜï —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ
        
            if (table && table.data.length > 0) {
                const colIndex = table.schema.findIndex(col => col.title === fieldName);
                if (colIndex !== -1) {
                    lines = table.data.map(row => row[colIndex] ?? "");
                } else {
                    lines = ["–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"];
                }
            } else {
                lines = ["–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"];
            }
        
            clone.innerText = lines.join("\n");
        }
        

            previewCanvas.appendChild(clone);
        });

        previewModal.style.display = "flex";
    }

    function findTableOrQuery(tableName) {
        return (
            database.tables.find(t => t.name === tableName) ||
            queries.results.find(q => `*${q.name}` === tableName)
        );
    }



    function closeReportPreview() {
        document.getElementById("reportPreviewModal").style.display = "none";
    }

    let relationLines = [];
    let selectedFieldEl = null;
    let onRelationModalClose = null;

    function openRelationDesigner(callback) {
        const modal = document.getElementById("relationModal");
        const canvas = document.getElementById("relationCanvas");
        canvas.innerHTML = ""; // –æ—á–∏—Å—Ç–∏—Ç–∏
        console.log(">database.relations=",database.relations)
        relationLines = [];
        selectedFieldEl = null;
        onRelationModalClose = callback;
        // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        database.relations = database.relations.filter(rel => !rel.readonly);
        database.tables.forEach(table => {
            table.schema.forEach(field => {
                if (field.foreignKey && field.refTable && field.refField) {
                    database.relations.push({
                        fromTable: table.name,
                        fromField: field.title,
                        toTable: field.refTable,
                        toField: field.refField,
                        readonly: true, // üëà –¶–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó —è–∫ "—á–µ—Ä–≤–æ–Ω–∏–π —ñ –Ω–µ–∑–º—ñ–Ω–Ω–∏–π"
                    });
                }
            });
        });
        console.log(">>database.relations=",database.relations)
    
        const offsetX = 50, offsetY = 50;
    
        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—å
        database.tables.forEach((table, i) => {
            const block = document.createElement("div");
            block.className = "relation-table";
            block.style.position = "absolute";
            block.style.left = `${offsetX + (i % 3) * 300}px`;
            block.style.top = `${offsetY + Math.floor(i / 3) * 250}px`;
            block.style.width = "180px";
            block.style.opacity = "0.65";
            block.style.background = "#fff";
            block.style.border = "1px solid #aaa";
            block.style.boxShadow = "2px 2px 4px rgba(0,0,0,0.1)";
            block.style.cursor = "move";
            block.style.padding = "0px";
            block.dataset.tableName = table.name;
    
            const pkField = table.schema.find(col => col.primaryKey)?.title;
    
            const title = document.createElement("div");
            title.innerText = table.name;
            title.style.fontWeight = "bold";
            title.style.padding = "4px 8px";
            title.style.backgroundColor = "#eee";
            title.style.borderBottom = "1px solid #ccc";
            title.style.borderTopLeftRadius = "4px";
            title.style.borderTopRightRadius = "4px";
            block.appendChild(title);
    
            const tableList = document.createElement("table");
            table.schema.forEach(field => {
                const row = document.createElement("tr");
                const cell = document.createElement("td");
                cell.innerText = field.title + (field.title === pkField ? " üîë " : "");
    
                cell.style.padding = "0px";
                cell.style.border = "1px solid #ddd";
                cell.style.cursor = "pointer";
                cell.style.width = "178px";
                cell.dataset.table = table.name;
                cell.dataset.field = field.title;
    
                cell.addEventListener("click", () => handleFieldClick(cell));
                cell.addEventListener("dblclick", () => {
                    const index = relationLines.findIndex(rel =>
                        (rel.from === cell || rel.to === cell)
                    );
                    if (index !== -1) {
                        const rel = relationLines[index];
                        if (rel.readonly) {
                            Message("–¶–µ–π –∑–≤‚Äô—è–∑–æ–∫ —î —Å–∏—Å—Ç–µ–º–Ω–∏–º —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π.");
                            return;
                        }
                        relationLines.splice(index, 1);
    
                        // üíæ –û–Ω–æ–≤–∏—Ç–∏ database.relations –ª–∏—à–µ –¥–ª—è —Ä—É—á–Ω–∏—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤
                        const userRelations = relationLines
                            .filter(line => !line.readonly)
                            .map(line => ({
                                fromTable: line.from.dataset.table,
                                fromField: line.from.dataset.field,
                                toTable: line.to.dataset.table,
                                toField: line.to.dataset.field,
                                color: line.color,
                                readonly: false
                            }));
                        
                        const readonlyRelations = database.relations.filter(rel => rel.readonly);
                        database.relations = [...readonlyRelations, ...userRelations];
    
                        saveDatabase();
                        redrawLines();
                    }
                });
    
                row.appendChild(cell);
                tableList.appendChild(row);
            });
    
            block.appendChild(tableList);
            makeDraggable(block);
            canvas.appendChild(block);
        });
    
        // üîÅ –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏
        relationLines = [];
        console.log(">>>database.relations=",database.relations)
        if (Array.isArray(database.relations)) {
            database.relations.forEach(rel => {
                const fromCell = [...canvas.querySelectorAll("td")]
                    .find(td => td.dataset.table === rel.fromTable && td.dataset.field === rel.fromField);
                const toCell = [...canvas.querySelectorAll("td")]
                    .find(td => td.dataset.table === rel.toTable && td.dataset.field === rel.toField);
    
                if (fromCell && toCell) {
                    relationLines.push({
                        from: fromCell,
                        to: toCell,
                        readonly: rel.readonly || false,
                        color: rel.color || "red"
                    });
                }
            });
        }
    
        requestAnimationFrame(redrawLines); // üñç –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—ó –ø—ñ—Å–ª—è DOM
    
        modal.style.display = "flex";
    
        modal.querySelector(".close-btn").onclick = () => {
            modal.style.display = "none";
            if (typeof callback === "function") callback();
        };
    }
    

    function handleFieldClick(cell) {
        if (cell.classList.contains("selected")) {
            cell.classList.remove("selected");
            selectedFieldEl = null;
            redrawLines();
            return;
        }

        if (!selectedFieldEl) {
            cell.classList.add("selected");
            selectedFieldEl = cell;
        } else {
            if (selectedFieldEl === cell) return;

            // –î–æ–¥–∞—Ç–∏ –∑–≤'—è–∑–æ–∫
            relationLines.push({
                from: selectedFieldEl,
                to: cell
            });

            // üîÑ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É database.relations
            database.relations = relationLines.map(line => ({
                fromTable: line.from.dataset.table,
                fromField: line.from.dataset.field,
                toTable: line.to.dataset.table,
                toField: line.to.dataset.field
            }));
            saveDatabase();


            selectedFieldEl.classList.remove("selected");
            cell.classList.remove("selected");
            selectedFieldEl = null;

            redrawLines();
        }
    }


    function makeDraggable(el) {
        const canvas = document.getElementById("relationCanvas");
        let isDragging = false;
        let offsetX = 0,
            offsetY = 0;

        el.addEventListener("mousedown", e => {
            if (e.target.tagName === "TD") return; // –Ω–µ —á—ñ–ø–∞—î–º–æ –∫–ª—ñ–∫–∏ –ø–æ –ø–æ–ª—è—Ö
            isDragging = true;

            const rect = el.getBoundingClientRect();
            const canvasRect = canvas.getBoundingClientRect();

            // –ó—Å—É–≤ –º—ñ–∂ –∫—É—Ä—Å–æ—Ä–æ–º —ñ –≤–µ—Ä—Ö–Ω—ñ–º –ª—ñ–≤–∏–º –∫—É—Ç–æ–º –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;

            // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            const onMouseMove = (e) => {
                if (!isDragging) return;

                const x = e.clientX - canvasRect.left - offsetX;
                const y = e.clientY - canvasRect.top - offsetY;

                el.style.left = `${x}px`;
                el.style.top = `${y}px`;

                redrawLines();
            };

            const onMouseUp = () => {
                isDragging = false;
                document.removeEventListener("mousemove", onMouseMove);
                document.removeEventListener("mouseup", onMouseUp);
            };

            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", onMouseUp);
        });
    }



    function redrawLines() {
        const canvas = document.getElementById("relationCanvas");

        const existingSvg = document.getElementById("relation-svg");
        if (existingSvg) existingSvg.remove();

        const svgEl = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svgEl.setAttribute("id", "relation-svg");
        svgEl.style.position = "absolute";
        svgEl.style.top = 0;
        svgEl.style.left = 0;
        svgEl.style.width = "100%";
        svgEl.style.height = "100%";
        svgEl.style.zIndex = "0";
        svgEl.style.pointerEvents = "none";

        const canvasRect = canvas.getBoundingClientRect();

        relationLines.forEach(line => {
            const fromRect = line.from.getBoundingClientRect();
            const toRect = line.to.getBoundingClientRect();

            const fromCenterX = fromRect.left + fromRect.width / 2 - canvasRect.left;
            const toCenterX = toRect.left + toRect.width / 2 - canvasRect.left;

            const fromY = fromRect.top + fromRect.height / 2 - canvasRect.top;
            const toY = toRect.top + toRect.height / 2 - canvasRect.top;

            const H_OFFSET = 12; // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –∑—Å—É–≤ –≤—ñ–¥ —Ç–æ—á–∫–∏

            let fromX, toX, fromDir, toDir;

            if (fromCenterX < toCenterX) {
                // –ó–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
                fromX = fromRect.left + fromRect.width - canvasRect.left;
                toX = toRect.left - canvasRect.left;
                fromDir = +1;
                toDir = -1;
            } else {
                // –°–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ
                fromX = fromRect.left - canvasRect.left;
                toX = toRect.left + toRect.width - canvasRect.left;
                fromDir = -1;
                toDir = +1;
            }

            // –õ–∞–º–∞–Ω–∞: 5 —Ç–æ—á–æ–∫
            const p1 = {
                x: fromX,
                y: fromY
            }; // –≤–∏—Ö—ñ–¥ –∑ –ø–æ–ª—è
            const p2 = {
                x: fromX + fromDir * H_OFFSET,
                y: fromY
            }; // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –∑—Å—É–≤
            const p3 = {
                x: p2.x,
                y: toY
            }; // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –¥–æ —Ä—ñ–≤–Ω—è to
            const p4 = {
                x: toX + toDir * H_OFFSET,
                y: toY
            }; // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –¥–æ to
            const p5 = {
                x: toX,
                y: toY
            }; // –≤—Ö—ñ–¥ –≤ to

            const path = document.createElementNS("http://www.w3.org/2000/svg", "polyline");
            const points = [p1, p2, p3, p4, p5].map(p => `${p.x},${p.y}`).join(" ");
            path.setAttribute("points", points);
            path.setAttribute("fill", "none");
            //path.setAttribute("stroke", "#3498db");
            path.setAttribute("stroke", line.color || "#3498db");
            path.setAttribute("stroke-width", "2");

            svgEl.appendChild(path);
        });

        canvas.insertBefore(svgEl, canvas.firstChild);
    }



    function closeRelationModal() {
        document.getElementById("relationModal").style.display = "none";
        if (typeof onRelationModalClose === "function") {
            onRelationModalClose();
            onRelationModalClose = null; // –æ—á–∏—Å—Ç–∏—Ç–∏
        }
    }


    function saveRelations() {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∑–≤‚Äô—è–∑–∫–∏ (–Ω–µ readonly)
        const userRelations = relationLines
            .filter(line => !line.readonly)
            .map(line => ({
                fromTable: line.from.dataset.table,
                fromField: line.from.dataset.field,
                toTable: line.to.dataset.table,
                toField: line.to.dataset.field,
                color: line.color || "black",
                readonly: false
            }));
    
        // –ó–∞–ª–∏—à–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏ (readonly) –±–µ–∑ –∑–º—ñ–Ω
        const systemRelations = database.relations.filter(rel => rel.readonly);
    
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∑–≤‚Äô—è–∑–∫–∏
        database.relations = [...systemRelations, ...userRelations];
    
        saveDatabase();
        Message("–ó–≤‚Äô—è–∑–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
        closeRelationModal();
    }
    

    function loadRelationsToJoinTable() {
        const joinTable = document.getElementById("joinBody");
        const tbody = joinTable.querySelector("tbody");
        tbody.innerHTML = "";
        joinTable.style.display = "table";
    
        // –ë–µ—Ä–µ–º–æ –ª–∏—à–µ –Ω–µ-readonly –∑–≤‚Äô—è–∑–∫–∏
        database.relations
            .filter(rel => !rel.readonly)
            .forEach(rel => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td><select class="join-table-a" onchange="populateJoinFields(this, true)"></select></td>
                    <td><select class="join-field-a"></select></td>
                    <td><select class="join-table-b" onchange="populateJoinFields(this, false)"></select></td>
                    <td><select class="join-field-b"></select></td>
                    <td><button onclick="this.closest('tr').remove()">‚úï</button></td>
                `;
                tbody.appendChild(row);
    
                const tableSelectA = row.querySelector(".join-table-a");
                const tableSelectB = row.querySelector(".join-table-b");
                const fieldSelectA = row.querySelector(".join-field-a");
                const fieldSelectB = row.querySelector(".join-field-b");
    
                [tableSelectA, tableSelectB].forEach(select => {
                    select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
                    database.tables.forEach(t => {
                        const opt = document.createElement("option");
                        opt.value = t.name;
                        opt.textContent = t.name;
                        select.appendChild(opt);
                    });
                });
    
                tableSelectA.value = rel.fromTable;
                tableSelectB.value = rel.toTable;
    
                populateJoinFields(tableSelectA, true);
                populateJoinFields(tableSelectB, false);
    
                fieldSelectA.value = rel.fromField;
                fieldSelectB.value = rel.toField;
            });
    }
    


    async function exportDTA() {
        const zip = new JSZip();

        // –î–æ–¥–∞–π SQLite –±–∞–∑—É
        const dbData = db.export();
        zip.file("database.sqlite", dbData);

        // –î–æ–¥–∞–π –∑–∞–ø–∏—Ç–∏
        const queriesJson = JSON.stringify(queries.definitions, null, 2);
        zip.file("queries.json", queriesJson);

        // –î–æ–¥–∞–π –∑–≤—ñ—Ç–∏
        const reportsJson = JSON.stringify(database.reports, null, 2);
        zip.file("reports.json", reportsJson);
        
        // –î–æ–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
        zip.file("query-results.json", JSON.stringify(queries.results || []));


        // –ì–µ–Ω–µ—Ä—É—î–º–æ –∞—Ä—Ö—ñ–≤ —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ
        const content = await zip.generateAsync({
            type: "blob"
        });
        const filename = (database.fileName || "my_database") + ".dta";

        const a = document.createElement("a");
        a.href = URL.createObjectURL(content);
        a.download = filename;
        a.click();
    }

    async function importDTA(file) {
        const zip = await JSZip.loadAsync(file);
        const dbFile = await zip.file("database.sqlite").async("uint8array");
        db = new SQL.Database(dbFile);
        database.fileName = file.name.split('.')[0];
        // –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏
        const queriesText = await zip.file("queries.json").async("string");
        queries.definitions = JSON.parse(queriesText);

        // –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑–≤—ñ—Ç–∏
        const reportsText = await zip.file("reports.json").async("string");
        database.reports = JSON.parse(reportsText);
        
        // üÜï –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ (—è–∫—â–æ —î)
        if (zip.file("query-results.json")) {
                const resultsText = await zip.file("query-results.json").async("string");
                queries.results = JSON.parse(resultsText);
                console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ DTA");
            } else {
                queries.results = [];
        }

        // –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é –¥–∞–Ω–∏—Ö
        database.tables = [];
        const res = db.exec("SELECT name, sql FROM sqlite_master WHERE type='table';");
        if (res.length > 0) {
            const tableRows = res[0].values;
            tableRows.forEach(([name, sql]) => {
                if (name.startsWith("sqlite_")) return;
                const match = sql.match(/\((.+)\)/s);
                if (!match) return;
                const schemaText = match[1];
                const schemaParts = schemaText.split(",").map(s => s.trim());
                const schema = schemaParts.map(part => {
                    const [titleRaw, typeRaw, ...rest] = part.split(/\s+/);
                    return {
                        title: titleRaw.replace(/"/g, ''),
                        type: typeRaw === "INTEGER" ? "–¶—ñ–ª–µ —á–∏—Å–ª–æ" : typeRaw === "REAL" ? "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ" : typeRaw === "BOOLEAN" ? "–¢–∞–∫/–ù—ñ" : typeRaw === "TEXT" ? "–¢–µ–∫—Å—Ç" : typeRaw,
                        primaryKey: rest.includes("PRIMARY") || rest.includes("PRIMARY KEY"),
                        comment: rest.includes("PRIMARY") ? "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á" : ""
                    };
                });

                const selectRes = db.exec(`SELECT * FROM "${name}"`);
                const dataRows = selectRes.length ? selectRes[0].values : [];

                database.tables.push({
                    name,
                    schema,
                    data: dataRows
                });
            });
        }

        // –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é
        document.getElementById("data-menu").innerHTML = "";
        database.tables.forEach(t => addTableToMenu(t.name));
        queries.results.forEach(q => {
                addTableToMenu(`*${q.name}`);
        });

        saveDatabase();
        Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ .dta —Ñ–∞–π–ª—É.");
        updateMainTitle();
        updateQuickAccessPanel(
                  getCurrentTableNames(),
                  getCurrentQueryNames(),
                  getCurrentReportNames(),
                  getCurrentFormNames()
                );
    }

    //


    let currentFormRecordIndex = 0; // For form viewer navigation
    let selectedFormName = null; // To keep track of the selected form in the saved forms dialog

    // createForm function
    function createForm() {
        document.getElementById("formCreatorModal").style.display = "flex";
        document.getElementById("formNameInput").value = "–ù–æ–≤–∞ —Ñ–æ—Ä–º–∞";
        document.getElementById("formCanvas").innerHTML = "";
        document.getElementById("fieldSelectionModal").style.display = "none";        
        document.getElementById("formCanvas").classList.remove('grid-visible');
        isGridVisible = false;


    }


    function closeFormModal() {
        document.getElementById("formCreatorModal").style.display = "none";
        // Ensure the field selection panel is hidden when closing the modal
        document.getElementById("fieldSelectionModal").style.display = "none";        
        // Ensure grid is off when closing report creator
        document.getElementById("formCanvas").classList.remove('grid-visible');
        isGridVisible = false;

    }
    //*******************************************************************************

    function saveForm() {
        const formName = document.getElementById("formNameInput").value.trim();
        const formCanvas = document.getElementById("formCanvas");

        const elements = [...formCanvas.querySelectorAll('.form-element')].map(el => {
            const type = el.classList.contains("form-label") ? "label" : "field";

            return {
                type,
                left: el.offsetLeft,
                top: el.offsetTop,
                width: el.offsetWidth,
                height: el.offsetHeight,
                fontFamily: el.style.fontFamily || "Arial",
                fontSize: el.style.fontSize || "16px",
                fontWeight: el.style.fontWeight || "normal",
                fontStyle: el.style.fontStyle || "normal",
                textDecoration: el.style.textDecoration || "",
                color: el.style.color || "#000000",
                text: el.innerText?.trim() || "",
                tableName: el.dataset.tableName || null,
                fieldName: el.dataset.fieldName || null
            };
        });

        const formObject = {
            name: formName,
            elements
        };

        const index = database.forms.findIndex(f => f.name === formName);
        if (index !== -1) database.forms[index] = formObject;
        else database.forms.push(formObject);

        saveDatabase();
        Message(`–§–æ—Ä–º—É "${formName}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`);
    }
//
//
    function deleteSelectedForm() {
        if (!selectedFormName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        const formIndex = database.forms.findIndex(q => q.name === selectedFormName);
        if (formIndex !== -1) {
            const deletedFormName = database.forms[formIndex].name;
            database.forms.splice(formIndex, 1); // Remove 
            saveDatabase(); // Save updated

            const dataMenu = document.getElementById("data-menu");

            Message(`–§–æ—Ä–º—É "${deletedFormName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
            showSavedFormsDialog(); // Refresh the list
        } else {
            Message("–í–∏–±—Ä–∞–Ω—É —Ñ–æ—Ä–º—É  –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
    //
        function deleteSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        const queryIndex = queries.definitions.findIndex(q => q.name === selectedQueryName);
        if (queryIndex !== -1) {
            const deletedQueryName = queries.definitions[queryIndex].name;
            queries.definitions.splice(queryIndex, 1); // Remove from definitions
            saveDatabase(); // Save updated definitions

            // Also remove any corresponding query results from `queries.results` and from the `data-menu`
            const menuDisplayName = `*–∑–∞–ø–∏—Ç "${deletedQueryName}"`; // Construct the display name for the result
            const resultIndex = queries.results.findIndex(r => r.name === `–∑–∞–ø–∏—Ç "${deletedQuery_name}"`); // Find the result by its internal name
            if (resultIndex !== -1) {
                queries.results.splice(resultIndex, 1); // Remove from results
            }

            const dataMenu = document.getElementById("data-menu");
            const existingMenuItem = Array.from(dataMenu.children).find(item => item.textContent === menuDisplayName);
            if (existingMenuItem) {
                existingMenuItem.remove(); // Remove from menu
            }

            Message(`–ó–∞–ø–∏—Ç "${deletedQueryName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
            showSavedQueriesDialog(); // Refresh the list
        } else {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
    //
    function editSelectedForm() {
        if (!selectedFormName) {
            Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
            return;
        }

        const form = database.forms.find(f => f.name === selectedFormName);
        if (!form) {
            Message("–§–æ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        document.getElementById("savedFormsModal").style.display = "none";

        const formNameInput = document.getElementById("formNameInput");
        const formCanvas = document.getElementById("formCanvas");

        formNameInput.value = form.name;
        formCanvas.innerHTML = "";

        form.elements.forEach(el => {
            const div = document.createElement("div");
            div.classList.add("form-element");
            div.style.position = "absolute";
            div.style.left = el.left + "px";
            div.style.top = el.top + "px";
            div.style.width = el.width + "px";
            div.style.height = el.height + "px";
            div.style.cursor = "grab";
            div.style.boxSizing = "border-box";
            div.style.fontFamily = el.fontFamily;
            div.style.fontSize = el.fontSize;
            div.style.fontWeight = el.fontWeight;
            div.style.fontStyle = el.fontStyle;
            div.style.textDecoration = el.textDecoration;
            div.style.color = el.color;
            console.log("el(edit)=", el)
            if (el.type === "field") {
                div.classList.add("form-field");
                div.dataset.fieldName = el.fieldName;
                div.dataset.tableName = el.tableName;
                div.style.border = "1px dashed green";
                div.style.backgroundColor = "rgba(144, 238, 144, 0.3)";

                const fieldText = document.createElement("div");
                fieldText.classList.add("field-text");
                fieldText.innerText = `${el.tableName}.${el.fieldName}`;
                div.appendChild(fieldText);
            } else if (el.type === "label") {
                div.classList.add("form-label");
                div.contentEditable = "true";
                div.innerText = el.text;
                div.style.border = "1px dashed gray";
                div.style.backgroundColor = "rgba(240,240,240,0.8)";
            }

            formCanvas.appendChild(div);
        });

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∏, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π
        document.getElementById("formCreatorModal").style.display = "flex";

        Message(`–§–æ—Ä–º–∞ "${form.name}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.`);
    }


    //


    function closeFormModal() {
        document.getElementById("formCreatorModal").style.display = "none";
        // selectFormElement(null); // Deselect any active element
    }

    // Functions for managing saved forms (assuming showSavedFormsDialog, openSelectedFormForEdit, deleteSelectedForm are called from elsewhere, e.g., a menu)
    function showSavedFormsDialog() {
        // This modal and its elements are not in the provided index.html snippet.
        // Assuming such a modal (e.g., id="savedFormsModal" with list id="savedFormsList") exists or will be handled externally.
        const listEl = document.getElementById("savedFormsList");
        if (!listEl) {
            console.error("–ï–ª–µ–º–µ–Ω—Ç #savedFormsList –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ modal –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ä–º —ñ—Å–Ω—É—î.");
            Message("–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ä–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
        listEl.innerHTML = "";
        selectedFormName = null;

        if (database && database.forms) {
            database.forms.forEach(form => {
                const li = document.createElement("li");
                li.textContent = form.name;
                li.style.padding = "8px";
                li.style.cursor = "pointer";
                li.dataset.formName = form.name;

                li.addEventListener("click", () => {
                    [...listEl.children].forEach(el => el.style.background = "");
                    li.style.background = "#d0e0ff";
                    selectedFormName = li.dataset.formName;
                });
                listEl.appendChild(li);
            });
        }
        document.getElementById("savedFormsModal").style.display = "flex";
    }

    function deleteSelectedFormElement() {
      if (!activeElement || !activeElement.classList.contains("form-element")) {
        Message("–í–∏–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
        return;
      }
    
      activeElement.remove();
      activeElement = null;
    }
    

    function closeSavedFormsDialog() {
        const savedFormsModal = document.getElementById("savedFormsModal");
        if (savedFormsModal) {
            savedFormsModal.style.display = "none";
        }
        selectedFormName = null;
    }

    //


    function previewSelecteForm() {
        if (!selectedFormName) {
            Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.");
            return;
        }

        const form = database.forms.find(f => f.name === selectedFormName);
        if (!form) {
            Message("–§–æ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        document.getElementById("savedFormsModal").style.display = "none";
        previewSavedForm(form);
    }


    // Form Viewer
    let currentViewedForm = null;
    let currentFormDataTable = null;
    let currentFormData = [];

    function previewSavedForm(form) {
        const previewModal = document.getElementById("formPreviewModal");
        const previewCanvas = document.getElementById("formPreviewCanvas");

        console.log("form =", form);
        console.log("form.elements =", form.elements);
        console.log(database.forms);

        previewCanvas.innerHTML = "";
        currentFormRecordIndex = 0;
        document.getElementById("formPreviewTitle").innerText = `${form.name} ‚Äî –∑–∞–ø–∏—Å #1`;

        const table = database.tables.find(t => t.name === form.table);
        const record = table?.data?.[0] || [];

        form.elements.forEach(el => {
            if (el.type === "field") {
                const table = database.tables.find(t => t.name === el.tableName);
                const record = table?.data?.[currentFormRecordIndex] || [];
                const colIndex = table?.schema.findIndex(c => c.title === el.fieldName);

                const input = document.createElement("input");
                input.type = "text";
                input.style.position = "absolute";
                input.style.left = el.left + "px";
                input.style.top = el.top + "px";
                input.style.width = el.width + "px";
                input.style.height = el.height + "px";
                input.style.fontFamily = el.fontFamily;
                input.style.fontSize = el.fontSize;
                input.style.fontWeight = el.fontWeight;
                input.style.fontStyle = el.fontStyle;
                input.style.textDecoration = el.textDecoration;
                input.style.color = el.color;
                input.style.background = "#ccc";
                input.style.padding = "2px";
                input.style.borderStyle = "inset";
                input.style.borderWidth = "3px";
                input.style.borderColor = "#888";
                input.style.overflow = "hidden";
                input.style.whiteSpace = "nowrap";

                input.dataset.tableName = el.tableName;
                input.dataset.fieldName = el.fieldName;
                input.dataset.colIndex = colIndex;

                input.value = colIndex !== -1 ? (record?.[colIndex] ?? "") : "–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";

                previewCanvas.appendChild(input);
            } else if (el.type === "label") {
                const label = document.createElement("div");
                label.innerText = el.text || "";
                label.style.position = "absolute";
                label.style.left = el.left + "px";
                label.style.top = el.top + "px";
                label.style.width = el.width + "px";
                label.style.height = el.height + "px";
                label.style.fontFamily = el.fontFamily;
                label.style.fontSize = el.fontSize;
                label.style.fontWeight = el.fontWeight;
                label.style.fontStyle = el.fontStyle;
                label.style.textDecoration = el.textDecoration;
                label.style.color = el.color;
                label.style.padding = "5px";
                label.style.border = "none";
                label.style.background = "transparent";
                label.style.overflow = "hidden";
                label.style.whiteSpace = "nowrap";
                label.contentEditable = "true";

                previewCanvas.appendChild(label);
            }
        });


        previewModal.style.display = "flex";
    }



    function addFormLabel() {
        const formCanvas = document.getElementById("formCanvas");
        const labelElement = document.createElement("div");
        labelElement.className = "form-element form-label";
        Object.assign(labelElement.style, {
            position: "absolute",
            left: "50px",
            top: "50px",
            width: "150px",
            height: "40px",
            border: "1px solid blue",
            backgroundColor: "rgba(173, 216, 230, 0.3)",
            padding: "5px",
            cursor: "grab",
            boxSizing: "border-box"
        });
        labelElement.contentEditable = "true";
        labelElement.innerText = "–ù–æ–≤–∏–π –Ω–∞–ø–∏—Å";

        // –î–æ–¥–∞—Ç–∏ –∫—É—Ç–æ–≤—ñ –º–∞—Ä–∫–µ—Ä–∏
        labelElement.innerHTML += `
        <div class="resize-handle top-left"></div>
        <div class="resize-handle top-right"></div>
        <div class="resize-handle bottom-left"></div>
        <div class="resize-handle bottom-right"></div>
    `;

        formCanvas.appendChild(labelElement);
    }

    let selectedFormField = null;

    function addFormField() {
        const formCanvas = document.getElementById("formCanvas");
        const fieldElement = document.createElement("div");
        fieldElement.className = "form-element form-field";
        Object.assign(fieldElement.style, {
            position: "absolute",
            left: "200px",
            top: "100px",
            width: "200px",
            height: "40px",
            border: "1px dashed green",
            backgroundColor: "rgba(144,238,144,0.3)",
            padding: "5px",
            cursor: "grab",
            boxSizing: "border-box"
        });

        // –î–æ–¥–∞—Ç–∏ resize-–º–∞—Ä–∫–µ—Ä–∏
        fieldElement.innerHTML += `
        <div class="resize-handle top-left"></div>
        <div class="resize-handle top-right"></div>
        <div class="resize-handle bottom-left"></div>
        <div class="resize-handle bottom-right"></div>
        <div class="field-text">–ü–æ–ª–µ</div>
    `;

        // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ–ª—è
        fieldElement.addEventListener("click", () => {
            selectedFormField = fieldElement;
            //showFieldSelectionPanel();
        });

        formCanvas.appendChild(fieldElement);
    }




    let formGridVisible = false;

    function addFormGrid() {
        const formCanvas = document.getElementById("formCanvas");
        if (formGridVisible) {
            formCanvas.style.backgroundImage = "none";
        } else {
            formCanvas.style.backgroundImage =
                "repeating-linear-gradient(0deg, #ccc 0, #ccc 1px, transparent 1px, transparent 19px), " +
                "repeating-linear-gradient(90deg, #ccc 0, #ccc 1px, transparent 1px, transparent 19px)";
            formCanvas.style.backgroundSize = "20px 20px";
        }
        formGridVisible = !formGridVisible;
    }

    function previewForm() {
        const formName = document.getElementById("formNameInput").value.trim();
        const previewModal = document.getElementById("formPreviewModal");
        const previewCanvas = document.getElementById("formPreviewCanvas");

        previewCanvas.innerHTML = "";
        document.getElementById("formPreviewTitle").innerText = `${formName} ‚Äî –∑–∞–ø–∏—Å #${currentFormRecordIndex + 1}`;

        const elements = [...document.querySelectorAll("#formCanvas .form-label, #formCanvas .form-field")];
        elements.forEach(el => {
            if (el.classList.contains("form-field")) {
                const tableName = el.dataset.tableName;
                const fieldName = el.dataset.fieldName;
                const table = database.tables.find(t => t.name === tableName);

                const input = document.createElement("input");
                input.type = "text";
                input.style.position = "absolute";
                input.style.left = el.style.left;
                input.style.top = el.style.top;
                input.style.width = el.style.width;
                input.style.height = el.style.height;
                input.style.fontFamily = el.style.fontFamily || 'Arial';
                input.style.fontSize = el.style.fontSize || '16px';
                input.style.fontWeight = el.style.fontWeight || 'normal';
                input.style.fontStyle = el.style.fontStyle || 'normal';
                input.style.textDecoration = el.style.textDecoration || '';
                input.style.color = el.style.color || '#000000';
                input.style.background = "#ccc";
                input.style.padding = "2px";
                input.style.borderStyle = "inset";
                input.style.borderWidth = "3px";
                input.style.borderColor = "#888";
                input.style.overflow = "hidden";
                input.style.whiteSpace = "nowrap";
                input.dataset.tableName = tableName;
                input.dataset.fieldName = fieldName;

                if (table && table.data.length > currentFormRecordIndex) {
                    const colIndex = table.schema.findIndex(c => c.title === fieldName);
                    if (colIndex !== -1) {
                        const record = table.data[currentFormRecordIndex];
                        input.value = record?.[colIndex] ?? "";
                        input.dataset.colIndex = colIndex;
                    } else {
                        input.value = "–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
                    }
                } else {
                    input.value = "–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞";
                }

                previewCanvas.appendChild(input);
            } else {
                const label = document.createElement("div");
                label.style.position = "absolute";
                label.style.left = el.style.left;
                label.style.top = el.style.top;
                label.style.width = el.style.width;
                label.style.height = el.style.height;
                label.style.fontFamily = el.style.fontFamily || 'Arial';
                label.style.fontSize = el.style.fontSize || '16px';
                label.style.fontWeight = el.style.fontWeight || 'normal';
                label.style.fontStyle = el.style.fontStyle || 'normal';
                label.style.textDecoration = el.style.textDecoration || '';
                label.style.color = el.style.color || '#000000';
                label.style.padding = "5px";
                label.style.border = "none";
                label.style.background = "transparent";
                label.style.overflow = "hidden";
                label.style.whiteSpace = "nowrap";
                label.innerText = el.innerText.trim();

                previewCanvas.appendChild(label);
            }
        });

        previewModal.style.display = "flex";
    }

    function saveFormChanges() {
        const inputs = [...document.querySelectorAll("#formPreviewCanvas input")];

        if (inputs.length === 0) {
            Message("–ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.");
            return;
        }

        const tableName = inputs[0].dataset.tableName;
        const table = database.tables.find(t => t.name === tableName);
        if (!table) {
            Message("–¢–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        console.log("currentFormRecordIndex =", currentFormRecordIndex);

        const values = {};
        let allEmpty = true;

        inputs.forEach(input => {
            const field = input.dataset.fieldName;
            const val = input.value.trim();
            values[field] = val;
            if (val !== "") allEmpty = false;
        });

        if (allEmpty) {
            Message("–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ.");
            return;
        }

        const pkField = table.schema.find(col => col.primaryKey)?.title;
        const pkIndex = table.schema.findIndex(col => col.primaryKey);

        if (!pkField) {
            Message("–£ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.");
            return;
        }

        const existingRow = table.data[currentFormRecordIndex];
        console.log("existingRow=", existingRow, table.data.length)
        const isNewRecord = currentFormRecordIndex === undefined || (currentFormRecordIndex + 1) === table.data.length;


        if (isNewRecord) {
            // üÜï INSERT
            const fields = Object.keys(values);
            const placeholders = fields.map(() => "?").join(", ");
            const sql = `INSERT INTO "${tableName}" (${fields.map(f => `"${f}"`).join(", ")}) VALUES (${placeholders})`;
            const params = fields.map(f => values[f]);
            console.log("INSERT SQL:", sql, params);
            db.run(sql, params);


            // –û–Ω–æ–≤–ª—é—î–º–æ in-memory
            const newRow = table.schema.map(col => values[col.title] ?? "");
            table.data.push(newRow);

            currentFormRecordIndex = table.data.length - 1;
            Message("–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!");
        } else {
            // ‚úèÔ∏è UPDATE
            const setClause = Object.keys(values)
                .filter(field => field !== pkField)
                .map(field => `"${field}" = ?`)
                .join(", ");

            const sql = `UPDATE "${tableName}" SET ${setClause} WHERE "${pkField}" = ?`;
            const params = Object.keys(values)
                .filter(f => f !== pkField)
                .map(f => values[f]);

            const pkValue = existingRow[pkIndex];
            params.push(pkValue);

            console.log("UPDATE SQL:", sql, params);
            db.run(sql, params);


            // –û–Ω–æ–≤–ª—é—î–º–æ in-memory
            Object.keys(values).forEach(field => {
                const colIndex = table.schema.findIndex(col => col.title === field);
                if (colIndex >= 0) {
                    table.data[currentFormRecordIndex][colIndex] = values[field];
                }
            });

            Message("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
        }

        saveDatabase();
    }



    document.addEventListener('DOMContentLoaded', () => {
        const formCanvas = document.getElementById("formCanvas");
        const fieldSelectionModal = document.getElementById("fieldSelectionModal");
        const fieldPanelTableSelect = document.getElementById("fieldPanelTableSelect");
        const fieldPanelFieldSelect = document.getElementById("fieldPanelFieldSelect");
        
        formCanvas.addEventListener("mousedown", (e) => {
            const element = e.target.closest(".form-element");
            const handle = e.target.closest(".resize-handle");




            document.querySelectorAll(".form-element.selected").forEach(el => el.classList.remove("selected"));
            fieldSelectionModal.style.display = "none";
            closeTextOptionsModal();

            if (element) {
                activeElement = element;
                activeElement.classList.add("selected");
                addResizeHandles(element); // üîß –º–∞—Ä–∫–µ—Ä–∏ —Ä–æ–∑–º—ñ—Ä—É
                const rect = activeElement.getBoundingClientRect();

                initialLeft = activeElement.offsetLeft;
                initialTop = activeElement.offsetTop;
                initialWidth = rect.width;
                initialHeight = rect.height;
                initialX = e.clientX;
                initialY = e.clientY;

                if (handle) {
                    isResizing = true;
                    resizeHandle = handle;
                    element.style.cursor = handle.style.cursor;
                } else {
                    isDragging = true;
                    element.style.cursor = "grabbing";

                    const BORDER_TOLERANCE = 10;
                    const elementRect = activeElement.getBoundingClientRect();
                    const relativeClickX = e.clientX - elementRect.left;
                    const relativeClickY = e.clientY - elementRect.top;

                    const nearLeft = relativeClickX < BORDER_TOLERANCE;
                    const nearRight = elementRect.width - relativeClickX < BORDER_TOLERANCE;
                    const nearTop = relativeClickY < BORDER_TOLERANCE;
                    const nearBottom = elementRect.height - relativeClickY < BORDER_TOLERANCE;

                    if (activeElement.classList.contains("form-label")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            isDragging = false;
                            element.focus();
                        }
                    } else if (activeElement.classList.contains("form-field")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            fieldSelectionModal.style.display = "flex";
                            populateFieldSelectionPanel();
                            
                            isDragging = false;
                        } else {
                            fieldSelectionModal.style.display = "none";
                        }
                    }
                }

                if (isDragging || isResizing || (activeElement.classList.contains("form-label") && !isDragging)) {
                    e.preventDefault();
                }
            } else {
                activeElement = null;
            }
        });

        formCanvas.addEventListener("mousemove", (e) => {
            if (!activeElement) return;
            const dx = e.clientX - initialX;
            const dy = e.clientY - initialY;

            if (isDragging) {
                activeElement.style.left = `${initialLeft + dx}px`;
                activeElement.style.top = `${initialTop + dy}px`;
            } else if (isResizing) {
                let newWidth = initialWidth;
                let newHeight = initialHeight;
                let newLeft = initialLeft;
                let newTop = initialTop;

                if (resizeHandle.classList.contains("bottom-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight + dy);
                } else if (resizeHandle.classList.contains("bottom-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight + dy);
                    newLeft = initialLeft + dx;
                } else if (resizeHandle.classList.contains("top-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newTop = initialTop + dy;
                } else if (resizeHandle.classList.contains("top-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newLeft = initialLeft + dx;
                    newTop = initialTop + dy;
                }

                activeElement.style.width = `${newWidth}px`;
                activeElement.style.height = `${newHeight}px`;
                activeElement.style.left = `${newLeft}px`;
                activeElement.style.top = `${newTop}px`;
            }
        });

        formCanvas.addEventListener("mouseup", () => {
            if (activeElement) activeElement.style.cursor = "grab";
            isDragging = false;
            isResizing = false;
            resizeHandle = null;
        });


        // Populate the field selection panel when a table is selected
        fieldPanelTableSelect1.addEventListener("change", () => {
            const selectedTableName = fieldPanelTableSelect.value;
            const selectedTable = database.tables.find(t => t.name === selectedTableName);

            fieldPanelFieldSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ</option>";

            if (selectedTable) {
                selectedTable.schema.forEach(field => {
                    const option = document.createElement("option");
                    option.value = field.title;
                    option.textContent = field.title;
                    fieldPanelFieldSelect.appendChild(option);
                });
            }

            // ‚õî –ù–ï —Å–∫–∏–¥–∞—Ç–∏ fieldName –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ ‚Äî –ª–∏—à–µ –ø—Ä–∏ —è–≤–Ω—ñ–π –∑–º—ñ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
            if (activeElement && activeElement.classList.contains("form-field")) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    // –Ø–∫—â–æ –ø–æ–ª–µ –≤–∂–µ —î ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ, —ñ–Ω–∞–∫—à–µ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ table
                    const currentField = activeElement.dataset.fieldName || "";
                    fieldTextDiv.innerText = selectedTableName ? `${selectedTableName}.${currentField}` : "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
                }
                activeElement.dataset.tableName = selectedTableName;
            }
        });

        // Update the active element's text when a field is selected
        fieldPanelFieldSelect1.addEventListener("change", () => {
            const selectedTableName = fieldPanelTableSelect.value;
            const selectedFieldName = fieldPanelFieldSelect.value;
            if (activeElement && activeElement.classList.contains("form-field") && selectedTableName && selectedFieldName) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = `${selectedTableName}.${selectedFieldName}`;
                }
                activeElement.dataset.tableName = selectedTableName;
                activeElement.dataset.fieldName = selectedFieldName;
            } else if (activeElement && activeElement.classList.contains("form-field")) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = fieldPanelTableSelect.value ? `${fieldPanelTableSelect.value}.` : "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
                }
                delete activeElement.dataset.fieldName;
            }
        });

        // –°—Ç–∏–ª—ñ –¥–ª—è —Ç–µ–∫—Å—Ç—É
        document.getElementById("fontFamilySelect").addEventListener("change", e => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontFamily = e.target.value;
        });
        document.getElementById("fontSizeInput").addEventListener("input", e => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontSize = `${e.target.value}px`;
        });
        document.getElementById("fontColorInput").addEventListener("input", e => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.color = e.target.value;
        });
        document.getElementById("fontWeightToggle").addEventListener("change", e => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontWeight = e.target.checked ? 'bold' : 'normal';
        });
        document.getElementById("fontStyleToggle").addEventListener("change", e => {
            if (activeElement && isTextElement(activeElement)) activeElement.style.fontStyle = e.target.checked ? 'italic' : 'normal';
        });
        document.getElementById("textDecorationUnderline").addEventListener("change", e => {
            if (activeElement && isTextElement(activeElement)) updateTextDecoration();
        });
        document.getElementById("textDecorationStrikethrough").addEventListener("change", e => {
            if (activeElement && isTextElement(activeElement)) updateTextDecoration();
        });
    });


    document.addEventListener("click", (e) => {
        const el = e.target.closest(".form-element");
        if (el) {
            activeElement = el;
        }
    });

    function goToFirstRecord() {
        currentFormRecordIndex = 0;
        previewForm();
    }

    function goToPreviousRecord() {
        currentFormRecordIndex = Math.max(0, currentFormRecordIndex - 1);
        previewForm();
    }

    function goToNextRecord() {
        // –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–∞–∫—Å. –¥–æ–≤–∂–∏–Ω—É —Ç–∞–±–ª–∏—Ü—å
        const tables = database.tables;
        const maxLength = Math.max(...tables.map(t => t.data.length));
        currentFormRecordIndex = Math.min(maxLength - 1, currentFormRecordIndex + 1);
        previewForm();
    }

    function goToLastRecord() {
        const tables = database.tables;
        const maxLength = Math.max(...tables.map(t => t.data.length));
        currentFormRecordIndex = maxLength - 1;
        previewForm();
    }

    function createNewRecord() {
        // –¥–æ–¥–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å –¥–æ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É —Ñ–æ—Ä–º—ñ
        const elements = [...document.querySelectorAll("#formCanvas .form-field")];
        const usedTables = [...new Set(elements.map(el => el.dataset.tableName))];

        usedTables.forEach(tableName => {
            const table = database.tables.find(t => t.name === tableName);
            if (!table) return;

            const emptyRow = table.schema.map(() => "");
            table.data.push(emptyRow);
        });

        saveDatabase();

        // –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
        goToLastRecord();
    }

    // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    function updateMainTitle() {
        const titleBar = document.getElementById("mainTitle");
        if (database.fileName) {
            titleBar.textContent = "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: " + database.fileName;
        } else {
            titleBar.textContent = "–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö";
        }
    }

    // —ñ–º–ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
    function importSQLiteDb(file) {
        if (!file) {
            Message("–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.");
            return;
        }
    
        const reader = new FileReader();
    
        reader.onload = function(event) {
            const arrayBuffer = event.target.result;
            const uIntArray = new Uint8Array(arrayBuffer);
    
            try {
                const importedDb = new SQL.Database(uIntArray);
    
                const nameWithoutExt = file.name.replace(/\.[^/.]+$/, "");
                const fileName = nameWithoutExt;
    
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª –≤ localStorage
                const base64 = btoa(String.fromCharCode(...uIntArray));
                localStorage.setItem(fileName + ".db-data", base64);
    
                // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–º‚Äô—è—Ç—å
                database.fileName = fileName;
                database.tables = [];
                database.relations = []; // üÜï
                queries.definitions = [];
                queries.results = [];
                database.forms = [];
                database.reports = [];
                db = importedDb;
    
                const dataMenu = document.getElementById("data-menu");
                dataMenu.innerHTML = "";
    
                const res = db.exec("SELECT name, sql FROM sqlite_master WHERE type='table';");
                if (res.length > 0) {
                    const tableRows = res[0].values;
                    tableRows.forEach(([name]) => {
                        if (name.startsWith("sqlite_")) return;
    
                        const pragmaRes = db.exec(`PRAGMA table_info("${name}")`);
                        if (!pragmaRes.length) return;
                        
                        const columns = pragmaRes[0].values;
                        
                        // üÜï –ó—á–∏—Ç—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ
                        const fkRes = db.exec(`PRAGMA foreign_key_list("${name}")`);
                        const foreignKeys = fkRes.length ? fkRes[0].values.map(([id, seq, refTable, fromCol, toCol]) => ({
                            fromCol, refTable, toCol
                        })) : [];
                        
                        // –§–æ—Ä–º—É—î–º–æ —Å—Ö–µ–º—É
                        const schema = columns.map(([cid, title, type, notnull, dflt_value, pk]) => {
                           
                            const fk = foreignKeys.find(f => f.fromCol === title);
                            if (!(fk ===undefined)) {
                                console.log("FK import=", title,foreignKeys)
                                console.log("fk.refTable import=", fk.refTable)
                                console.log("fk.toCol import=", fk.toCol) }
                            return {
                                title,
                                type: type.toUpperCase() === "INTEGER" ? "–¶—ñ–ª–µ —á–∏—Å–ª–æ"
                                    : type.toUpperCase() === "REAL" ? "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ"
                                    : type.toUpperCase().includes("TEXT") ? "–¢–µ–∫—Å—Ç"
                                    : type.toUpperCase().includes("BOOL") ? "–¢–∞–∫/–ù—ñ"
                                    : type,
                                primaryKey: pk === 1,
                                comment: pk === 1 ? "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á" : "",
                                foreignKey: !!fk,
                                refTable: fk ? fk.refTable : null,
                                refField: fk ? fk.toCol : null
                            };
                        });
    
                        const selectRes = db.exec(`SELECT * FROM "${name}"`);
                        const dataRows = selectRes.length ? selectRes[0].values : [];
                        console.log("Schema=",schema)
                        database.tables.push({
                            name: name,
                            schema: schema,
                            data: dataRows
                        });
                    });
                }
    
                // üÜï –î–æ–¥–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ –¥–æ database.relations
                const fkTables = db.exec("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'");
                if (fkTables.length > 0) {
                    fkTables[0].values.forEach(([tableName]) => {
                        const fkRes = db.exec(`PRAGMA foreign_key_list("${tableName}")`);
                        if (!fkRes.length) return;
    
                        fkRes[0].values.forEach(fk => {
                            const [, , refTable, fromCol, toCol] = fk;
    
                            // –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
                            const exists = database.relations.some(r =>
                                r.fromTable === tableName &&
                                r.fromField === fromCol &&
                                r.toTable === refTable &&
                                r.toField === toCol
                            );
    
                            if (!exists) {
                                database.relations.push({
                                    fromTable: tableName,
                                    fromField: fromCol,
                                    toTable: refTable,
                                    toField: toCol,
                                    color: "red",
                                    readonly: true
                                });
                            }
                        });
                    });
                }
                saveDatabase()
                database.tables.forEach(t => addTableToMenu(t.name));
                updateMainTitle();
                Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '" + fileName + "'.");
                updateQuickAccessPanel(
                    getCurrentTableNames(),
                    getCurrentQueryNames(),
                    getCurrentReportNames(),
                    getCurrentFormNames()
                );
            } catch (e) {
                Message("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ: " + e.message);
            }
        };
    
        reader.readAsArrayBuffer(file);
    }
    
    // –µ–∫—Å–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö SQLite
    function exportSQLiteDb() {
        if (!db) {
            Message("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.");
            return;
        }

        const data = db.export();
        const blob = new Blob([data], {
            type: "application/x-sqlite3"
        });

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É –∑ database.fileName –∞–±–æ "my_database"
        const fileName = (database.fileName || "my_database") + ".sqlite";

        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = fileName;
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        URL.revokeObjectURL(a.href);
        a.remove();
    }

    // —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ CSV
    function showCsvImportDialog() {
        const select = document.getElementById("csvTargetTable");
        select.innerHTML = "";
        database.tables.forEach(table => {
            const option = document.createElement("option");
            option.value = table.name;
            option.textContent = table.name;
            select.appendChild(option);
        });
        document.getElementById("csvImportModal").style.display = "flex";
    }

    function closeCsvImportDialog() {
        document.getElementById("csvImportModal").style.display = "none";
    }

    function proceedCsvImport() {
        closeCsvImportDialog();
        document.getElementById("csvFileInput").value = ""; // –°–∫–∏–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ñ–∞–π–ª
        document.getElementById("csvFileInput").click(); // –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É
    }

    function handleCsvFile(file) {
        if (!file) {
            Message("–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.");
            return;
        }

        const reader = new FileReader();
        reader.onload = function(event) {
            const csvText = event.target.result;
            const rows = csvText.trim().split("\n").map(line => line.split(",").map(val => val.trim()));

            if (rows.length === 0) {
                Message("CSV-—Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                return;
            }

            const tableName = document.getElementById("csvTargetTable").value;
            const table = database.tables.find(t => t.name === tableName);
            if (!table) {
                Message("–¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            const expectedCols = table.schema.length;

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ–≤–ø—Ü—ñ–≤
            const invalidRow = rows.find(r => r.length !== expectedCols);
            if (invalidRow) {
                Message("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É CSV –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–ª—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ.");
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
            const typeMap = {
                "–¶—ñ–ª–µ —á–∏—Å–ª–æ": val => /^-?\d+$/.test(val),
                "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ": val => /^-?\d+(\.\d+)?$/.test(val),
                "–¢–∞–∫/–ù—ñ": val => /^(true|false|1|0)$/i.test(val),
                "–¢–µ–∫—Å—Ç": val => true,
                "–î–∞—Ç–∞": val => true // –º–æ–∂–Ω–∞ —É—Å–∫–ª–∞–¥–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
            };

            for (let i = 0; i < rows.length; i++) {
                for (let j = 0; j < expectedCols; j++) {
                    const val = rows[i][j];
                    const type = table.schema[j].type;
                    if (!typeMap[type](val)) {
                        Message(`–ü–æ–º–∏–ª–∫–∞ —Ç–∏–ø—É –≤ —Ä—è–¥–∫—É ${i + 1}, –ø–æ–ª–µ "${table.schema[j].title}" –º–∞—î –±—É—Ç–∏ —Ç–∏–ø—É "${type}".`);
                        return;
                    }
                }
            }

            // –£—Å–µ –≥–∞—Ä–∞–∑–¥ ‚Äî –≤—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
            const colNames = table.schema.map(col => `"${col.title}"`).join(", ");
            db.run("BEGIN TRANSACTION");
            rows.forEach(row => {
                const values = row.map(val => `'${val.replace(/'/g, "''")}'`).join(", ");
                const sql = `INSERT INTO "${table.name}" (${colNames}) VALUES (${values})`;
                db.run(sql);
            });
            db.run("COMMIT");

            Message(`–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${rows.length} –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é "${table.name}".`);
            saveDatabase();
        };

        reader.readAsText(file);
    }

    // –ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–æ–º–æ—Å—Ç–µ–π –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    function showDatabaseInfo() {
        if (!db || !database.fileName) {
            Message("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.");
            return;
        }

        let info = `–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É: ${database.fileName}.sqlite\n\n`;

        if (!database.tables.length) {
            info += "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—å.";
        } else {
            info += "–¢–∞–±–ª–∏—Ü—ñ:\n";
            database.tables.forEach(table => {
                try {
                    const res = db.exec(`SELECT COUNT(*) AS count FROM "${table.name}"`);
                    const count = res.length ? res[0].values[0][0] : 0;
                    info += `- ${table.name}: ${count} –∑–∞–ø–∏—Å—ñ–≤\n`;
                } catch (e) {
                    info += `- ${table.name}: –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É\n`;
                }
            });
        }

        // –û–±‚Äô—î–º –±–∞–∑–∏
        try {
            const exportData = db.export();
            const sizeInBytes = exportData.length;
            const sizeInKB = (sizeInBytes / 1024).toFixed(2);
            const sizeInMB = (sizeInBytes / 1024 / 1024).toFixed(2);

            info += `\n–û–±‚Äô—î–º —Ñ–∞–π–ª—É: ${sizeInBytes} –±–∞–π—Ç (${sizeInKB} KB, ${sizeInMB} MB)`;
        } catch (e) {
            info += `\n–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –æ–±‚Äô—î–º –±–∞–∑–∏.`;
        }

        document.getElementById("dbInfoContent").innerText = info;
        document.getElementById("dbInfoModal").style.display = "flex";
    }

    function closeDbInfoModal() {
        document.getElementById("dbInfoModal").style.display = "none";
    }
    // –ó–∞–∫—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    function closeDatabase() {
        if (!db) {
            Message("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞.");
            return;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
        saveDatabase();

        // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
        db = null;
        database.fileName = "";
        database.tables = [];
        database.reports = [];
        database.relations = [];
        database.forms = [];

        queries.definitions = [];
        queries.results = [];

        const dataMenu = document.getElementById("data-menu");
        dataMenu.innerHTML = "";

        updateMainTitle(); // –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ "–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö"
        Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ.");
        updateQuickAccessPanel([], [], [], []);
    }

    // –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏
    function exitApplication() {
        document.getElementById("exitModal").style.display = "flex";

        setTimeout(() => {
            // –°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –≤–∫–ª–∞–¥–∫—É (–Ω–µ –∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±—Ä–∞—É–∑–µ—Ä–∞)
            window.open('', '_self', '');
            window.close();

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            document.body.innerHTML = "<div style='display:flex; align-items:center; justify-content:center; height:100vh; font-size:32px;'>–†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</div>";
        }, 3000);
    }

    // –í—ñ–∫–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
    function showReportsList() {
        const listEl = document.getElementById("reportList");
        listEl.innerHTML = "";
        selectedReportName = null;

        database.reports.forEach((report) => {
            console.log("report=", report)
            const li = document.createElement("li");
            li.textContent = report.name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.reportName = report.name; // Store the report name in a data attribute

            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedReportName = li.dataset.reportName;
            });
            listEl.appendChild(li);
        });
        document.getElementById("reportListModal").style.display = "flex";
    }

    function closeReportList() {
        document.getElementById("reportListModal").style.display = "none";
    }

    function deleteSelectedReport() {
        if (!selectedReportName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }

        const reportIndex = database.reports.findIndex(r => r.name === selectedReportName);
        if (reportIndex === -1) {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        const deletedName = database.reports[reportIndex].name;
        database.reports.splice(reportIndex, 1); // –≤–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É

        saveDatabase(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

        // –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É "–î–∞–Ω—ñ", —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º –±—É–≤
        const dataMenu = document.getElementById("data-menu");
        const menuItem = Array.from(dataMenu.children).find(item => item.textContent === deletedName);
        if (menuItem) menuItem.remove();

        Message(`–ó–≤—ñ—Ç "${deletedName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
        showReportsList(); // –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–≤—ñ—Ç—ñ–≤
    }

    function previewSelectedReport() {
        if (!selectedReportName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.");
            return;
        }

        const report = database.reports.find(r => r.name === selectedReportName);
        if (!report) {
            Message("–ó–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        previewReport(report); // —Ñ—É–Ω–∫—Ü—ñ—è –≤–∂–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
    }

    function editSelectedReport() {
        if (!selectedReportName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
            return;
        }
        document.getElementById("reportListModal").style.display = "none";
        const report = database.reports.find(r => r.name === selectedReportName);
        if (!report) {
            Message("–ó–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        createReport(report); // –≤—ñ–¥–∫—Ä–∏–≤–∞—î –∑–≤—ñ—Ç —É —Ä–µ–∂–∏–º—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    }

    function deleteActiveElement() {
        if (!activeElement) {
            Message("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }

        const confirmed = confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç?");
        if (!confirmed) return;

        activeElement.remove();
        activeElement = null;

        // –ó–∞–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞–Ω–µ–ª—ñ
        document.getElementById("fieldSelectionModal").style.display = "none";
        closeTextOptionsModal();
    }
    // –†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É
    // –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤.
    
    function createOwnSQL() {
        document.getElementById("ownSqlInput").value = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥—É
        document.getElementById("ownSqlResults").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
        document.getElementById("ownSqlModal").style.display = "flex";
    }
    //
    
    function editOwnQuery(query) {
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–ª–∞—Å–Ω–æ–≥–æ SQL
        const modal = document.getElementById("ownSqlModal");
        if (modal) modal.style.display = "flex";
    
        // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞–∑–≤—É –∑–∞–ø–∏—Ç—É
        const nameInput = document.getElementById("ownSQLName");
        if (nameInput) nameInput.value = query.name || "";
    
        // –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç SQL-–∑–∞–ø–∏—Ç—É
        const sqlTextarea = document.getElementById("ownSqlInput");
        if (sqlTextarea) sqlTextarea.value = query.sql || "";
        
        document.getElementById("ownSqlResults").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
    }
    
    // –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤.
    
    function closeOwnSqlModal() {
        document.getElementById("ownSqlModal").style.display = "none";
    }
/* –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ SQL-–∑–∞–ø–∏—Ç—É */    
function executeOwnSQL() {
    const sqlQuery = document.getElementById("ownSqlInput").value.trim();
    const queryName = document.getElementById("ownSQLName").value.trim();
    const resultsDiv = document.getElementById("ownSqlResults");
    resultsDiv.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

    if (!sqlQuery) {
        resultsDiv.innerHTML = "<p style='color: orange;'>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å SQL-–∑–∞–ø–∏—Ç.</p>";
        return;
    }

    if (!db) {
        resultsDiv.innerHTML = "<p style='color: red;'>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö.</p>";
        return;
    }

    try { 
        if (!validateSqlQuery(sqlQuery)) return;
        const res = db.exec(sqlQuery);                

        if (res.length > 0) {
            const columns = res[0].columns;
            const dataRows = res[0].values;

            // ‚úÖ –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            const info = document.createElement("p");
            info.style.color = "green";
            info.style.fontWeight = "bold";
            info.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ‚Äì –∑–Ω–∞–π–¥–µ–Ω–æ ${dataRows.length} –∑–∞–ø–∏—Å—ñ–≤`;
            resultsDiv.appendChild(info);

            // --- –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ---
            const table = document.createElement("table");
            table.style.width = "100%";
            table.style.borderCollapse = "collapse";
            table.style.marginTop = "10px";

            const thead = document.createElement("thead");
            const headerRow = document.createElement("tr");
            columns.forEach(col => {
                const th = document.createElement("th");
                th.textContent = col;
                th.style.border = "1px solid #ddd";
                th.style.padding = "8px";
                th.style.backgroundColor = "#f2f2f2";
                th.style.textAlign = "left";
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement("tbody");
            dataRows.forEach(rowData => {
                const tr = document.createElement("tr");
                rowData.forEach(cellData => {
                    const td = document.createElement("td");
                    td.textContent = cellData ?? "";
                    td.style.border = "1px solid #ddd";
                    td.style.padding = "8px";
                    td.style.textAlign = "left";
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
            table.appendChild(tbody);
            resultsDiv.appendChild(table);

            // --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é ---
            const internalQueryName = `–∑–∞–ø–∏—Ç "${queryName}"`;
            const menuDisplayName = `*${internalQueryName}`;

            const schema = columns.map(col => ({
                title: col,
                type: "–¢–µ–∫—Å—Ç",
                primaryKey: false,
                comment: ""
            }));

            const queryResultTable = {
                name: internalQueryName,
                schema: schema,
                data: dataRows
            };

            const existingIndex = queries.results.findIndex(t => t.name === internalQueryName);
            if (existingIndex !== -1) {
                queries.results[existingIndex] = queryResultTable;
                const dataMenu = document.getElementById("data-menu");
                const existingItem = Array.from(dataMenu.children).find(item => item.textContent === menuDisplayName);
                if (existingItem) existingItem.remove();
            } else {
                queries.results.push(queryResultTable);
            }

            addTableToMenu(menuDisplayName);
        } else {
            resultsDiv.innerHTML = "<p style='color: green;'>–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ, –∞–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, INSERT, UPDATE, DELETE).</p>";
        }
    } catch (e) {
        resultsDiv.innerHTML = `<p style='color: red;'>–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: ${e.message}</p>`;
    }
}

    
    
    function saveOwnSQL() {
        const sql = document.getElementById("ownSqlInput").value.trim();
        const name = document.getElementById("ownSQLName")?.value.trim();
    
        if (!sql) {
            Message("SQL-–∑–∞–ø–∏—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            return;
        }
    
        if (!name) {
            Message("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∑–∞–ø–∏—Ç—É —É –ø–æ–ª–µ ¬´–ù–∞–∑–≤–∞ –∑–∞–ø–∏—Ç—É¬ª.");
            return;
        }
    
        // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –∑–∞–ø–∏—Ç—É
        const query = {
            name: name,
            sql: sql,
            config: null,
            joins: null
        };
    
        // –®—É–∫–∞—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –∑–∞–ø–∏—Ç
        const existingIndex = queries.definitions.findIndex(q => q.name === name);
    
        if (existingIndex !== -1) {
            if (!confirm("–ó–∞–ø–∏—Ç –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –≤–∂–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏?")) return;
            queries.definitions[existingIndex] = query;
        } else {
            queries.definitions.push(query);
        }
    
        saveDatabase();
        Message("–ó–∞–ø–∏—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
    }
    

    function showAboutModal() {
        const modal = document.getElementById("aboutModal");
        modal.style.display = "flex";
    }
    function closeAboutModal() {
        const modal = document.getElementById("aboutModal");
        modal.style.display = "none";
    }
//
    function updateSchemaTableHeader(hasForeign) {
        const thead = document.getElementById("schemaHead");
        thead.innerHTML = ""; // –æ—á–∏—Å—Ç–∏—Ç–∏

        const headerRow = document.createElement("tr");
        headerRow.innerHTML = `
        <th>üîë</th>
        <th>–ù–∞–∑–≤–∞ –ø–æ–ª—è</th>
        <th>–¢–∏–ø</th>
        <th>üìå</th>
        ${hasForeign ? "<th>–¢–∞–±–ª–∏—Ü—è üìå</th><th>–ü–æ–ª–µ üìå</th>" : ""}
        <th>–ö–æ–º–µ–Ω—Ç–∞—Ä</th>
        <th>‚úÇ</th>
        `;
        thead.appendChild(headerRow);
    }




  function editSelectedTableSchema() {
    if (!selectedTableNameForEdit) {
        Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
        return;
    }
    
    const tableToEdit = database.tables.find(t => t.name === selectedTableNameForEdit);
    if (!tableToEdit) {
        Message("–í–∏–±—Ä–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        return;
    }
    console.log("Edit schema=", selectedTableNameForEdit)
    table.schema = tableToEdit.schema || [];
    document.getElementById("savedTablesModal").style.display = "none";
    const tbody = document.getElementById("schemaBody");
    tbody.innerHTML = "";
    document.getElementById("tableName").value = tableToEdit.name;
    tableList = database.tables.map(t => t.name); // –¥–ª—è FK
    const tableOptions = tableList.map(t => `<option value="${t}">${t}</option>`).join("");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –æ–¥—Ä–∞–∑—É
    let rows = [];

    let hasForeign = table.schema.some(f => f.foreignKey);
    console.log("hasForeign=", hasForeign)
    updateSchemaTableHeader(hasForeign);
    table.schema.forEach(field => {
        const row = document.createElement("tr");

        const isPrimary = field.primaryKey ? 'checked' : '';
        const isForeign = field.foreignKey ? 'checked' : '';
        const selectedType = field.type || "–¢–µ–∫—Å—Ç";
        const fkTable = field.refTable || "";
        const fkField = field.refField || "";
        const comment = field.comment || "";

        const tableSelectHtml = `
            <select onchange="updateFieldOptions(this)" ${isForeign ? "" : "disabled"}>
                <option value="">(—Ç–∞–±–ª–∏—Ü—è)</option>
                ${tableOptions.replace(`value="${fkTable}"`, `value="${fkTable}" selected`)}
            </select>
        `;

        const fkFieldOptions = getFieldsForTable(fkTable).map(f =>
            `<option value="${f}" ${f === fkField ? "selected" : ""}>${f}</option>`).join("");

        const fieldSelectHtml = `
            <select ${isForeign ? "" : "disabled"}>
                <option value="">(–ø–æ–ª–µ)</option>
                ${fkFieldOptions}
            </select>
        `;

        // –ó–±—ñ—Ä —É—Å—ñ—Ö –∫–æ–º—ñ—Ä–æ–∫
        const cells = [
            `<td style="text-align:center;"><input type="checkbox" onchange="handlePrimaryKey(this)" ${isPrimary}></td>`,
            `<td contenteditable="true">${field.title}</td>`,
            `<td><select>
                <option ${selectedType === "–¢–µ–∫—Å—Ç" ? "selected" : ""}>–¢–µ–∫—Å—Ç</option>
                <option ${selectedType === "–¶—ñ–ª–µ —á–∏—Å–ª–æ" ? "selected" : ""}>–¶—ñ–ª–µ —á–∏—Å–ª–æ</option>
                <option ${selectedType === "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ" ? "selected" : ""}>–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ</option>
                <option ${selectedType === "–¢–∞–∫/–ù—ñ" ? "selected" : ""}>–¢–∞–∫/–ù—ñ</option>
                <option ${selectedType === "–î–∞—Ç–∞" ? "selected" : ""}>–î–∞—Ç–∞</option>
            </select></td>`,
            `<td style="text-align:center;"><input type="checkbox" onchange="handleForeignKey(this)" ${isForeign}></td>`,
        ];

        // FK —Å—Ç–æ–≤–ø—Ü—ñ
        if (hasForeign) {
            cells.push(`<td>${tableSelectHtml}</td>`);
            cells.push(`<td>${fieldSelectHtml}</td>`);
        }

        cells.push(`<td contenteditable="true">${comment}</td>`);
        cells.push(`<td style="text-align:center;"><button onclick="deleteSchemaRow(this)">‚ùå</button></td>`);

        row.innerHTML = cells.join("");
        rows.push(row);
    });

    // –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –∑—ñ–±—Ä–∞–Ω—ñ —Ä—è–¥–∫–∏
    rows.forEach(r => tbody.appendChild(r));

    document.getElementById("makeTable").innerText = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ`;
    document.getElementById("modal").style.display = "flex";
}

    

    
    function printReportPreview() {
        const previewContent = document.getElementById("reportPreviewCanvas");
    
        if (!previewContent) {
            alert("–ù–µ–º–∞—î –∑–≤—ñ—Ç—É –¥–ª—è –¥—Ä—É–∫—É.");
            return;
        }
    
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –¥—Ä—É–∫—É
        const printWindow = window.open('', '_blank');
    
        // –§–æ—Ä–º—É—î–º–æ –≤–º—ñ—Å—Ç
        printWindow.document.write(`
            <html>
            <head>
                <title>–î—Ä—É–∫ –∑–≤—ñ—Ç—É</title>
                <style>
                    body { margin: 0; font-family: Arial, sans-serif; }
                    #reportPreviewCanvas {
                        position: relative;
                        width: 100%;
                        height: auto;
                        border: none;
                    }
                    .report-label, .report-field {
                        position: absolute;
                        box-sizing: border-box;
                        border: 1px solid #ccc;
                        padding: 2px;
                    }
                    .field-text {
                        font-style: italic;
                    }
                </style>
            </head>
            <body>
                <div id="reportPreviewCanvas">
                    ${previewContent.innerHTML}
                </div>
                <script>
                    window.onload = function() {
                        window.print();
                        window.onafterprint = () => window.close();
                    };
                </script>
            </body>
            </html>
        `);
    
        printWindow.document.close();
    }
 //
 function openTableByName(name) {
     console.log("edit=",database.tables[name])
     selectedTableNameForEdit = name
     openSelectedTable()
     }
 //
 function editQueryByName(name) { 
    console.log("edit=",name);
    selectedQueryName = name;
    editSelectedQuery()
 }
 function editReportByName(name) { 
    console.log("edit=",name);
    selectedReportName = name;
    editSelectedReport()
 }
 function editFormByName(name) { 
    console.log("edit=",name);
    selectedFormName = name;
    editSelectedForm()
 }
//
/**
 * –ï–∫—Å–ø–æ—Ä—Ç—É—î –≤–º—ñ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ —É CSV-—Ñ–∞–π–ª —ñ–∑ –Ω–∞–∑–≤–æ—é "<–Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ>.csv".
 * 
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ:
 * {
 *   name: "Teachers",            // –ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   schema: [...],              // –ú–∞—Å–∏–≤ –ø–æ–ª—ñ–≤ (—ñ–∑ –Ω–∞–∑–≤–æ—é, —Ç–∏–ø–æ–º, —Ç–æ—â–æ)
 *   data: [[1, "–Ü–º'—è"], ...]    // –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö
 * }
 *
 * CSV-—Ñ–∞–π–ª –º–∞—Ç–∏–º–µ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–∞–ª—ñ ‚Äî –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ ";"
 * –£—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –æ–±–≥–æ—Ä–Ω—É—Ç—ñ –≤ –ª–∞–ø–∫–∏.
 */
function exportTableToCSV() {
    const tableName = selectedTableNameForEdit;
    console.log("CSV name=",tableName);   
    const table = database.tables.find(t => t.name === tableName);
    console.log("CSV table=",table)
    if (!table || !table.name || !table.schema || !table.data) {
        console.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.");
        return;
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –∑—ñ —Å—Ö–µ–º–∏
    const headers = table.schema.map(field => field.title);

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ CSV, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    const csvRows = [];
    csvRows.push(headers.join(";")); // –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏

    // –î–æ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
    for (const row of table.data) {
        const csvRow = row.map(value => {
            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –∞–±–æ –ª–∞–ø–∫–∏ ‚Äî –æ–±–≥–æ—Ä–Ω—É—Ç–∏ –≤ –ª–∞–ø–∫–∏ —ñ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –ª–∞–ø–∫–∏
            if (typeof value === "string") {
                const escaped = value.replace(/"/g, '""');
                return `"${escaped}"`;
            }
            return value;
        });
        csvRows.push(csvRow.join(";"));
    }

    // –û–±‚Äô—î–¥–Ω–∞—Ç–∏ —Ä—è–¥–∫–∏ –≤ —Ç–µ–∫—Å—Ç
    const csvContent = csvRows.join("\n");

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ blob —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const fileName = `${table.name}.csv`;

    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.style.display = "none";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}




 // –ü–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
 function updateQuickAccessPanel(tables, qqueries, reports, forms) {
      const panel = document.getElementById("quickAccessPanel");
      const sections = [
          {
            id: "quickTables",
            iconsId: "quickTablesIcons",
            items: tables,
            icon: "üìÑ",
            image: "img/table-icon.png",
            openFunc: openTableByName
          },
          {
            id: "quickQueries",
            iconsId: "quickQueriesIcons",
            items: qqueries,
            icon: "üîç",
            image: "img/query-icon.png",
            openFunc: editQueryByName
          },
          {
            id: "quickReports",
            iconsId: "quickReportsIcons",
            items: reports,
            icon: "üìù",
            image: "img/report-icon.png",
            openFunc: editReportByName
          },
          {
            id: "quickForms",
            iconsId: "quickFormsIcons",
            items: forms,
            icon: "üìë",
            image: "img/form-icon.png",
            openFunc: editFormByName
          }
        ];
        
    
      let hasAny = false;
    
      sections.forEach(section => {
        const container = document.getElementById(section.id);
        const iconsContainer = document.getElementById(section.iconsId);
        iconsContainer.innerHTML = "";
    
        if (section.items && section.items.length) {
          container.style.display = "block";
          hasAny = true;
          section.items.forEach(name => {
            
            if (section.id==="quickTables") {
                name = database.tables[name].name
            }
            if (section.id==="quickQueries") {
                name = queries.definitions[name].name
            }       
            const el = document.createElement("div");
            el.className = "quick-icon";
            el.innerHTML = `
            <div class='icon'>
            <img src="${section.image}" alt="icon" />
            </div>
            <div>${name}</div>`;
            el.onclick = () => section.openFunc(name);
            iconsContainer.appendChild(el);
          });
        } else {
          container.style.display = "none";
        }
       
      });
    
      panel.style.display = hasAny ? "flex" : "none";
      document.getElementById("startPrompt").style.display = "none";
      document.getElementById("logo-image").style.display = "none";
      document.getElementById("title-image").style.display = "block"; 
    }
    
    function openMainMenu() {
      document.getElementById("mainMenuModal").style.display = "flex";
    }

    function closeMainMenu() {
      document.getElementById("mainMenuModal").style.display = "none";
    }
    
    function closeAllModals() {
      document.querySelectorAll(".modal").forEach(modal => {
        modal.style.display = "none";
      });
    }
    
    function filesMenu() {
      closeAllModals();
      document.getElementById("files_Modal").style.display = "flex";
    }
    
    function createMenu() {
      closeAllModals();
      document.getElementById("create_Modal").style.display = "flex";
    }
    
    function dataMenu() {
      closeAllModals();
      document.getElementById("data_Modal").style.display = "flex";
      document.getElementById("data_Modal").style.display = "flex";
    }
    
    function tablesMenu() {
      closeAllModals();
      document.getElementById("tables_Modal").style.display = "flex";
    }
    
    function queriesMenu() {
      closeAllModals();
      document.getElementById("queries_Modal").style.display = "flex";
    }
    
    function reportsMenu() {
      closeAllModals();
      document.getElementById("reports_Modal").style.display = "flex";
    }
    
    function formsMenu() {
      closeAllModals();
      document.getElementById("forms_Modal").style.display = "flex";
    }
    
    function helpMenu() {
      closeAllModals();
      document.getElementById("help_Modal").style.display = "flex";
    }
    
window.addEventListener("click", function(event) {
  if (event.target.classList.contains("modal")) {
    event.target.style.display = "none";
  }
});

function showData() {
        const dropdown = document.getElementById("data-menu");
        if (!dropdown) {
            console.error("–ï–ª–µ–º–µ–Ω—Ç #data-menu –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
    
        // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—å –∑ <a> –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ dropdown
        const tableNames = [...dropdown.querySelectorAll("a")]
            .map(a => a.textContent.trim())
            .filter(name => name);
    
        if (tableNames.length === 0) {
            Message("–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            return;
        }
    
        const listEl = document.getElementById("tableListInModal");
        listEl.innerHTML = "";
        listEl.style.listStyle = "none";
        selectedTableNameForEdit = null;
    
        tableNames.forEach(name => {
            const li = document.createElement("li");
            li.textContent = name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.tableName = name;
    
            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedTableNameForEdit = li.dataset.tableName;
            });
    
            listEl.appendChild(li);
        });
    
        document.getElementById("dataModal").style.display = "flex";
    }
    function confirmOpenSelectedTable() {
        if (!selectedTableNameForEdit) {
            Message("–û–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –∑—ñ —Å–ø–∏—Å–∫—É.");
            return;
        }
        document.getElementById("dataModal").style.display = "none";
        openSelectedTable(); // –¢–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
    }
    


