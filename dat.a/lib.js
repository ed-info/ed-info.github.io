
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    let database = {
        fileName: "",
        tables: [], // –ö–æ–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚Äî –æ–±'—î–∫—Ç –∑ name —Ç–∞ schema
        reports: [], // üÜï –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤
        relations: [], // üÜï–º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤'—è–∑–∫—ñ–≤
        forms: [] // ‚¨ÖÔ∏è –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º

    };

    // New structure for query definitions and results
    let queries = {
        definitions: [], // Stores query configurations
        results: [] // Stores query result tables (virtual tables)
    };

    let SQL = null;
    let db = null;
    let dbToDelete = null;
    let selectedReportName = null;
    let currentEditTable = null;
    let selectedCell = null;
    let selectedQueryName = null; // To keep track of the selected query in the saved queries dialog
    let selectedTableNameForEdit = null; // To keep track of the selected table in the saved tables dialog for opening
    let selectedTableNameForDelete = null; // To keep track of the selected table in the saved tables dialog for deletion
    let selectedDbFile = null;
    let newDbFile = false; // –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    let editingTableName = "unnamed";
    let autoIncrement = null;
    let isNewTable = true;
    let isNewRecord = false;    
    let sqlQuery = null;
    let queryName = null;
    let constructorMode = null;
    let screenGridVisible = false; 
    let screenCanvas = null; 
    
    closeAllModals();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SQL.js
    initSqlJs({
        locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${file}`
    }).then(SQLLib => {
        SQL = SQLLib;
        //loadDatabase();
    });
   
function getCurrentTableNames() {
      return Object.keys(database.tables || {});
    }
function getCurrentQueryNames() {      
      return Object.keys(queries.definitions || {});
    }
function getCurrentReportNames() {
      return (database.reports || []).map(r => r.name);
    }
function getCurrentFormNames() {
      return (database.forms || []).map(f => f.name);
    }
       
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ë–î –∑ localStorage –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó
    function loadDatabase() {
        console.log("loadDatabase")        
        const name = database.fileName || "my_database";
        const saved = localStorage.getItem(name + ".db-data");
        console.log("name =",name )
        
        if (saved) {
            const uIntArray = Uint8Array.from(atob(saved), c => c.charCodeAt(0));
            
            db = new SQL.Database(uIntArray);
            console.log("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: ",db);            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –±–∞–∑–∞
            const savedQueries = localStorage.getItem(name + ".queries-data");
            if (savedQueries) {
                queries.definitions = JSON.parse(savedQueries);
                console.log("–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ",queries.definitions);
                
            } else {
                queries.definitions = [];
            }
            
            const savedQueryResults = localStorage.getItem(name + ".query-results");
            if (savedQueryResults) {
                queries.results = JSON.parse(savedQueryResults);
                console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", queries.results);
            } else {
                queries.results = [];
            }

            const savedReports = localStorage.getItem(name + ".reports-data");
            if (savedReports) {
                database.reports = JSON.parse(savedReports);
                console.log("–ó–≤—ñ—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ",database.reports);               
            } else {
                database.reports = [];
            }
            
            const savedForms = localStorage.getItem(name + ".forms-data");
            if (savedForms) {
                database.forms = JSON.parse(savedForms);
                console.log("–§–æ—Ä–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ",database.forms);
            } else {
                database.forms = [];
            }
            
            const savedRelations = localStorage.getItem(name + ".relations-data");
            if (savedRelations) {
                database.relations = JSON.parse(savedRelations);
                console.log("–ó–≤'—è–∑–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ", database.relations);
            } else {
                database.relations = [];
            }

        } else {
            db = new SQL.Database(); // —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ë–î, –∞–ª–µ –±–µ–∑ –∑–∞–ø–∏—Ç—ñ–≤
            queries.definitions = []; // –æ–±–Ω—É–ª—è—î–º–æ, –±–æ –±–∞–∑–∏ –Ω–µ–º–∞—î
            database.reports = [];
            database.forms = [];
            console.log("–ù–æ–≤–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞");
        }
        newDbFile = false;
        queries.results = []; // –ó–∞–≤–∂–¥–∏ –æ—á–∏—â–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        document.getElementById("import-table-link").style.display = "block";
        updateMainTitle();
        updateQuickAccessPanel(
                  getCurrentTableNames(),
                  getCurrentQueryNames(),
                  getCurrentReportNames(),
                  getCurrentFormNames()
                );                
                    
    }


    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ë–î —É localStorage
    function saveDatabase() {
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö: ", database.fileName)        
        if (!db) return;
        const data = db.export();
        const base64 = btoa(String.fromCharCode(...data));
        localStorage.setItem(database.fileName + ".db-data", base64);       
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ: ",database.tables)
        localStorage.setItem(database.fileName + ".tables-data", JSON.stringify(database.tables));
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ —Ç–∞ —ó—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏: ",queries.definitions)
        localStorage.setItem(database.fileName + ".queries-data", JSON.stringify(queries.definitions));
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤: ",queries.results)
        localStorage.setItem(database.fileName + ".query-results", JSON.stringify(queries.results || []));


        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç–∏
        localStorage.setItem(database.fileName + ".reports-data", JSON.stringify(database.reports || []));
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç–∏: ",database.reports)
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ä–º–∏
        localStorage.setItem(database.fileName + ".forms-data", JSON.stringify(database.forms || []));
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤'—è–∑–∫–∏
        console.log("–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤'—è–∑–∫–∏: ",database.relations)
        localStorage.setItem(database.fileName + ".relations-data", JSON.stringify(database.relations || []));
        
        console.log("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É localStorage");
        document.getElementById("import-table-link").style.display = "block";
        updateQuickAccessPanel(
                  getCurrentTableNames(),
                  getCurrentQueryNames(),
                  getCurrentReportNames(),
                  getCurrentFormNames()
                );                
                    
    }
    //
/**
 * –æ—á–∏—â—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö, –º–µ–Ω—é –¥–∞–Ω–∏—Ö —Ç–∞ –ø–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
 **/
function clearDB() {
    // –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
    database.fileName = "";
    database.tables =  [];
    database.reports = [];
    database.relations = [];
    database.forms =  [];            
    queries.definitions = [];
    queries.results = [];
            
    const dataMenu = document.getElementById("data-menu");
    dataMenu.innerHTML = "";
  
    updateQuickAccessPanel([], [], [], []);   
} 
 
/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É, —Ç–∞–±–ª–∏—Ü—å —Ç–∞ –ø–æ–ª—ñ–≤
 **/
 function checkName(name) {
    
    name = name.trim();
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    if (name.length < 2 || name.length > 32) {
        Message("–ù–∞–∑–≤–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 32 —Å–∏–º–≤–æ–ª—ñ–≤.");
        return false;
    }
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫—ñ–≤
    if (/\s/.test(name)) {
        Message("–ù–∞–∑–≤–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫—ñ–≤ - –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–∏–º–≤–æ–ª '_'.");
        return false;
    }
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—à–æ–≥–æ —Å–∏–º–≤–æ–ª—É ‚Äî –ª—ñ—Ç–µ—Ä–∞ (–ª–∞—Ç–∏–Ω–∏—Ü—è –∞–±–æ –∫–∏—Ä–∏–ª–∏—Ü—è)
    const firstCharPattern = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]$/;
    if (!firstCharPattern.test(name[0])) {
        Message("–ù–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ª—ñ—Ç–µ—Ä–∏ (–ª–∞—Ç–∏–Ω—Å—å–∫–æ—ó –∞–±–æ –∫–∏—Ä–∏–ª–∏—á–Ω–æ—ó).");
        return false;
    }
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏
    const allowedPattern = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë0-9\-_']+$/;
    if (!allowedPattern.test(name)) {
        Message("–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, –¥–µ—Ñ—ñ—Å (-), –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (_), –∞–ø–æ—Å—Ç—Ä–æ—Ñ (').");
        return false;
    }
    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    const forbiddenPattern = /[?"\/\\<>*\|:"]/;
    if (forbiddenPattern.test(name)) {
        Message("–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏: ? \" / \\ < > * | :");
        return false;
    }

    return true;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ —É —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ
 **/
function checkFieldName() {
    const rows = document.querySelectorAll("#schemaBody tr");
    let allValid = true;

    rows.forEach(row => {
        const nameCell = row.cells[1];
        const fieldName = nameCell.innerText.trim();

        // –∑–Ω—ñ–º–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        nameCell.style.backgroundColor = "";

        if (fieldName) {
            if (!checkName(fieldName)) {
                // –ø–æ–≥–∞–Ω–µ —ñ–º'—è ‚Üí –ø—ñ–¥—Å–≤—ñ—Ç–∏—Ç–∏ –∫–æ–º—ñ—Ä–∫—É
                nameCell.style.backgroundColor = "#ffcccc"; // —Ä–æ–∂–µ–≤–æ-—á–µ—Ä–≤–æ–Ω–∏–π
                allValid = false;
            }
        }
    });

    return allValid;
}

//

function showStorageDialog() {
        const listEl = document.getElementById("storageList");
        listEl.innerHTML = "";
        selectedDbFile = null;

        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.endsWith(".db-data")) {
                const fileName = key.replace(".db-data", "");
                const li = document.createElement("li");
                li.textContent = fileName;
                li.style.padding = "8px";
                li.style.cursor = "pointer";

                li.addEventListener("click", () => {
                    // –∑–Ω—è—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
                    [...listEl.children].forEach(el => el.style.background = "");
                    li.style.background = "#d0e0ff";
                    selectedDbFile = fileName;
                });

                listEl.appendChild(li);
            }
        }

        document.getElementById("storageModal").style.display = "flex";
    }

    function closeStorageDialog() {
        document.getElementById("storageModal").style.display = "none";
    }

    function loadSelectedDb() {
        if (!selectedDbFile) {
            Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
            return;

        }
        
        const saved = localStorage.getItem(selectedDbFile + ".db-data");
        
        if (!saved) {
            Message("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        const uIntArray = Uint8Array.from(atob(saved), c => c.charCodeAt(0));
        db = new SQL.Database(uIntArray);

        // –û—á–∏—Å—Ç–∏—Ç–∏ database, queries —Ç–∞ –º–µ–Ω—é
        clearDB();

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
        const fullDatabase = JSON.parse(localStorage.getItem(selectedDbFile + ".tables-data"));
        console.log("fullDatabase=",fullDatabase)
        queries.definitions = [];
        if (fullDatabase) {
            database.tables = fullDatabase;
        
            // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ SQLite, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
            database.tables.forEach(t => {
                try {
                    db.exec(`SELECT * FROM "${t.name}" LIMIT 1`);
                } catch (e) {
                    console.warn(`–¢–∞–±–ª–∏—Ü—è "${t.name}" –≤—ñ–¥—Å—É—Ç–Ω—è –≤ SQLite, —Å—Ç–≤–æ—Ä—é—î–º–æ...`);
                    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤—Ä—É—á–Ω—É –∑ —ó—ó schema
                    const fields = t.schema.map(field => {
                        let type = field.type.toUpperCase();
                        if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
                        else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
                        else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
                        else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
                        else if (type === "–î–ê–¢–ê") type = "TEXT";
        
                        let def = `"${field.title}" ${type}`;
                        if (field.primaryKey) def += " PRIMARY KEY";
                        return def;
                    });
        
                    // –î–æ–¥–∞—Ç–∏ FOREIGN KEY (—è–∫—â–æ —î)
                    const foreignKeys = t.schema
                        .filter(f => f.foreignKey && f.refTable && f.refField)
                        .map(f => `FOREIGN KEY ("${f.title}") REFERENCES "${f.refTable}"("${f.refField}")`);
        
                    const fullFields = [...fields, ...foreignKeys].join(", ");
                    db.run(`CREATE TABLE "${t.name}" (${fullFields});`);
                }
        
                // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
                const res = db.exec(`SELECT * FROM "${t.name}"`);
                t.data = res.length ? res[0].values : [];
            });
        } else {
            Message("–§–∞–π–ª –¥–∞–Ω–∏—Ö –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—å.");
            return;
        }
        

        // Load 
        database.fileName = selectedDbFile;
        loadDatabase() 

        // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—Ç–∏ –∑–≤‚Äô—è–∑–∫–∏ –∑ foreign key
        database.relations = [];
        
        database.tables.forEach(table => {
            table.schema.forEach(field => {
                if (field.foreignKey && field.refTable && field.refField) {
                    database.relations.push({
                        fromTable: table.name,
                        fromField: field.title,
                        toTable: field.refTable,
                        toField: field.refField,
                        readonly: true, // üëà –¶–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
                    });
                }
            });
        });

        database.tables.forEach(t => addTableToMenu(t.name)); // üîß –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é "–î–∞–Ω—ñ"
        Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö '" + selectedDbFile + "' –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
        database.fileName = selectedDbFile;
        closeStorageDialog();
        updateMainTitle();
    }

/**
 *  –†–æ–∑—à–∏—Ä–µ–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∏–ø—ñ–≤ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–æ–¥—É (select, input, contentEditable, –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏) *  
**/
function advDataInput(container, cellData, col, rowData, index, isReadOnly) {
    container.innerHTML = "";
    let createdEl = null;

    const typeStr = String(col?.type || "").toLowerCase();
    const isPK = !!col?.primaryKey;
    const isPKAuto = isPK && typeStr === "—Ü—ñ–ª–µ —á–∏—Å–ª–æ" && col?.autoInc === true;
    const isForeignKey = !!(col && col.foreignKey && col.refTable && col.refField);

    // ===== —Ö–µ–ª–ø–µ—Ä–∏ –¥–ª—è caret —É contentEditable =====
    const getCaretOffset = (el) => {
        const sel = window.getSelection();
        if (!sel || sel.rangeCount === 0) return 0;
        const range = sel.getRangeAt(0);
        const preRange = range.cloneRange();
        preRange.selectNodeContents(el);
        preRange.setEnd(range.endContainer, range.endOffset);
        return preRange.toString().length;
    };

    const setCaretOffset = (el, offset) => {
        offset = Math.max(0, Math.min(offset, el.innerText.length));
        const range = document.createRange();
        const sel = window.getSelection();
        let current = 0;

        // –∑–Ω–∞—Ö–æ–¥–∏–º–æ textNode –¥–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –æ—Ñ—Å–µ—Ç—É
        const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null);
        let node = walker.nextNode();
        while (node) {
            const len = node.nodeValue.length;
            if (current + len >= offset) {
                range.setStart(node, offset - current);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return;
            }
            current += len;
            node = walker.nextNode();
        }

        // —è–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤ ‚Äî —Å—Ç–∞–≤–∏–º–æ –≤ –∫—ñ–Ω–µ—Ü—å –µ–ª–µ–º–µ–Ω—Ç–∞
        range.selectNodeContents(el);
        range.collapse(false);
        sel.removeAllRanges();
        sel.addRange(range);
    };

    // —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–∞–Ω—ñ—Ç–∞–π–∑–µ—Ä –¥–ª—è —Ç–∏–ø—ñ–≤
    const sanitizeByType = (s, t) => {
        s = (s ?? "").toString().replace(/\r?\n/g, ""); // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–∏—à–µ –ø–µ—Ä–µ–Ω–æ—Å —Ä—è–¥–∫–∞
        t = String(t || "").toLowerCase();
    
        if (t === "—Ç–µ–∫—Å—Ç") {
            if (s.length > 64) s = s.slice(0, 64);
            return s;
        }
    
        if (t === "—Ü—ñ–ª–µ —á–∏—Å–ª–æ") {
            s = s.replace(/[^\d-]/g, "").replace(/(?!^)-/g, "");
            if (s.startsWith("--")) s = "-" + s.slice(2);
            return s;
        }
    
        if (t === "–¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ") {
            s = s.replace(/[^\d.\-]/g, "")
                 .replace(/(?!^)-/g, "")
                 .replace(/(\..*)\./g, "$1");
            return s;
        }
    
        return s;
    };
    

    // ===== FOREIGN KEY =====
    if (isForeignKey) {
        const select = document.createElement("select");

        const emptyOption = document.createElement("option");
        emptyOption.value = "empty";
        emptyOption.textContent = "(–ø—É—Å—Ç–æ)";
        select.appendChild(emptyOption);

        const refTableObj = database.tables.find(t => t.name === col.refTable);
        if (refTableObj) {
            // —ñ–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏, —è–∫–∞ —î –∑–æ–≤–Ω—ñ—à–Ω—ñ–º –∫–ª—é—á–µ–º
            const refIdIndex = refTableObj.schema.findIndex(f => f.title === col.refField);
        
            if (refIdIndex !== -1) {
                refTableObj.data.forEach(refRow => {
                    const option = document.createElement("option");
                    option.value = refRow[refIdIndex];        // –∑–Ω–∞—á–µ–Ω–Ω—è FK
                    option.textContent = refRow[refIdIndex];  // —Ç–µ–∂ –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ
                    select.appendChild(option);
                });
        
                // –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É select
                select.value = (cellData === null || cellData === undefined || cellData === "")
                    ? "empty"
                    : String(cellData);
            }
        }
        

        select.disabled = !!isReadOnly;
        container.appendChild(select);
        createdEl = select;

        select.addEventListener("change", () => {
            rowData[index] = select.value === "empty" ? null : select.value;
        });
    }
    // ===== BOOLEAN =====
    else if (typeStr === "—Ç–∞–∫/–Ω—ñ" || typeStr === "boolean") {
        const select = document.createElement("select");
        select.innerHTML = `<option value="1">–¢–∞–∫</option><option value="0">–ù—ñ</option>`;
        select.value = (cellData == 1) ? "1" : "0";
        select.disabled = !!isReadOnly;
        container.appendChild(select);
        createdEl = select;

        select.addEventListener("change", () => {
            rowData[index] = Number(select.value);
        });
    }
    // ===== DATE =====
    else if (typeStr === "–¥–∞—Ç–∞" || typeStr === "date") {
        const input = document.createElement("input");
        input.type = "date";
        const asStr = typeof cellData === "string" ? cellData : "";
        const value = /^\d{4}-\d{2}-\d{2}$/.test(asStr) ? asStr : new Date().toISOString().split("T")[0];
        input.value = value;
        input.disabled = !!isReadOnly;
        container.appendChild(input);
        createdEl = input;

        const isValidDate = dateStr => {
            if (!/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) return false;
            const [y, m, d] = dateStr.split("-").map(Number);
            if (m < 1 || m > 12) return false;
            const daysInMonth = [
                31, (y % 4 === 0 && y % 100 !== 0) || (y % 400 === 0) ? 29 : 28,
                31, 30, 31, 30, 31, 31, 30, 31, 30, 31
            ];
            return d >= 1 && d <= daysInMonth[m - 1];
        };

        const checkDate = () => {
            if (isValidDate(input.value)) {
                input.style.backgroundColor = "";
                input.style.color = "";
            } else {
                input.style.backgroundColor = "red";
                input.style.color = "white";
            }
            rowData[index] = input.value;
        };

        input.addEventListener("input", checkDate);
        checkDate();
    }
    // ===== TEXT / NUMBER (contentEditable) =====
    else { 
            const editable = !isReadOnly && !isPKAuto;
            let displayValue = sanitizeByType(cellData ?? "", typeStr);
            container.textContent = displayValue;
            container.contentEditable = editable ? "true" : "false";
            container.spellcheck = false;
            createdEl = container;
        
            if (editable) {
                container.addEventListener("keydown", (e) => {
                    if (e.key === "Enter") {
                        e.preventDefault();
                        const currentRow = container.closest("tr");
                        const nextRow = currentRow?.nextElementSibling;
                        const colIdx = Array.from(currentRow.children).indexOf(container);
                        if (nextRow) {
                            if (typeof highlightRow === "function") highlightRow(nextRow);
                            const nextCell = nextRow.children[colIdx];
                            if (nextCell) nextCell.focus();
                        } else {
                            container.focus();
                        }
                    }
                });
        
                // ===== paste =====
                container.addEventListener("paste", (e) => {
                    e.preventDefault();
                    const text = (e.clipboardData || window.clipboardData).getData("text") || "";
                    const clean = text.replace(/\r?\n/g, "").replace(/\s+$/g, ""); // –æ–±—Ä—ñ–∑–∞—î–º–æ –∫—ñ–Ω—Ü–µ–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ
                    document.execCommand("insertText", false, clean);
                });
        
                // ===== input =====
                container.addEventListener("input", () => {
                    const oldText = container.innerText;
                    const caret = getCaretOffset(container);
                    let newText = oldText;
                    
                    if (typeStr === "—Ü—ñ–ª–µ —á–∏—Å–ª–æ" || typeStr === "–¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ") {
                     newText = sanitizeByType(oldText, typeStr);
                    }
        
                    if (newText !== oldText) {
                        container.innerText = newText;
                        setCaretOffset(container, Math.min(caret, newText.length));
                    }
        
                    if (typeStr === "—Ü—ñ–ª–µ —á–∏—Å–ª–æ" || typeStr === "–¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ") {
                        const n = newText === "" ? null : Number(newText);
                        rowData[index] = (n === null || Number.isNaN(n)) ? null : n;
                    } else {
                        rowData[index] = newText;
                    }
                });
            }
        }
        
    // –ö–æ–ø—ñ—é—î–º–æ dataset —É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π control (–¥–ª—è —Ñ–æ—Ä–º–∏/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
    if (createdEl && createdEl !== container) {
        if (container.dataset.tableName) createdEl.dataset.tableName = container.dataset.tableName;
        if (container.dataset.fieldName) createdEl.dataset.fieldName = container.dataset.fieldName;
        if (container.dataset.colIndex)  createdEl.dataset.colIndex  = container.dataset.colIndex;
    }

    return createdEl;
}




/**
 * –§—É–Ω–∫—Ü—ñ—è editData
 * ------------------
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Ç—É —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: tableName ‚Äî –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ –∑–∞–ø–∏—Ç—É (–∑ * –Ω–∞ –ø–æ—á–∞—Ç–∫—É).
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–∞–Ω–∏–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥—É.
 * –†–æ–±–æ—Ç–∞:
 * - –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—É –∑ SQLite –∞–±–æ –æ–±'—î–∫—Ç–∞ database.
 * - –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î —ó—ó, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ —Å—Ö–µ–º—ñ.
 * - –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
 **/
function editData(tableName) {
    let table = null; // –ü–æ—Ç–æ—á–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
    let isReadOnly = false; // –ß–∏ —î —Ç–∞–±–ª–∏—Ü—è –¥–æ—Å—Ç—É–ø–Ω–æ—é –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
    let columns = []; // –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
    let rows = []; // –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
    document.getElementById("savedTablesModal").style.display = "none";
    
    selectedCell = null;
    // –ü—Ä–∏–±—Ä–∞—Ç–∏ —É—Å—ñ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è (—è–∫—â–æ –±—É–ª–∏)
    const oldSelected = document.querySelector("tr.selected-row");
    if (oldSelected) oldSelected.classList.remove("selected-row");

    const isQueryTable = tableName.startsWith('*'); // –ß–∏ —î —Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø–∏—Ç—É
    console.log("Edit=", tableName);

    if (isQueryTable) {
        const originalQueryName = tableName.substring(1);
        table = queries.results.find(t => t.name === originalQueryName);
        isReadOnly = true;
        if (table) {
            columns = table.schema.map(col => col.title);
            rows = table.data;
        }
    } else {
        table = database.tables.find(t => t.name === tableName);
        isReadOnly = false;

        if (table) {
            try {
                const res = db.exec(`SELECT * FROM "${tableName}"`);
                rows = res.length ? res[0].values : [];
                columns = res.length ? res[0].columns : table.schema.map(col => col.title);
            } catch (e) {
                console.warn(`–¢–∞–±–ª–∏—Ü—è "${tableName}" –Ω–µ —ñ—Å–Ω—É—î –≤ SQLite. –°—Ç–≤–æ—Ä—é—î–º–æ...`);

                const fields = table.schema.map(field => {
                    let type = field.type.toUpperCase();
                    if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
                    else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
                    else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
                    else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
                    else if (type === "–î–ê–¢–ê") type = "TEXT";

                    let def = `"${field.title}" ${type}`;
                    if (field.primaryKey) def += " PRIMARY KEY";
                    return def;
                });

                const foreignKeys = table.schema
                    .filter(f => f.foreignKey && f.refTable && f.refField)
                    .map(f => `FOREIGN KEY (\"${f.title}\") REFERENCES \"${f.refTable}\"(\"${f.refField}\")`);

                const createSQL = `CREATE TABLE \"${tableName}\" (${[...fields, ...foreignKeys].join(", ")});`;
                try {
                    db.run("PRAGMA foreign_keys = ON;");
                    db.run(createSQL);
                    console.log("–¢–∞–±–ª–∏—Ü—é —Å—Ç–≤–æ—Ä–µ–Ω–æ:", createSQL);
                } catch (err) {
                    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é:", err);
                    Message(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ \"${tableName}\"`);
                    return;
                }

                table.data = table.data || [];
                table.data.forEach(record => {
                    const columns = table.schema.map(f => `\"${f.title}\"`);
                    const values = record.map(v => v === null ? "NULL" : `'${String(v).replace(/'/g, "''")}'`);
                    const insertSQL = `INSERT INTO \"${tableName}\" (${columns.join(", ")}) VALUES (${values.join(", ")});`;
                    try {
                        db.run(insertSQL);
                    } catch (e) {
                        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ:", insertSQL, e);
                        Message(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Å: ${e.message}`);
                    }
                });

                const res = db.exec(`SELECT * FROM \"${tableName}\"`);
                rows = res.length ? res[0].values : [];
                columns = res.length ? res[0].columns : table.schema.map(col => col.title);
            }

            table.data = rows;
            console.log("table.data=", table.data);
        }
    }

    if (!table) {
        Message("–¢–∞–±–ª–∏—Ü—é/–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
    }

    currentEditTable = table;
    document.getElementById("editTitle").innerText = isReadOnly ?
        `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—É ${table.name.slice(5)}` :
        `–ó–∞–ø–∏—Å–∏ —Ç–∞–±–ª–∏—Ü—ñ \"${table.name}\"`;

    const head = document.getElementById("editHead");
    const body = document.getElementById("editBody");
    head.innerHTML = "";
    body.innerHTML = "";
    selectedCell = null;

    const headerRow = document.createElement("tr");
    columns.forEach((colTitle, i) => {
        const th = document.createElement("th");
        th.textContent = colTitle;
        th.style.backgroundColor = "#eee";
        if (!isReadOnly && table.schema[i] && table.schema[i].primaryKey) th.classList.add("pk");
        headerRow.appendChild(th);
    });
    head.appendChild(headerRow);
    
    // –¥–æ–¥–∞—î–º–æ —Ä–µ—Å–∞–π–∑–∏–Ω–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞   
    (function setupColumnResizing() {
        // –∑–Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—é, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å thead (head)
        const tableEl = head.closest('table') || document.getElementById('editTable');
        if (!tableEl) return;

        // –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π colgroup (—è–∫—â–æ —î)
        const oldColgroup = tableEl.querySelector('colgroup');
        if (oldColgroup) oldColgroup.remove();

        // —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π colgroup –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é <col>
        const colgroup = document.createElement('colgroup');
        for (let i = 0; i < columns.length; i++) {
            const col = document.createElement('col');
            // –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É —à–∏—Ä–∏–Ω—É, —è–∫—â–æ —î
            const w = (currentEditTable && currentEditTable.columnWidths && currentEditTable.columnWidths[i]) ? currentEditTable.columnWidths[i] : null;
            if (w) col.style.width = w + 'px';
            colgroup.appendChild(col);
        }
        tableEl.insertBefore(colgroup, tableEl.querySelector('thead') || tableEl.firstChild);

        // —Ñ—ñ–∫—Å—É—î–º–æ layout, —â–æ–± –∑–º—ñ–Ω—é–≤–∞–≤—Å—è –ª–∏—à–µ targeted <col>
        tableEl.style.tableLayout = 'fixed';
        // –Ø–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —Ç–∞–±–ª–∏—Ü—è —Ä–æ–∑—Ç—è–≥—É–≤–∞–ª–∞—Å—å –Ω–∞ 100% ‚Äî –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω–∏
        if (!tableEl.style.width) tableEl.style.width = '100%';

        // —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–Ω–æ—Å—É —Ç–µ–∫—Å—Ç—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        tableEl.querySelectorAll('th, td').forEach(el => {
            el.style.overflow = 'hidden';
            el.style.textOverflow = 'ellipsis';
            el.style.whiteSpace = 'nowrap';
        });

        // –î–æ–¥–∞—î–º–æ —Ä–µ—Å–∞–π–∑-—Ö–µ–Ω–¥–ª –≤ –∫–æ–∂–µ–Ω <th>
        headerRow.querySelectorAll("th").forEach((th, colIndex) => {
            th.style.position = "relative";

            // –Ω–µ –¥–æ–¥–∞—î–º–æ —â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å–∞–π–∑–µ—Ä–∞, —è–∫—â–æ –≤—ñ–Ω –≤–∂–µ —î
            if (th.querySelector('.col-resizer')) return;

            const resizer = document.createElement("div");
            resizer.className = 'col-resizer';
            // –Ω–µ–≤–µ–ª–∏–∫–∏–π —Å—Ç–∏–ª—å ‚Äî –º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ —É CSS
            Object.assign(resizer.style, {
                width: "8px",
                height: "100%",
                position: "absolute",
                top: "0",
                right: "0",
                cursor: "col-resize",
                userSelect: "none",
                zIndex: "20",
                transform: "translateX(50%)" // —Ç—Ä–æ—Ö–∏ –≤–∏—Å—Ç—É–ø–∞—î –ø—Ä–∞–≤–æ—Ä—É—á
            });

            th.appendChild(resizer);

            resizer.addEventListener("mousedown", (e) => {
                e.preventDefault();
                // —Ü—ñ–ª—å–æ–≤–∏–π <col>
                const cols = tableEl.querySelectorAll('col');
                const col = cols[colIndex];
                if (!col) return;

                const startX = e.clientX;
                const startWidth = col.getBoundingClientRect().width;
                const minWidth = 40; // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ –≤ px

                // –∑–∞–±—Ä–∞—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
                const prevUserSelect = document.body.style.userSelect;
                document.body.style.userSelect = 'none';
                document.body.style.cursor = 'col-resize';

                function onMouseMove(ev) {
                    const dx = ev.clientX - startX;
                    let newWidth = Math.max(minWidth, Math.round(startWidth + dx));
                    col.style.width = newWidth + 'px';

                    // –∑–±–µ—Ä–µ–≥—Ç–∏ —É currentEditTable –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
                    if (currentEditTable) {
                        currentEditTable.columnWidths = currentEditTable.columnWidths || [];
                        currentEditTable.columnWidths[colIndex] = newWidth;
                    }
                }

                function onMouseUp() {
                    document.removeEventListener('mousemove', onMouseMove);
                    document.removeEventListener('mouseup', onMouseUp);
                    document.body.style.userSelect = prevUserSelect || '';
                    document.body.style.cursor = '';
                    // –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —É localStorage —Ä–∞–∑–æ–º –∑ –±–∞–∑–æ—é:
                    // saveDatabase();
                }

                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
            });
        });
    })();

    //---------------------------------- 

    dataRows = rows || [];
    
    console.log("dataRows=", dataRows);

    dataRows.forEach(rowData => {
        const tr = document.createElement("tr");
        rowData.forEach((cellData, index) => {
            const td = document.createElement("td");
            const col = table.schema[index];
        
            advDataInput(td, cellData, col, rowData, index, isQueryTable);
        
            td.addEventListener("click", () => {
                if (selectedCell && selectedCell.parentElement) {
                    selectedCell.parentElement.classList.remove("selected-row");
                }
                selectedCell = td;
                selectedCell.parentElement.classList.add("selected-row");
            });
        
            tr.appendChild(td);
        });
        
        body.appendChild(tr);
    });

    document.getElementById("addDataRowBtn").style.display = isReadOnly ? 'none' : 'inline-block';
    document.getElementById("deleteSelectedRowBtn").style.display = isReadOnly ? 'none' : 'inline-block';
    document.getElementById("saveTableDataBtn").style.display = isReadOnly ? 'none' : 'inline-block';
    document.getElementById("editModal").style.display = "flex";
}

/**
 * –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö
 **/
function addDataRow() {
    if (!currentEditTable || currentEditTable.name.startsWith('*')) return; // –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
    
    const tbody = document.getElementById("editBody");
    const tr = document.createElement("tr");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä—è–¥–∫–∞
    const newRowData = currentEditTable.schema.map(() => null);

    let firstEditableCell = null;

    currentEditTable.schema.forEach((col, index) => {
        const td = document.createElement("td");
        td.dataset.tableName = currentEditTable.name;
        td.dataset.fieldName = col.title;
        td.dataset.colIndex = index;

        let defaultValue = null;

        // –ê–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–ª—è PK
        if (col.primaryKey && col.type === "–¶—ñ–ª–µ —á–∏—Å–ª–æ" && col.autoInc === true) {
            let max = 0;
            currentEditTable.data.forEach(row => {
                const val = parseInt(row[index]);
                if (!isNaN(val)) max = Math.max(max, val);
            });
            defaultValue = max + 1;
            newRowData[index] = defaultValue;
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ advDataInput –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–æ–¥—É
        const el = advDataInput(td, defaultValue, col, newRowData, index, false);

        // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É –∫–æ–º—ñ—Ä–∫—É
        if (!firstEditableCell && el && el !== td) {
            firstEditableCell = el;
        } else if (!firstEditableCell && td.isContentEditable) {
            firstEditableCell = td;
        }

        // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –æ–±—Ä–∞–Ω—É –∫–æ–º—ñ—Ä–∫—É –ø—Ä–∏ –∫–ª—ñ–∫—É
        td.addEventListener("click", () => {
            selectedCell = td;
            highlightRow(tr);
        });

        tr.appendChild(td);
    });

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —É –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    currentEditTable.data.push(newRowData);

    tbody.appendChild(tr);

    // –í–∏–¥—ñ–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
    highlightRow(tr);

    // –°—Ç–∞—î–º–æ –∫—É—Ä—Å–æ—Ä–æ–º —É –ø–µ—Ä—à—É —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É –∫–æ–º—ñ—Ä–∫—É
    if (firstEditableCell) {
        if (firstEditableCell.focus) {
            firstEditableCell.focus();
        }
        if (firstEditableCell.select) {
            firstEditableCell.select();
        }
    }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞
function highlightRow(tr) {
    const tbody = tr.parentElement;
    tbody.querySelectorAll("tr").forEach(row => row.classList.remove("selected-row"));
    tr.classList.add("selected-row");
}

//

let deleteRowCallback = null; // —Å—é–¥–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—É –≤–∏–∫–æ–Ω–∞—î–º–æ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

function confirmDeleteRow(pkValue, onConfirm) {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ª–±–µ–∫ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    deleteRowCallback = onConfirm;

    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    document.getElementById("deleteMessage").textContent =
        `–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å "${pkValue}" –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö?`;

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª–∫—É
    document.getElementById("deleteRowModal").style.display = "block";
}

function deleteRowConfirmed() {
    document.getElementById("deleteRowModal").style.display = "none";
    if (typeof deleteRowCallback === "function") {
        deleteRowCallback(true);
    }
    deleteRowCallback = null;
}

function deleteRowCancelled() {
    document.getElementById("deleteRowModal").style.display = "none";
    if (typeof deleteRowCallback === "function") {
        deleteRowCallback(false);
    }
    deleteRowCallback = null;
}
   

/**
* –§—É–Ω–∫—Ü—ñ—è deleteSelectedRow()
* ---------------------------
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í–∏–¥–∞–ª—è—î –≤–∏–±—Ä–∞–Ω–∏–π —Ä—è–¥–æ–∫ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —î –∑–∞–ø–∏—Ç–æ–º —ñ –º–∞—î –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –í—ñ–¥—Å—É—Ç–Ω—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–ª–æ–±–∞–ª—å–Ω—ñ selectedCell —Ç–∞ currentEditTable).
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –∑ DOM —ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –≤–∏–∫–ª–∏–∫–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
* –°–ø–æ—Å—ñ–± —Ä–æ–±–æ—Ç–∏:
* - –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤–∏–±—Ä–∞–Ω–∞ —Ç–∞ —á–∏ —Ç–∞–±–ª–∏—Ü—è –Ω–µ —î –∑–∞–ø–∏—Ç–æ–º;
* - –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å —Å—Ç–æ–≤–ø—Ü—è –∑ –ø–µ—Ä–≤–∏–Ω–Ω–∏–º –∫–ª—é—á–µ–º;
* - –§–æ—Ä–º—É—î SQL-–∑–∞–ø–∏—Ç DELETE —ñ –≤–∏–∫–æ–Ω—É—î –π–æ–≥–æ;
* - –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –ë–î.
**/
function deleteSelectedRow() {
    if (!selectedCell || currentEditTable.name.startsWith('*')) {
        Message("–°–ø–æ—á–∞—Ç–∫—É –∫–ª–∞—Ü–Ω—ñ—Ç—å —É –∫–æ–º—ñ—Ä–∫—É —Ä—è–¥–∫–∞, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏, –∞–±–æ —Ü–µ –≤—ñ–∫–Ω–æ –Ω–µ —î —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–º.");
        return;
    }

    const row = selectedCell.parentElement;
    const cells = row.querySelectorAll("td");

    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å—Ç–æ–≤–ø—Ü—ñ, —è–∫—ñ —î —á–∞—Å—Ç–∏–Ω–æ—é PK
    const pkCols = currentEditTable.schema
        .map((col, idx) => col.primaryKey ? { title: col.title, index: idx } : null)
        .filter(Boolean);

    if (pkCols.length === 0) {
        Message("–£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞, —Ç–æ–º—É –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –∑ –±–∞–∑–∏.");
        return;
    }

    // –ó–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ PK –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const pkValue = cells[pkCols[0].index].innerText.trim();

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmDeleteRow(pkValue, (confirmed) => {
        if (!confirmed) return;

        // –Ø–∫—â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚Äî —Ñ–æ—Ä–º—É—î–º–æ SQL —ñ –≤–∏–¥–∞–ª—è—î–º–æ
        const whereClauses = pkCols.map(pk => {
            const value = cells[pk.index].innerText.trim();
            return `"${pk.title}" = '${value.replace(/'/g, "''")}'`;
        });

        const sql = `DELETE FROM "${currentEditTable.name}" WHERE ${whereClauses.join(" AND ")};`;

        try {
            db.run(sql);
            row.remove();
            saveDatabase();
        } catch (e) {
            Message("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + e.message);
        }
    });
}



/**
* –§—É–Ω–∫—Ü—ñ—è saveTableData()
*------------------------
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É –±–∞–∑—É –¥–∞–Ω–∏—Ö, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (select, input).
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –í—ñ–¥—Å—É—Ç–Ω—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î DOM —Ç–∞ currentEditTable).
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–∞–Ω—ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É –ë–î, —Ç–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è.
* –°–ø–æ—Å—ñ–± —Ä–æ–±–æ—Ç–∏:
* - –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Å—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ;
* - –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –±–µ—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ select / input / —Ç–µ–∫—Å—Ç—É;
* - –Ø–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —Ñ–æ—Ä–º—É—î INSERT OR REPLACE SQL;
* - –ó–±–µ—Ä—ñ–≥–∞—î –±–∞–∑—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î currentEditTable.data.
**/
function saveTableData() {
    if (!currentEditTable || currentEditTable.name.startsWith('*')) {
        Message("–¶—è —Ç–∞–±–ª–∏—Ü—è –Ω–µ –ø—ñ–¥–ª—è–≥–∞—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—é.");
        return;
    }

    const rows = document.querySelectorAll("#editBody tr");

    // –ú–∞—Å–∏–≤ PK-—Å—Ç–æ–≤–ø—Ü—ñ–≤
    const pkCols = currentEditTable.schema
        .filter(col => col.primaryKey)
        .map(col => col.title);

    if (pkCols.length > 0) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è PK —É –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        const seenPKs = new Set();
        for (let row of rows) {
            const cells = row.querySelectorAll("td");
            let pkValueCombo = pkCols.map(pk => {
                const colIndex = currentEditTable.schema.findIndex(c => c.title === pk);
                const cell = cells[colIndex];
                let val = "";

                const select = cell.querySelector("select");
                if (select) {
                    val = select.value;
                    if (val === "empty") val = "";
                } else {
                    const input = cell.querySelector("input[type='date']");
                    if (input) {
                        val = input.value;
                    } else {
                        val = cell.innerText.trim();
                    }
                }
                return val;
            }).join("||");

            if (pkValueCombo.trim() !== "") {
                if (seenPKs.has(pkValueCombo)) {
                    Message(`–ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞: ${pkValueCombo}`);
                    return; // –∑—É–ø–∏–Ω—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                }
                seenPKs.add(pkValueCombo);
            }
        }
    }

    // –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    rows.forEach(row => {
        const cells = row.querySelectorAll("td");
        const valuesObj = {};
        let allEmpty = true;

        currentEditTable.schema.forEach((col, index) => {
            const cell = cells[index];
            let val = "";

            const select = cell.querySelector("select");
            if (select) {
                val = select.value;
                if (val === "empty") val = "";
            } else {
                const input = cell.querySelector("input[type='date']");
                if (input) {
                    val = input.value;
                } else {
                    val = cell.innerText.trim();
                }
            }

            if (val !== "") allEmpty = false;
            valuesObj[col.title] = val;
        });

        if (allEmpty) return;

        if (pkCols.length > 0) {
            const whereClauses = pkCols.map(pk => `"${pk}" = '${valuesObj[pk].replace(/'/g, "''")}'`).join(" AND ");
            const checkSQL = `SELECT COUNT(*) as cnt FROM "${currentEditTable.name}" WHERE ${whereClauses};`;
            let exists = false;

            try {
                const res = db.exec(checkSQL);
                if (res.length > 0 && res[0].values[0][0] > 0) {
                    exists = true;
                }
            } catch (e) {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è PK:", e);
            }

            if (exists) {
                const setClauses = Object.keys(valuesObj)
                    .map(key => `"${key}" = '${valuesObj[key].replace(/'/g, "''")}'`)
                    .join(", ");
                const updateSQL = `UPDATE "${currentEditTable.name}" SET ${setClauses} WHERE ${whereClauses};`;
                db.run(updateSQL);
            } else {
                const columns = Object.keys(valuesObj).map(k => `"${k}"`).join(", ");
                const vals = Object.values(valuesObj).map(v => `'${v.replace(/'/g, "''")}'`).join(", ");
                const insertSQL = `INSERT INTO "${currentEditTable.name}" (${columns}) VALUES (${vals});`;
                db.run(insertSQL);
            }
        } else {
            const columns = Object.keys(valuesObj).map(k => `"${k}"`).join(", ");
            const vals = Object.values(valuesObj).map(v => `'${v.replace(/'/g, "''")}'`).join(", ");
            const sql = `INSERT OR REPLACE INTO "${currentEditTable.name}" (${columns}) VALUES (${vals});`;
            db.run(sql);
        }
    });

    try {
        const res = db.exec(`SELECT * FROM "${currentEditTable.name}"`);
        currentEditTable.data = res.length ? res[0].values : [];
    } catch (e) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", e);
        currentEditTable.data = [];
    }

    saveDatabase();
    Message("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
    closeEditModal();
}



/**
* –§—É–Ω–∫—Ü—ñ—è closeEditModal()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–∞–∫—Ä–∏–≤–∞—î –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —Å–∫–∏–¥–∞—é—á–∏ –≤–∏–±—Ä–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –í—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–Ω–∏–∫–∞—î, –∑–º—ñ–Ω–Ω—ñ –æ—á–∏—â—É—é—Ç—å—Å—è.
**/
function closeEditModal() {
    document.getElementById("editModal").style.display = "none"; // –•–æ–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ
    currentEditTable = null; // –°–∫–∏–¥–∞—î–º–æ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é
    selectedCell = null; // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
}



/** 
* –§—É–Ω–∫—Ü—ñ—è closeDbModal()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ö–æ–≤—É—î –≤—ñ–∫–Ω–æ –∑ –≤–∏–±–æ—Ä–æ–º –Ω–∞–∑–≤–∏ –ë–î.
**/
function closeDbModal() {
    document.getElementById("dbModal").style.display = "none";
}
/**
* –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ωa –Ω–æ–≤–∏–π —Ñ–∞–π–ª
**/
function saveNewDb() {
    console.log("Save new file")
    newDbFile = true; 
    const name = document.getElementById("dbName").value.trim() || "my_database"; // –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ë–î –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if (!checkName(name)) return; // —è–∫—â–æ "–ø–æ–≥–∞–Ω–µ" —ñ–º'—è
    console.log("Save new file=",name + ".db-data")
    console.log("newDbFile0 =",newDbFile)
    // –Ø–∫—â–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª —ñ —Ç–∞–∫–∏–π –≤–∂–µ —ñ—Å–Ω—É—î
    if (localStorage.getItem(name + ".tables-data")) {
        console.log("Overwrite!!!");
        newDbFile = false; 
        const msg = document.getElementById("overwtiteConfirmText");
        msg.innerHTML = `<p>–§–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é <b>${name}</b> –≤–∂–µ —ñ—Å–Ω—É—î.</p><p>–©–æ —Ä–æ–±–∏—Ç–∏?</p>`;
        console.log("newDbFile1 =",newDbFile)
        showOverwriteConfirm(name);
    };
    console.log("newDbFile2 =",newDbFile) 
    if (newDbFile) saveDb();
} 
/**
 * –í—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 **/ 
function showOverwriteConfirm(name) {
     document.getElementById("overwriteModal").style.display = "flex"; // –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É
}
function doOverwriteDb() {
    document.getElementById("overwriteModal").style.display = "none"; 
    newDbFile = true;
    saveDb();
}

function doNewNameDb() {
    document.getElementById("overwriteModal").style.display = "none"; // —Ö–æ–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É     
    newDbFile = false; 
}

function doCloseOverwriteConfirm() {
    document.getElementById("overwriteModal").style.display = "none"; // —Ö–æ–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É     
    newDbFile = false;
    closeDbModal()
}

/** 
* –§—É–Ω–∫—Ü—ñ—è createDbFile()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø–æ–ª–µ–º –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –±–∞–∑–∏.
**/
function createDbFile() {
    newDbFile = true;
    editingTableName = null;
    // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
    clearDB();           

    db = new SQL.Database(); // —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ë–î, –∞–ª–µ –±–µ–∑ –∑–∞–ø–∏—Ç—ñ–≤
    document.getElementById("dbName").value = "my_database"; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    document.getElementById("dbModal").style.display = "flex"; // –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
}
/**
 * –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –±–∞–∑–∏
 **/
function generateDbId() {
    const now = Date.now();
    return now & 0x7FFFFFFF; // –∑–∞–ª–∏—à–∞—î –ª–∏—à–µ –Ω–∏–∂—á—ñ 31 –±—ñ—Ç–∏
}
/** 
* –§—É–Ω–∫—Ü—ñ—è saveDb()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É –ø–∞–º º—è—Ç—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SQLite –±–∞–∑–∏, –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É localStorage.
**/
function saveDb() {
    const name = document.getElementById("dbName").value.trim() || "my_database";
    
    if (newDbFile) { // ‚ùó –°–∫–∏–¥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ—ó –ë–î
        clearDB();
        db = new SQL.Database();

        // –ì–µ–Ω–µ—Ä—É—î–º–æ 32-–±—ñ—Ç–æ–≤–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
        const dbId = generateDbId();

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ PRAGMA user_version  
        console.log("dbId=",dbId)
        console.log("dbId type of:", dbId, typeof dbId);
        // ‚úÖ –ó–∞–ø–∏—Å—É—î–º–æ user_version ‚Äî –ø—ñ—Å–ª—è –∑–º—ñ–Ω, —â–æ–± –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –∑–±–µ—Ä—ñ–≥–ª–æ—Å—å
    
        db.run(`PRAGMA user_version = ${dbId};`);


        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä 
        database.id = dbId;
        console.log("–§–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ:", database);
        console.log("–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ë–î (32-bit):", dbId, `(${toHex4Part(dbId)})`);

    }
    database.fileName = name;
    saveDatabase();

    

    closeDbModal();
    updateMainTitle();
}

/** 
* –§—É–Ω–∫—Ü—ñ—è saveDbAndCreateTable()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –°—Ç–≤–æ—Ä—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–∫—Ä–∏–≤–∞—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ.
**/
function saveDbAndCreateTable() {
    console.log("saveDbAndCreateTable")
    const name = document.getElementById("dbName").value.trim() || "my_database"; // –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ë–î –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if (!checkName(name)) return; // —è–∫—â–æ "–ø–æ–≥–∞–Ω–µ" —ñ–º'—è   
    saveNewDb(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑—É
    if (newDbFile) {
        closeDbModal(); // –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        createTable(); // –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
    }
}

// –û–± º—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–≤–æ—Ä—é–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é
let table = {
    name: "–ù–µ–Ω–∞–∑–≤–∞–Ω–∞_—Ç–∞–±–ª–∏—Ü—è", // –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    schema: [] // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
};

// –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –±–∞–∑–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ —É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ
let tableList = [];
/** 
 * –§—É–Ω–∫—Ü—ñ—è createTable()
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ó—ó —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
 */
function createTable() {
    // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Å—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î—Ç—å—Å—è
    if (!database.tables) database.tables = [];
    table.schema = []; // –æ—á–∏—â–µ–Ω–Ω—è —Å—Ö–µ–º–∏
    autoIncrement = null;
    isNewTable = true;
    editingTableName = null;

    // –û—á–∏—â—É—î–º–æ HTML —Ç–∞–±–ª–∏—Ü—ñ
    const schemaBody = document.getElementById("schemaBody");
    if (!schemaBody) {
        console.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç schemaBody!");
        return;
    }
    schemaBody.innerHTML = "";

    // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ FK —ñ—Å–Ω—É—é—Ç—å
    const refTableHeader = document.getElementById("refTableHeader");
    const refFieldHeader = document.getElementById("refFieldHeader");
    if (!refTableHeader) {
        console.warn("–í—ñ–¥—Å—É—Ç–Ω—ñ–π refTableHeader, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ");
        const th = document.createElement("th");
        th.id = "refTableHeader";
        th.innerText = "–¢–∞–±–ª–∏—Ü—è üìå";
        schemaBody.closest("table").querySelector("thead tr").appendChild(th);
    }
    if (!refFieldHeader) {
        console.warn("–í—ñ–¥—Å—É—Ç–Ω—ñ–π refFieldHeader, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ");
        const th = document.createElement("th");
        th.id = "refFieldHeader";
        th.innerText = "–ü–æ–ª–µ üìå";
        schemaBody.closest("table").querySelector("thead tr").appendChild(th);
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    document.getElementById("tableName").value = "–ù–µ–Ω–∞–∑–≤–∞–Ω–∞_—Ç–∞–±–ª–∏—Ü—è";

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ FK
    tableList = database.tables.map(t => t.name);

    // –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    addSchemaRow();

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    document.getElementById("makeTable").innerText = `–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ`;

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById("modal").style.display = "flex";

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ FK
    toggleForeignKeyHeaders();
}
 
/** 
* –§—É–Ω–∫—Ü—ñ—è closeModal()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ö–æ–≤—É—î –≤—ñ–∫–Ω–æ.
**/
function closeModal() {
    document.getElementById("modal").style.display = "none";
}

/** 
* –§—É–Ω–∫—Ü—ñ—è deleteSchemaRow(button)
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í–∏–¥–∞–ª—è—î –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: button ‚Äî –∫–Ω–æ–ø–∫–∞ "‚ùå", –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∑ DOM.
*/
function deleteSchemaRow(button) {
    const row = button.closest("tr"); // –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä—è–¥–∫–∞
    if (row) row.remove(); // –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ DOM
    toggleForeignKeyHeaders();
}

/**
–§—É–Ω–∫—Ü—ñ—è toggleForeignKeyHeaders()
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ü–æ–∫–∞–∑—É—î –∞–±–æ –ø—Ä–∏—Ö–æ–≤—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ "–¢–∞–±–ª–∏—Ü—è üìå" —Ç–∞ "–ü–æ–ª–µ üìå"
             –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π —á–µ–∫–±–æ–∫—Å –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞.
*/
function toggleForeignKeyHeaders() {
    const rows = document.querySelectorAll("#schemaBody tr");
    const anyChecked = Array.from(rows).some(row => {
        const checkbox = row.cells[3]?.querySelector('input[type="checkbox"]');
        return checkbox?.checked;
    });

    const refTableHeader = document.getElementById("refTableHeader");
    const refFieldHeader = document.getElementById("refFieldHeader");

    if (anyChecked) {
        refTableHeader.style.display = "";
        refFieldHeader.style.display = "";
    } else {
        refTableHeader.style.display = "none";
        refFieldHeader.style.display = "none";
    }
}



/** 
* –§—É–Ω–∫—Ü—ñ—è addSchemaRow()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ, —â–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—Å—Ç–∞–≤–∫–∞ HTML-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ —Ç—ñ–ª–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑—ñ –≤—Å—ñ–º–∞ –ø–æ–ª—è–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è.
**/
function addSchemaRow() {
    const tbody = document.getElementById("schemaBody");
    const row = document.createElement("tr");

    const tableOptions = tableList.map(t => `<option value="${t}">${t}</option>`).join("");

    const anyChecked = Array.from(document.querySelectorAll('#schemaBody tr input[type="checkbox"]'))
        .some(cb => cb.closest('td')?.cellIndex === 3 && cb.checked);

    row.innerHTML = `
        <td style="text-align:center;">
            <input type="checkbox" onchange="handlePrimaryKey(this)">
        </td>
        <td contenteditable="true"></td>
        <td>
            <select>
                <option>–¢–µ–∫—Å—Ç</option>
                <option>–¶—ñ–ª–µ —á–∏—Å–ª–æ</option>
                <option>–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ</option>
                <option>–¢–∞–∫/–ù—ñ</option>
                <option>–î–∞—Ç–∞</option>
            </select>
        </td>
        <td style="text-align:center;">
            <input type="checkbox" onchange="handleForeignKey(this)">
        </td>
        ${anyChecked ? `
            <td>
                <select onchange="updateFieldOptions(this)">
                    <option value="">(—Ç–∞–±–ª–∏—Ü—è)</option>
                    ${tableOptions}
                </select>
            </td>
            <td>
                <select><option value="">(–ø–æ–ª–µ)</option></select>
            </td>
        ` : ''}
        <td contenteditable="true"></td>
        <td style="text-align:center;">
            <button onclick="deleteSchemaRow(this)">‚ùå</button>
        </td>
    `;

    tbody.appendChild(row);
    toggleForeignKeyHeaders(); // –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
}


    
/**
* –§—É–Ω–∫—Ü—ñ—è getFieldsForTable(tableName)
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
* - tableName (string): –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–∞—Å–∏–≤ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.
*/
function getFieldsForTable(tableName) {
    const table = database.tables.find(t => t.name === tableName);
    if (!table) return [];
    return table.schema.map(field => field.title);
}

//
function getColumnName(checkbox) {
    const cell = checkbox.closest("td");       // –∫–æ–º—ñ—Ä–∫–∞ –∑ —á–µ–∫–±–æ–∫—Å–æ–º
    const row = cell.closest("tr");            // —Ä—è–¥–æ–∫
    const cells = Array.from(row.cells);
    const index = cells.indexOf(cell);

    // –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–æ–º—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è —á–µ–∫–±–æ–∫—Å–∞
    if (index >= 0 && index + 1 < cells.length) {
        return cells[index + 1].innerText.trim();
    }
    return null;
}
/**
* –§—É–Ω–∫—Ü—ñ—è handlePrimaryKey(checkbox)
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–Ω—è—Ç—Ç—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ñ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
* - checkbox (HTMLInputElement): –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–Ω–æ–≤–ª—é—î —Ç–∏–ø –ø–æ–ª—è —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –Ω—å–æ–≥–æ.
**/
function handlePrimaryKey(checkbox) {
    const row = checkbox.closest("tr");
    const cells = row.cells;
    const commentCell = cells[cells.length - 2];
    const typeSelect = row.cells[2].querySelector("select");

    if (checkbox.checked) {
        if (!commentCell.innerText.includes("–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á")) {
            if(!getColumnName(checkbox)) { 
                Message("–ü–æ–ª–µ –±–µ–∑ –Ω–∞–∑–≤–∏!");
                checkbox.checked = false;
                return
            }
            commentCell.innerText = "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á";
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.getElementById("pkModal");
        modal.style.display = "block";

        // –ö–Ω–æ–ø–∫–∞ "–¢–∞–∫"
        const yesBtn = document.getElementById("pkYes");
        yesBtn.onclick = () => {
            if (typeSelect) {
                typeSelect.value = "–¶—ñ–ª–µ —á–∏—Å–ª–æ";
                autoIncrement = getColumnName(checkbox);
                console.log("PK field autoIncrement=", autoIncrement);
                // –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É —É —Å—Ö–µ–º—ñ
                const rowIdx = checkbox.closest("tr").rowIndex - 1; // -1 –±–æ —î –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (table.schema[rowIdx]) table.schema[rowIdx].autoInc = true;
                // —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏
                checkbox.closest("td").style.backgroundColor = "#0f56d9";                
            }
                modal.style.display = "none";
        };

        // –ö–Ω–æ–ø–∫–∞ "–ù—ñ"
        const noBtn = document.getElementById("pkNo");
        noBtn.onclick = () => {
            modal.style.display = "none";
            // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è —É —Ñ—É–Ω–∫—Ü—ñ—é
            // —Å–∫–∏–¥–∞–Ω–Ω—è –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É
            const rowIdx = checkbox.closest("tr").rowIndex - 1;
            if (table.schema[rowIdx]) table.schema[rowIdx].autoInc = false;
            checkbox.closest("td").style.backgroundColor = "";

        };

    } else {
        if (commentCell.innerText === "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á") {
            commentCell.innerText = "";
            const rowIdx = checkbox.closest("tr").rowIndex - 1;
            if (table.schema[rowIdx]) table.schema[rowIdx].autoInc = false;
            checkbox.closest("td").style.backgroundColor = "";
        }
    }
}

/**
* –§—É–Ω–∫—Ü—ñ—è handleForeignKey(checkbox)
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–Ω—è—Ç—Ç—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—è.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
*  - checkbox (HTMLInputElement): –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ/–ø–æ–ª—è –¥–ª—è FK.
**/
function handleForeignKey(checkbox) {
    const tbody = document.getElementById("schemaBody");
    const rows = tbody.querySelectorAll("tr");

    const anyChecked = Array.from(rows).some(row => {
        const cb = row.cells[3]?.querySelector('input[type="checkbox"]');
        return cb?.checked;
    });

    rows.forEach(row => {
        const cells = row.cells;
        const hasForeignKeyColumns = cells.length > 6; // —è–∫—â–æ > 6 ‚Äî –∑–Ω–∞—á–∏—Ç—å —î —Å—Ç–æ–≤–ø—á–∏–∫–∏ –ó–ö

        if (anyChecked && !hasForeignKeyColumns) {
            // –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø—á–∏–∫–∏ –ó–ö –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ –¥–≤–æ–º–∞ (–∫–æ–º–µ–Ω—Ç–∞—Ä + –∫–Ω–æ–ø–∫–∞)
            const commentCell = cells[cells.length - 2];
            const deleteCell = cells[cells.length - 1];

            const tableSelect = document.createElement("td");
            const fieldSelect = document.createElement("td");

            const tableOptions = tableList.map(t => `<option value="${t}">${t}</option>`).join("");

            tableSelect.innerHTML = `
                <select onchange="updateFieldOptions(this)">
                    <option value="">(—Ç–∞–±–ª–∏—Ü—è)</option>
                    ${tableOptions}
                </select>`;
            fieldSelect.innerHTML = `<select><option value="">(–ø–æ–ª–µ)</option></select>`;

            row.insertBefore(tableSelect, commentCell);
            row.insertBefore(fieldSelect, commentCell);

        } else if (!anyChecked && hasForeignKeyColumns) {
            // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
            row.deleteCell(cells.length - 3); // –ø–æ–ª–µ –ó–ö
            row.deleteCell(cells.length - 3); // —Ç–∞–±–ª–∏—Ü—è –ó–ö
        }
    });

    toggleForeignKeyHeaders();
}


/**
* –§—É–Ω–∫—Ü—ñ—è updateFieldOptions(tableSelect)
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–ª—ñ–≤ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ —É –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É –∫–ª—é—á—ñ.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
* - tableSelect (HTMLSelectElement): —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–ª—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ.
*/
function updateFieldOptions(tableSelect) {
    const row = tableSelect.closest("tr");
    const fieldSelect = row.cells[5].querySelector("select");
    const selectedTable = tableSelect.value;
    console.log("selectedTable=",selectedTable)
    fieldSelect.innerHTML = `<option value="">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</option>`;

    const fields = getFieldsForTable(selectedTable);
    fieldSelect.innerHTML = fields.map(f => `<option value="${f}">${f}</option>`).join("");
}

/**
* –§—É–Ω–∫—Ü—ñ—è saveSchema()
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ, —Å—Ç–≤–æ—Ä—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—é –≤ SQLite, –≤—Å—Ç–∞–≤–ª—è—î –¥–∞–Ω—ñ, –æ–Ω–æ–≤–ª—é—î UI —Ç–∞ –±–∞–∑—É.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ –Ω–æ–≤–æ—é —Å—Ö–µ–º–æ—é –≤ –ë–î.
**/
function saveSchema() {
    const newTableName = document.getElementById("tableName").value.trim() || "–ù–µ–Ω–∞–∑–≤–∞–Ω–∞_—Ç–∞–±–ª–∏—Ü—è";
    if (!checkName(newTableName)) return;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤
    if (!checkFieldName()) {
        Message("–í–∏–ø—Ä–∞–≤—Ç–µ –Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –∑ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.");
        return;
    }
    
    
    const rows = document.querySelectorAll("#schemaBody tr");

    const schema = [];
    const fieldNames = new Set();
    let hasDuplicate = false;

    for (let row of rows) {
        const isPrimaryKey = row.cells[0].querySelector("input").checked;
        let title = row.cells[1].innerText.trim();
        const type = row.cells[2].querySelector("select").value;
        const comment = row.cells[3].innerText.trim();

        if (!title) continue;

        const lowerTitle = title.toLowerCase();
        if (fieldNames.has(lowerTitle)) {
            hasDuplicate = true;
            break;
        }

        fieldNames.add(lowerTitle);

        let isForeignKey = false;
        const fkCheckbox = row.cells[3].querySelector("input[type=checkbox]");
        if (fkCheckbox) {
            isForeignKey = fkCheckbox.checked;
        }

        let refTable = null;
        let refField = null;

        if (isForeignKey) {
            const refTableSelect = row.cells[4]?.querySelector("select");
            const refFieldSelect = row.cells[5]?.querySelector("select");
            if (refTableSelect) refTable = refTableSelect.value || null;
            if (refFieldSelect) refField = refFieldSelect.value || null;
        }

        schema.push({
            primaryKey: isPrimaryKey,
            autoInc: title===autoIncrement,
            title: title,
            type: type,
            comment: comment,
            foreignKey: isForeignKey,
            refTable: isForeignKey ? refTable : null,
            refField: isForeignKey ? refField : null
        });
    }

    if (hasDuplicate) {
        Message("–ù–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –º–∞—é—Ç—å –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏.");
        return;
    }

    if (schema.length === 0) {
        Message("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.");
        return;
    }

    if (schema.filter(f => f.primaryKey).length === 0) {
        Message("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞. –¢–∞–±–ª–∏—Ü—è –Ω–µ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.");
        return;
    }

    
    let oldTableName = null;

    if (newDbFile) editingTableName = newTableName;
    console.log("isNewTable =",isNewTable )
    if (!isNewTable && editingTableName) {
        if (typeof editingTableName === "string") {
            oldTableName = editingTableName.trim();
        } else if (typeof editingTableName.name === "string") {
            oldTableName = editingTableName.name.trim();
        }
    }

    if (!isNewTable && !oldTableName) {
        isNewTable = true;
    }

    const nameChanged = !isNewTable && oldTableName !== newTableName;

    let oldData = [];
    if (!isNewTable) {
        try {
            const stmt = db.prepare(`SELECT * FROM "${oldTableName}"`);
            while (stmt.step()) {
                oldData.push(stmt.getAsObject());
            }
            stmt.free();
        } catch (e) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:", e);
        }

        try {
            db.run(`DROP TABLE IF EXISTS "${oldTableName}"`);
        } catch (e) {
            console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é:", e);
        }
    }

    db.run("PRAGMA foreign_keys = ON;");

    const fieldsSQL = schema.map(field => {
        let type = field.type.toUpperCase();
        if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
        else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
        else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
        else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
        else if (type === "–î–ê–¢–ê") type = "TEXT";

        return `"${field.title}" ${type}`;
    });

    // –î–æ–¥–∞—î–º–æ —Å–∫–ª–∞–¥–µ–Ω–∏–π –∞–±–æ –æ–¥–∏–Ω–∞—Ä–Ω–∏–π PRIMARY KEY
    const pkFields = schema.filter(f => f.primaryKey).map(f => `"${f.title}"`);
    if (pkFields.length > 0) {
        fieldsSQL.push(`PRIMARY KEY (${pkFields.join(", ")})`);
    }

    const foreignKeys = schema
        .filter(f => f.foreignKey && f.refTable && f.refField)
        .map(f => `FOREIGN KEY ("${f.title}") REFERENCES "${f.refTable}"("${f.refField}")`);

    const fullFieldsSQL = [...fieldsSQL, ...foreignKeys].join(", ");
    const createSQL = `CREATE TABLE "${newTableName}" (${fullFieldsSQL});`;

    try {
        db.run(createSQL);
    } catch (e) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é:", e, createSQL);
        
        Message("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.\n"+e);
        return;
    }

    const newFieldNames = schema.map(f => f.title);
    oldData.forEach(record => {
        const insertFields = [];
        const insertValues = [];
        for (const key of newFieldNames) {
            if (key in record) {
                insertFields.push(`"${key}"`);
                insertValues.push(JSON.stringify(record[key]));
            }
        }
        if (insertFields.length > 0) {
            const insertSQL = `INSERT INTO "${newTableName}" (${insertFields.join(", ")}) VALUES (${insertValues.join(", ")});`;
            try {
                db.run(insertSQL);
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Å:", e, insertSQL);
            }
        }
    });

    const table = {
        name: newTableName,
        schema: schema,
        data: []
    };

    try {
        const stmt = db.prepare(`SELECT * FROM "${newTableName}"`);
        const fieldOrder = schema.map(f => f.title);
        while (stmt.step()) {
            const obj = stmt.getAsObject();
            const row = fieldOrder.map(f => obj[f] ?? null);
            table.data.push(row);
        }
        stmt.free();
    } catch (e) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ:", e);
    }

    if (!isNewTable) {
        const index = database.tables.findIndex(t => t.name === oldTableName);
        if (index !== -1) {
            database.tables.splice(index, 1);
        }
    }
    database.tables.push(table);

    if (!isNewTable && nameChanged) {
        updateRelationsOnRename(oldTableName, newTableName);
        updateQueriesOnTableRename(oldTableName, newTableName);
        updateReportsOnTableRename(oldTableName, newTableName);
        updateFormsOnTableRename(oldTableName, newTableName);
        removeTableFromMenu(oldTableName);
    }

    addTableToMenu(newTableName);
    saveDatabase();
    Message("–°—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
    closeModal();
    newDbFile = false;
    isNewTable = false;
}


// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: —á–∏ –∑–º—ñ–Ω–∏–ª–∞—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
function isStructureChanged(oldSchema, newSchema) {
    if (!oldSchema || oldSchema.length !== newSchema.length) return true;

    for (let i = 0; i < oldSchema.length; i++) {
        const oldField = oldSchema[i];
        const newField = newSchema[i];
        if (
            oldField.title !== newField.title ||
            oldField.type !== newField.type ||
            oldField.primaryKey !== newField.primaryKey ||
            oldField.foreignKey !== newField.foreignKey ||
            oldField.refTable !== newField.refTable ||
            oldField.refField !== newField.refField
        ) {
            return true;
        }
    }
    return false;    
}

/**
 * –§—É–Ω–∫—Ü—ñ—è updateFormsOnTableRename
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–Ω–æ–≤–ª—é—î —Ñ–æ—Ä–º–∏ –≤ database.forms –ø—ñ—Å–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
 * –û–Ω–æ–≤–ª—é—î:
 *   - element.tableName: —è–∫—â–æ –¥–æ—Ä—ñ–≤–Ω—é—î oldName
 *   - element.text: —è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å "oldName.fieldName" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Contacts.phone")
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   - oldName (string): —Å—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   - newName (string): –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 */
function updateFormsOnTableRename(oldName, newName) {
    if (!oldName || !newName || oldName === newName) return;

    const escapeRegex = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const oldEscaped = escapeRegex(oldName);
    const fieldRefPattern = new RegExp(`"${oldEscaped}\\.([a-zA-Z0-9_]+)"`, 'g');

    database.forms.forEach(form => {
        if (Array.isArray(form.elements)) {
            form.elements.forEach(element => {
                // 1. –û–Ω–æ–≤–ª—é—î–º–æ tableName
                if (element.tableName === oldName) {
                    element.tableName = newName;
                }

                // 2. –û–Ω–æ–≤–ª—é—î–º–æ text, —è–∫—â–æ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ª–µ: "TableName.FieldName"
                if (typeof element.text === 'string') {
                    const isFieldRef = new RegExp(`^"${oldEscaped}\\.[^"]+"$`).test(element.text);
                    if (isFieldRef) {
                        element.text = element.text.replace(fieldRefPattern, `"${newName}.$1"`);
                    } else if (element.text === oldName) {
                        // –Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
                        element.text = element.text.replace(oldName, newName);
                    }
                }
            });
        }
    });

    console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∏: "${oldName}" ‚Üí "${newName}" (tableName —Ç–∞ text)`);
}

/**
 * –§—É–Ω–∫—Ü—ñ—è updateReportsOnTableRename
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–Ω–æ–≤–ª—é—î –∑–≤—ñ—Ç–∏ –≤ database.reports –ø—ñ—Å–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
 * –û–Ω–æ–≤–ª—é—î:
 *   - element.tableName: —è–∫—â–æ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ oldName
 *   - element.text: —è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å "oldName.fieldName" ‚Üí –∑–∞–º—ñ–Ω—é—î –Ω–∞ "newName.fieldName"
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   - oldName (string): —Å—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   - newName (string): –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 */
function updateReportsOnTableRename(oldName, newName) {
    if (!oldName || !newName || oldName === newName) return;

    // –ï–∫—Ä–∞–Ω—É—î–º–æ –Ω–∞–∑–≤–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤
    const escapeRegex = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const oldEscaped = escapeRegex(oldName);

    // –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É "tableName.fieldName" —É text
    const fieldRefPattern = new RegExp(`"${oldEscaped}\\.([a-zA-Z0-9_]+)"`, 'g');

    database.reports.forEach(report => {
        if (Array.isArray(report.elements)) {
            report.elements.forEach(element => {
                // 1. –û–Ω–æ–≤–ª—é—î–º–æ tableName
                if (element.tableName === oldName) {
                    element.tableName = newName;
                }

                // 2. –û–Ω–æ–≤–ª—é—î–º–æ text, —è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å "OldTable.field"
                if (typeof element.text === 'string') {
                    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ª–µ: "TableName.FieldName"
                    const hasFieldRef = new RegExp(`^"${oldEscaped}\\.[^"]+"$`).test(element.text);
                    if (hasFieldRef) {
                        // –ó–∞–º—ñ–Ω—é—î–º–æ –≤—Å—ñ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è "OldTable.field" ‚Üí "NewTable.field"
                        element.text = element.text.replace(
                            fieldRefPattern,
                            `"${newName}.$1"`
                        );
                    } else if (element.text === oldName) {
                        // –Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤)
                        element.text = element.text.replace(oldName, newName);
                    }
                }
            });
        }
    });

    console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ –∑–≤—ñ—Ç–∏: "${oldName}" ‚Üí "${newName}" (tableName —Ç–∞ text)`);
}

/**
 * –§—É–Ω–∫—Ü—ñ—è updateQueriesOnTableRename
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–Ω–æ–≤–ª—é—î SQL —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–ø–∏—Ç—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.
 * –û–Ω–æ–≤–ª—é—î:
 *   - sql: —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "OldTable" ‚Üí "NewTable")
 *   - config.tableName: —É –∫–æ–∂–Ω–æ–º—É –ø–æ–ª—ñ
 *   - joins.fromTable, joins.toTable: —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   - oldName (string): —Å—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   - newName (string): –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 */
function updateQueriesOnTableRename(oldName, newName) {
    if (!oldName || !newName || oldName === newName) return;

    const escapeRegex = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const oldEscaped = escapeRegex(oldName);
    const pattern = new RegExp(`"(${oldEscaped})"`, 'g');

    queries.definitions.forEach(query => {
        // 1. –û–Ω–æ–≤–ª—é—î–º–æ SQL-—Ä—è–¥–æ–∫
        if (typeof query.sql === 'string') {
            query.sql = query.sql.replace(pattern, `"${newName}"`);
        }

        // 2. –û–Ω–æ–≤–ª—é—î–º–æ config.tableName
        if (Array.isArray(query.config)) {
            query.config.forEach(field => {
                if (field.tableName === oldName) {
                    field.tableName = newName;
                }
            });
        }

        // 3. –û–Ω–æ–≤–ª—é—î–º–æ joins (—è–∫—â–æ —î)
        if (Array.isArray(query.joins)) {
            query.joins.forEach(join => {
                if (join.fromTable === oldName) {
                    join.fromTable = newName;
                }
                if (join.toTable === oldName) {
                    join.toTable = newName;
                }
            });
        }

        // 4. (–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É –∑–∞–ø–∏—Ç—É, —è–∫—â–æ –≤–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä–µ —ñ–º'—è
        // if (typeof query.name === 'string' && query.name.includes(oldName)) {
        //     query.name = query.name.replace(oldName, newName);
        // }
    });

    console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç–∏: "${oldName}" ‚Üí "${newName}" (sql, config, joins)`);
}
/**
 * –§—É–Ω–∫—Ü—ñ—è updateRelationsOnRename
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–Ω–æ–≤–ª—é—î –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—é –≤ database.relations –ø—ñ—Å–ª—è —ó—ó –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   - oldName (string): —Å—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.
 *   - newName (string): –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.
 */
function updateRelationsOnRename(oldName, newName) {
    if (!oldName || !newName || oldName === newName) return;

    database.relations.forEach(relation => {
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–≤—ñ–¥–∫–∏ (fromTable)
        if (relation.fromTable === oldName) {
            relation.fromTable = newName;
        }
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫—É–¥–∏ (toTable)
        if (relation.toTable === oldName) {
            relation.toTable = newName;
        }
    });

    console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ –∑–≤'—è–∑–∫–∏: "${oldName}" ‚Üí "${newName}"`);
}

/**
* –§—É–Ω–∫—Ü—ñ—è addTableToMenu(tableName)
* –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –î–æ–¥–∞—î –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –¥–æ —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å —É –º–µ–Ω—é.
* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
* - tableName (string): –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.
* –†–µ–∑—É–ª—å—Ç–∞—Ç: –ï–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ DOM.
**/
function addTableToMenu(tableName) {
    const dataMenu = document.getElementById("data-menu");

    // –Ø–∫—â–æ –≤–∂–µ —î ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å)
    const existingItem = Array.from(dataMenu.children).find(item => item.textContent === tableName);
    if (existingItem) {
        existingItem.remove();
    }

    const item = document.createElement("a");
    item.href = "#";
    item.textContent = tableName;
    item.onclick = () => editData(tableName);

    dataMenu.appendChild(item);
    document.getElementById("data-work-link").style.display = "block";
    
}

/**
 * –§—É–Ω–∫—Ü—ñ—è removeTableFromMenu(oldTableName)
 * –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í–∏–¥–∞–ª—è—î –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *  - oldTableName (string): –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –º–µ–Ω—é.
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –∑ DOM (—è–∫—â–æ —ñ—Å–Ω—É—î).
 */
function removeTableFromMenu(oldTableName) {
    const dataMenu = document.getElementById("data-menu");

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç, —É —è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–º—ñ—Å—Ç —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ oldTableName
    const itemToRemove = Array.from(dataMenu.children).find(
        item => item.textContent.trim() === oldTableName.trim()
    );

    // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
    if (itemToRemove) {
        dataMenu.removeChild(itemToRemove);
    }
}

/** 
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   msg ‚Äî —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–∫–∞–∑—É—î –≤—ñ–∫–Ω–æ –∑ –∑–∞–¥–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
 **/
function Message(msg) {
    const modal = document.getElementById("messageModal"); // –û—Ç—Ä–∏–º–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const content = document.getElementById("messageContent"); // –û—Ç—Ä–∏–º–∞—Ç–∏ –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç—É

    content.innerText = msg; // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    modal.style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ
}

/** 
 * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 
 **/
function closeMessage() {
    document.getElementById("messageModal").style.display = "none"; // –°—Ö–æ–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ
}

/** 
 * –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
 **/
function confirmDeleteDb() {
    if (!selectedDbFile) {
        Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."); // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return;
    }

    dbToDelete = selectedDbFile; // –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–º‚Äô—è –ë–î –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    document.getElementById("deleteConfirmText").innerHTML =
        `–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö <b>"${dbToDelete}"</b>?`; // –í–∏–≤–µ—Å—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

    document.getElementById("deleteModal").style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
}

/** 
 * –í–∏–¥–∞–ª—è—î –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–∑ localStorage
 * –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫
 **/
function doDeleteDb() {
    if (dbToDelete) {
        // –Ø–∫—â–æ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö ‚Äî —Å–ø–æ—á–∞—Ç–∫—É —ó—ó –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
        if (dbToDelete === database.fileName) {
                    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –±–∞–∑—É, –æ–±–Ω—É–ª–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, UI —Ç–æ—â–æ           
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
                    saveDatabase();
            
                    // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
                    db = null;
                    clearDB();            
                    updateMainTitle(); // –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ "–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö"                    
                               
        }

        // –í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ –±–∞–∑–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∏ –∑ localStorage
        localStorage.removeItem(dbToDelete + ".db-data");
        localStorage.removeItem(dbToDelete + ".queries-data");

        Message(`–§–∞–π–ª "${dbToDelete}" –≤–∏–¥–∞–ª–µ–Ω–æ.`); // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        closeDeleteModal();     // –ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        closeStorageDialog();   // –ó–∞–∫—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
        showStorageDialog();    // –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
    }
}

/** 
 * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è 
 **/
function closeDeleteModal() {
    document.getElementById("deleteModal").style.display = "none"; // –°—Ö–æ–≤–∞—Ç–∏
    dbToDelete = null; // –û—á–∏—Å—Ç–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
}

/** 
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ SQL-–∑–∞–ø–∏—Ç—É 
 * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 **/
function createQuery() {
    document.getElementById("queryName").value = "–ù–æ–≤–∏–π_–∑–∞–ø–∏—Ç"; // –ù–∞–∑–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    document.getElementById("queryBody").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ä—è–¥–∫–∏
    addQueryRow(); // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
    document.getElementById("queryModal").style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–∫–Ω–æ
    populateTableDropdowns(); // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü—å
}

/** 
 * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 **/
function closeQueryModal() {
    document.getElementById("queryModal").style.display = "none";
}

/** 
 * –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 * –†—è–¥–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –≤–∏–±—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ, –ø–æ–ª—è, –≤–∏–¥–∏–º—ñ—Å—Ç—å, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, —Ñ—ñ–ª—å—Ç—Ä
 **/
function addQueryRow() {
    const tbody = document.getElementById("queryBody");
    const row = document.createElement("tr");

    row.innerHTML = `
        <td><select class="query-table-select" onchange="populateFieldDropdown(this)"></select></td>
        <td><select class="query-field-select"></select></td>
        <td><input type="checkbox" checked class="query-visible-checkbox"></td>
        <td>
            <select class="query-sort-select">
                <option value="">–ù–µ–≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–æ</option>
                <option value="ASC">–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º</option>
                <option value="DESC">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</option>
            </select>
        </td>
        <td>
            <div style="display: flex; gap: 4px; align-items: center;">
                <select class="query-operator-select" style="width: 60px;">
                    <option title="—Ä—ñ–≤–Ω–µ" value="==">==</option>
                    <option title="–º–µ–Ω—à–µ" value="<">&lt;</option>
                    <option title="–º–µ–Ω—à–µ –∞–±–æ —Ä—ñ–≤–Ω–µ" value="<=">&lt;=</option>
                    <option title="–±—ñ–ª—å—à–µ" value=">">&gt;</option>
                    <option title="–±—ñ–ª—å—à–µ –∞–±–æ —Ä—ñ–≤–Ω–µ" value=">=">&gt;=</option>
                    <option title="–Ω–µ —Ä—ñ–≤–Ω–µ" value="!=">!=</option>
                    <option title="—Å—Ö–æ–∂–µ –Ω–∞ —à–∞–±–ª–æ–Ω" value="LIKE">LIKE</option>
                    <option title="–≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø–µ—Ä–µ–ª—ñ–∫—É" value="IN">IN</option>
                    <option title="–Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø–µ—Ä–µ–ª—ñ–∫—É" value="NOT IN">NOT IN</option>
                    <option title="–≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø—Ä–æ–º—ñ–∂–∫—É" value="BETWEEN">BETWEEN</option>
                    <option title="–Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø—Ä–æ–º—ñ–∂–∫—É" value="NOT BETWEEN">NOT BETWEEN</option>
                </select>
                <input type="text" class="query-criteria-input" style="flex: 1;">
            </div>
        </td>
        <td>
            <select class="query-field-role" title="–¢–∏–ø —É—á–∞—Å—Ç—ñ —É –∑–∞–ø–∏—Ç—ñ" onchange="toggleAliasInput(this)">
                <option value="select">----</option>
                <option title="–ì–†–£–ü–ê" value="group">GROUP</option>
                <option title="–ö–Ü–õ–¨–ö–Ü–°–¢–¨" value="count">COUNT</option>
                <option title="–°–£–ú–ê" value="sum">SUM</option>
                <option title="–°–ï–†–ï–î–ù–Ñ" value="avg">AVG</option>
                <option title="–ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ï" value="min">MIN</option>
                <option title="–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ï" value="max">MAX</option>
            </select>
            <input type="text" class="query-alias-input" placeholder="–ø—Å–µ–≤–¥–æ–Ω—ñ–º" style="margin-top:4px; display:none; width:100%;height:1.5em;">
        </td>
        <td><button onclick="deleteQueryRow(this)">‚ùå</button></td>
    `;

    tbody.appendChild(row);
    populateTableDropdownsForRow(row);
}

/**
 * —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è input –ø—Å–µ–≤–¥–æ–Ω—ñ–º–∞
 **/
function toggleAliasInput(selectEl) {
    const row = selectEl.closest("tr");
    const aliasInput = row.querySelector(".query-alias-input");
    console.log("toggleAliasInput=",selectEl.value)
    if (selectEl.value !== "select") {
        aliasInput.style.display = "block";
    } else {
        aliasInput.style.display = "none";
        aliasInput.value = "";
    }
}


/** 
 * –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 * –ü–∞—Ä–∞–º–µ—Ç—Ä:
 *   button ‚Äî –∫–Ω–æ–ø–∫–∞ ‚ùå, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –ø–æ–¥—ñ—é
 **/
function deleteQueryRow(button) {
    const row = button.closest("tr"); // –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
    row.remove(); // –í–∏–¥–∞–ª–∏—Ç–∏ —Ä—è–¥–æ–∫
}

/** 
 * –ó–∞–ø–æ–≤–Ω—é—î –≤—Å—ñ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü—å —É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ –∑–∞–ø–∏—Ç—É
 **/
function populateTableDropdowns() {
    const tableSelects = document.querySelectorAll(".query-table-select"); // –í—Å—ñ —Å–µ–ª–µ–∫—Ç–∏ —Ç–∞–±–ª–∏—Ü—å
    tableSelects.forEach(select => {
        select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>"; // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        database.tables.forEach(table => {
            const option = document.createElement("option");
            option.value = table.name;
            option.textContent = table.name;
            select.appendChild(option); // –î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ
        });
    });
}

/**
 * –ó–∞–ø–æ–≤–Ω—é—î —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä—è–¥–∫—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
 * –ü–∞—Ä–∞–º–µ—Ç—Ä:
 *   row ‚Äî —Ä—è–¥–æ–∫, —É —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
 **/
function populateTableDropdownsForRow(row) {
    const select = row.querySelector(".query-table-select");
    select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
    database.tables.forEach(table => {
        const option = document.createElement("option");
        option.value = table.name;
        option.textContent = table.name;
        select.appendChild(option);
    });
}


/** 
 * –ó–∞–ø–æ–≤–Ω—é—î —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
 * –ü–∞—Ä–∞–º–µ—Ç—Ä:
 *   tableSelect ‚Äî select-–µ–ª–µ–º–µ–Ω—Ç –∑ –≤–∏–±—Ä–∞–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é
 **/
function populateFieldDropdown(tableSelect) {
    const row = tableSelect.closest("tr");
    const fieldSelect = row.querySelector(".query-field-select");
    fieldSelect.innerHTML = "";

    const selectedTableName = tableSelect.value;
    if (!selectedTableName) {
        fieldSelect.disabled = true;
        return;
    }

    const selectedTable = database.tables.find(t => t.name === selectedTableName);
    if (!selectedTable) return;

    fieldSelect.disabled = false;

    // –î–æ–¥–∞—Ç–∏ –æ–ø—Ü—ñ—é "* (–≤—Å—ñ –ø–æ–ª—è)" –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
    const starOption = document.createElement("option");
    starOption.value = "*";
    starOption.textContent = "* (–í—Å—ñ –ø–æ–ª—è)";
    fieldSelect.appendChild(starOption);

    // –î–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ñ
    selectedTable.schema.forEach(field => {
        const option = document.createElement("option");
        option.value = field.title;
        option.textContent = field.title;
        fieldSelect.appendChild(option);
    });
}



/** 
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–∏–ø –ø–æ–ª—è —É –≤–∫–∞–∑–∞–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
 *   tableName ‚Äî –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   fieldName ‚Äî –Ω–∞–∑–≤–∞ –ø–æ–ª—è
 * –ü–æ–≤–µ—Ä—Ç–∞—î: —Ç–∏–ø –ø–æ–ª—è –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
 */
function getFieldType(tableName, fieldName) {
    console.log("getFieldType=", database); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    const table = database.tables.find(t => t.name === tableName); // –ó–Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
    if (!table) return ""; // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ ""
    const field = table.schema.find(f => f.title === fieldName); // –ó–Ω–∞–π—Ç–∏ –ø–æ–ª–µ
    console.log("getFieldType Field=", field); // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    return field?.type || ""; // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–∏–ø –∞–±–æ "" —è–∫—â–æ –Ω–µ–º–∞
}

//**************************************************************************
function isParameterPlaceholder(v) {
    return /^\[.*\]$/.test(v.trim());
}
    
function generateSqlQuery() {
    const queryName = document.getElementById("queryName").value.trim();
    const rows = document.querySelectorAll("#queryBody tr");

    let selectFields = [];
    let groupByFields = [];
    let baseTable = null;
    let joins = [];
    let whereClauses = [];
    let orderByClauses = [];
    const queryConfig = [];

    let hasSelect = false;
    let hasAggregate = false;
    let aggregateAliasCounter = 0;
    
    // --- helpers for criteria formatting ---
    const sqlQuote = (s) => `'${String(s).replace(/'/g, "''")}'`;
    
    const parseList = (raw) => {
      if (!raw) return [];
      let s = raw.trim();
      if (s.startsWith("(") && s.endsWith(")")) s = s.slice(1, -1);
      return s.split(",").map(v => v.trim()).filter(v => v.length);
    };
    
    const isNumericLiteral = (v) => /^-?\d+(?:\.\d+)?$/.test(String(v).trim());
    
    const toIsoDate = (v) => {
      const s = String(v).trim();
      // yyyy-mm-dd
      let m = s.match(/^(\d{4})-(\d{2})-(\d{2})$/);
      if (m) return `${m[1]}-${m[2]}-${m[3]}`;
      // dd.mm.yyyy –∞–±–æ dd-mm-yyyy –∞–±–æ dd/mm/yyyy
      m = s.match(/^(\d{2})[.\-\/](\d{2})[.\-\/](\d{4})$/);
      if (m) return `${m[3]}-${m[2]}-${m[1]}`;
      return s; // —è–∫ —î, —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç —ñ–Ω—à–∏–π
    };
    
    const formatLiteral = (v, fieldType) => {
      const raw = String(v).trim().replace(/^'(.*)'$/, "$1"); // –∑–Ω—è—Ç–∏ –∑–∞–π–≤—ñ –æ–¥–∏–Ω–∞—Ä–Ω—ñ –ª–∞–ø–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –µ–ª–µ–º–µ–Ω—Ç–∞
      if (fieldType === "–î–∞—Ç–∞") return sqlQuote(toIsoDate(raw));
      if (fieldType === "–¢–∞–∫/–ù—ñ") {
        const L = raw.toLowerCase();
        if (["—Ç–∞–∫","true","1"].includes(L)) return "1";
        if (["–Ω—ñ","false","0"].includes(L)) return "0";
        return isNumericLiteral(raw) ? raw : sqlQuote(raw);
      }
      return isNumericLiteral(raw) ? raw : sqlQuote(raw);
    };
    

    rows.forEach(row => {
        const tableSelect = row.querySelector(".query-table-select");
        const fieldSelect = row.querySelector(".query-field-select");
        const visibleCheckbox = row.querySelector(".query-visible-checkbox");
        const sortSelect = row.querySelector(".query-sort-select");
        const operatorSelect = row.querySelector(".query-operator-select");
        const criteriaInput = row.querySelector(".query-criteria-input");
        const roleSelect = row.querySelector(".query-field-role");

        const tableName = tableSelect.value;
        const fieldName = fieldSelect ? fieldSelect.value : "";
        const isVisible = visibleCheckbox.checked;
        const sortBy = sortSelect.value;
        const operator = operatorSelect.value.trim();
        const criteria = criteriaInput.value.trim();
        const fieldRole = roleSelect.value;

        if (!tableName || (!fieldName && fieldName !== "*")) return;

        if (!baseTable && tableName !== "*") baseTable = tableName;

        let selectExpr = "";
        const aliasInput = row.querySelector(".query-alias-input");
        let alias = aliasInput.value.trim();
        
        // –Ø–∫—â–æ alias –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –∑–≥–µ–Ω–µ—Ä—É—î–º–æ
        if (!alias && fieldRole !== "select") {
            switch (fieldRole) {
                case "count": alias = `count_${aggregateAliasCounter++}`; break;
                case "sum":   alias = `sum_${aggregateAliasCounter++}`;   break;
                case "avg":   alias = `avg_${aggregateAliasCounter++}`;   break;
                case "min":   alias = `min_${aggregateAliasCounter++}`;   break;
                case "max":   alias = `max_${aggregateAliasCounter++}`;   break;
            }
        }
        let fieldExpr;
        if (fieldName === "*") {
            selectExpr = `"${tableName}".*`;
            hasSelect = true;
        } else {
            fieldExpr = `"${tableName}"."${fieldName}"`;
            switch (fieldRole) {
                case "select":
                    selectExpr = fieldExpr;
                    hasSelect = true;
                    break;
                case "group":
                    selectExpr = alias ? `${fieldExpr} AS ${alias}` : fieldExpr;
                    groupByFields.push(fieldExpr);
                    break;
                case "count":
                    selectExpr = `COUNT(${fieldExpr}) AS ${alias}`;
                    hasAggregate = true;
                    break;
                case "sum":
                    selectExpr = `SUM(${fieldExpr}) AS ${alias}`;
                    hasAggregate = true;
                    break;
                case "avg":
                    selectExpr = `AVG(${fieldExpr}) AS ${alias}`;
                    hasAggregate = true;
                    break;
                case "min":
                    selectExpr = `MIN(${fieldExpr}) AS ${alias}`;
                    hasAggregate = true;
                    break;
                case "max":
                    selectExpr = `MAX(${fieldExpr}) AS ${alias}`;
                    hasAggregate = true;
                    break;
                default:
                    selectExpr = fieldExpr;
                    hasSelect = true;
                    break;
            }
        }
        

        if (isVisible && selectExpr) selectFields.push(selectExpr);

        // WHERE —É–º–æ–≤–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø–æ–ª—ñ–≤ (–Ω–µ –¥–ª—è *)
        if (fieldName !== "*" && operator) {
            const fieldType = getFieldType(tableName, fieldName);
            const op = operator.toUpperCase().trim();
        
            if (op === "IS NULL" || op === "IS NOT NULL") {
                // —Ü—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è
                whereClauses.push(`${fieldExpr} ${op}`);
            } else if (op === "IN" || op === "NOT IN") {
                // –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: "a,b,c" –∞–±–æ "(a,b,c)" (—á–∏—Å–ª–∞/–¥–∞—Ç–∏/—Ä—è–¥–∫–∏)
                const items = parseList(criteria);
                const values = items.map(v => formatLiteral(v, fieldType));
                if (values.length) {
                    whereClauses.push(`${fieldExpr} ${op} (${values.join(", ")})`);
                }
            } else if (op === "BETWEEN" || op === "NOT BETWEEN") {
                // –û—á—ñ–∫—É—î–º–æ –∫—Ä–∏—Ç–µ—Ä—ñ–π —É –≤–∏–≥–ª—è–¥—ñ "20000 AND 30000"
                const parts = criteria.split(/\s+AND\s+/i);
                if (parts.length === 2) {
                    const left = formatLiteral(parts[0], fieldType);
                    const right = formatLiteral(parts[1], fieldType);
                    whereClauses.push(`${fieldExpr} ${op} ${left} AND ${right}`);
                }            
            } else if (criteria) {
                // –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (=, <>, >, <, >=, <=, LIKE, —Ç–æ—â–æ) + –æ–¥–∏–Ω–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                let right;
                if (isParameterPlaceholder(criteria)) {
                    // —è–∫—â–æ —Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä [–í–≤–µ–¥—ñ—Ç—å ...], –Ω–µ —á—ñ–ø–∞—î–º–æ
                    right = criteria;
                } else if (fieldType === "–î–∞—Ç–∞") {
                    right = sqlQuote(toIsoDate(criteria));
                } else if (fieldType === "–¢–∞–∫/–ù—ñ") {
                    const L = criteria.toLowerCase().trim();
                    if (["—Ç–∞–∫","true","1"].includes(L)) right = "1";
                    else if (["–Ω—ñ","false","0"].includes(L)) right = "0";
                    else right = isNumericLiteral(criteria) ? criteria : sqlQuote(criteria);
                } else {
                    right = isNumericLiteral(criteria) ? criteria : sqlQuote(criteria);
                }
                whereClauses.push(`${fieldExpr} ${op} ${right}`);
            }
        }
        

        if (sortBy) {
            if (alias) orderByClauses.push(`${alias} ${sortBy}`);
            else if (fieldName !== "*") orderByClauses.push(`${fieldExpr} ${sortBy}`);
        }

        queryConfig.push({
            tableName,
            fieldName,
            isVisible,
            sortBy,
            operator,
            criteria,
            fieldRole,
            alias
        });
    });

    // JOIN-–∑–≤‚Äô—è–∑–∫–∏
    const joinRows = document.querySelectorAll("#joinBody tbody tr");
    joinRows.forEach(row => {
        const tableA = row.querySelector(".join-table-a").value;
        const fieldA = row.querySelector(".join-field-a").value;
        const tableB = row.querySelector(".join-table-b").value;
        const fieldB = row.querySelector(".join-field-b").value;
        if (tableA && fieldA && tableB && fieldB) {
            joins.push({
                table: tableA,
                condition: `"${tableA}"."${fieldA}" = "${tableB}"."${fieldB}"`
            });
            if (!baseTable) baseTable = tableA;
        }
    });

    if (selectFields.length === 0) {
        Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –≤–∏–¥–∏–º–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–∏—Ç—É.");
        return;
    }

    if (!baseTable) {
        if (joins.length > 0) baseTable = joins[0].table;
        else {
            Message("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –±–∞–∑–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è FROM.");
            return;
        }
    }

    // –ü–æ–±—É–¥–æ–≤–∞ SQL
    let sql = `SELECT ${selectFields.join(", ")}\nFROM "${baseTable}"`;
    joins.forEach(join => sql += `\nJOIN "${join.table}" ON ${join.condition}`);
    if (whereClauses.length) sql += `\nWHERE ${whereClauses.join(" AND ")}`;
    if (groupByFields.length) sql += `\nGROUP BY ${groupByFields.join(", ")}`;
    else if (hasSelect && hasAggregate) {
        // –Ø–∫—â–æ —î –∞–≥—Ä–µ–≥–∞—Ç–∏ —ñ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–ª—è –±–µ–∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
        const groupByFromSelects = selectFields
            .filter(f => !f.match(/^(COUNT|SUM|AVG|MIN|MAX)\(/i) && !f.includes(".*"))
            .map(f => {
                const aliasMatch = f.match(/ AS (.+)$/i);
                return aliasMatch ? aliasMatch[1] : f;
            });
        if (groupByFromSelects.length) sql += `\nGROUP BY ${groupByFromSelects.join(", ")}`;
    }
    if (orderByClauses.length) sql += `\nORDER BY ${orderByClauses.join(", ")}`;

    const queryDefinition = { name: queryName, config: queryConfig, joins, sql };
    const existingQueryIndex = queries.definitions.findIndex(q => q.name === queryName);
    if (existingQueryIndex !== -1) queries.definitions[existingQueryIndex] = queryDefinition;
    else queries.definitions.push(queryDefinition);
    saveDatabase();

    document.getElementById("generatedSql").innerText = sql;
    document.getElementById("sqlModal").style.display = "flex";
}





    


    function closeSqlModal() {
        document.getElementById("sqlModal").style.display = "none";
    }

    let pendingQueryText = "";
    let pendingPlaceholders = [];
    let pendingQueryName = "";
    let currentPlaceholderIndex = 0;
    
    function showNextParameterPrompt() {
        if (currentPlaceholderIndex >= pendingPlaceholders.length) {
            runFinalSqlQuery();
            return;
        }
    
        const placeholder = pendingPlaceholders[currentPlaceholderIndex];
        document.getElementById("parameterPrompt").innerText = placeholder;
        document.getElementById("parameterInput").value = "";
        document.getElementById("parameterModal").style.display = "flex";
    }
    
    function confirmParameter() {
        const value = document.getElementById("parameterInput").value;
        const placeholder = pendingPlaceholders[currentPlaceholderIndex];
        const safeValue = `'${value.replace(/'/g, "''")}'`;
    
        pendingQueryText = pendingQueryText.replace(`[${placeholder}]`, safeValue);
        currentPlaceholderIndex++;
        document.getElementById("parameterModal").style.display = "none";
        showNextParameterPrompt();
    }
    
    function cancelParameter() {
        document.getElementById("parameterModal").style.display = "none";
        Message("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
    }
    

    function validateSqlQuery(sql) {
        return true;
        try {
            const errors = [];
    
            // 1. –ü—Ä–∏–±—Ä–∞—Ç–∏ —Ä–æ–∑—Ä–∏–≤–∏ —Ä—è–¥–∫—ñ–≤ (—É –ª–∞–ø–∫–æ–≤–∞–Ω–∏—Ö –Ω–∞–∑–≤–∞—Ö —Ü–µ –º–æ–∂–µ –∑–ª–∞–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑)
            sql = sql.replace(/\s+/g, ' ').trim();
    
            // 2. –ü–æ–±—É–¥–æ–≤–∞ map —Ç–∞–±–ª–∏—Ü—å -> –ø–æ–ª—ñ–≤
            const tableMap = new Map();
            database.tables.forEach(table => {
                const fieldTitles = table.schema.map(col => col.title);
                tableMap.set(table.name, fieldTitles);
            });
    
            // 3. –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –∑ FROM
            const fromMatch = sql.match(/FROM\s+["'`](.*?)["'`]/i);
            if (!fromMatch) {
                Message("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–∞–±–ª–∏—Ü—é –≤ –∑–∞–ø–∏—Ç—ñ.");
                return false;
            }
            
            const tableName = fromMatch[1].trim();
            if (!tableMap.has(tableName)) {
                Message(`–¢–∞–±–ª–∏—Ü—è "${tableName}" –Ω–µ —ñ—Å–Ω—É—î.`);
                return false;
            }
    
            const currentFields = tableMap.get(tableName);
    
            // 4. –í–∏—Ç—è–≥–Ω—É—Ç–∏ –≤—Å—ñ –ª–∞–ø–∫–æ–≤–∞–Ω—ñ –ø–æ–ª—è, –∫—Ä—ñ–º –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑ FROM
            const allMatches = [...sql.matchAll(/"([^"]+)"/g)].map(m => m[1]);
    
            // –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ, –±–æ –≤–æ–Ω–∞ —Ç–µ–∂ –ª–∞–ø–∫–æ–≤–∞–Ω–∞, –∞–ª–µ –Ω–µ —î –ø–æ–ª–µ–º
            const fieldNames = allMatches.filter(name => name !== tableName);
    
            // 5. –£–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ (–º–æ–∂–µ –±—É—Ç–∏ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ –ø–æ–ª–µ –≤ SELECT —Ç–∞ WHERE)
            const uniqueFieldNames = [...new Set(fieldNames)];
    
            for (const field of uniqueFieldNames) {
                if (!currentFields.includes(field)) {
                    errors.push(`–ü–æ–ª–µ "${field}" –Ω–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ "${tableName}".`);
                }
            }
    
            if (errors.length > 0) {
                Message("–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∏—Ç—ñ:\n" + errors.join("\n"));
                return false;
            }
    
            return true;
        } catch (err) {
            Message("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç: " + err.message);
            return false;
        }
    }
    
function executeSqlQuery() {
    console.log("executeSqlQuery")
    sqlQuery = document.getElementById("generatedSql").innerText;
    queryName = document.getElementById("queryName").value.trim();
    runSqlQuery(sqlQuery, queryName); 
}
function executeOwnSQL() {
    sqlQuery = document.getElementById("ownSqlInput").value.trim();
    queryName = document.getElementById("ownSQLName").value.trim();
    runSqlQuery(sqlQuery, queryName);
}    

function runSqlQuery(sqlQuery, queryName) {
    pendingQueryName = queryName;
    console.log("runSqlQuery")
    const matches = [...sqlQuery.matchAll(/\[([^\]]+)\]/g)];
    const uniquePlaceholders = [...new Set(matches.map(m => m[1]))];
    
    if (uniquePlaceholders.length > 0) {
            pendingQueryText = sqlQuery;
            pendingPlaceholders = uniquePlaceholders;
            currentPlaceholderIndex = 0;
            showNextParameterPrompt();
        } else {
            pendingQueryText = sqlQuery;
            runFinalSqlQuery();
        }
    }

function runFinalSqlQuery() {
    const internalQueryName = `–∑–∞–ø–∏—Ç "${pendingQueryName}"`;
    const menuDisplayName = `*${internalQueryName}`;

    try {
        const isAggregateQuery = /\b(COUNT|SUM|AVG|MIN|MAX)\s*\(/i.test(pendingQueryText);
        const res = db.exec(pendingQueryText); 
        
        if (res.length > 0) {
            const columns = res[0].columns;
            const dataRows = res[0].values;

            const schema = columns.map(col => ({
                title: col,
                type: "–¢–µ–∫—Å—Ç",
                primaryKey: false,
                comment: ""
            }));

            const queryResultTable = {
                name: internalQueryName,
                schema: schema,
                data: dataRows
            };

            const existingIndex = queries.results.findIndex(t => t.name === internalQueryName);
            if (existingIndex !== -1) {
                queries.results[existingIndex] = queryResultTable;
                const dataMenu = document.getElementById("data-menu");
                const existingItem = Array.from(dataMenu.children).find(item => item.textContent === menuDisplayName);
                if (existingItem) existingItem.remove();
            } else {
                queries.results.push(queryResultTable);
            }
            
            if (isAggregateQuery) {
                    Message("–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –û—Ç—Ä–∏–º–∞–Ω–æ —Å—É–∫—É–ø–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.");
            } else {
                    Message(`–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.\n–ó–Ω–∞–π–¥–µ–Ω–æ ${dataRows.length} –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`);                   
            }
            addTableToMenu(menuDisplayName);           
            
            closeSqlModal();
            closeQueryModal();
            closeOwnSqlModal() 
            editData(menuDisplayName);
        } else {
            Message("–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ, –∞–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            closeSqlModal();
        }
    } catch (e) {
        Message(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: ${e.message}`);
    }
}

    

    // Functions for managing saved queries
    function showSavedQueriesDialog() {
        const listEl = document.getElementById("savedQueriesList");
        listEl.innerHTML = "";
        selectedQueryName = null;

        queries.definitions.forEach(query => {
            const li = document.createElement("li");
            li.textContent = query.name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.queryName = query.name; // Store the query name in a data attribute

            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedQueryName = li.dataset.queryName;
            });
            listEl.appendChild(li);
        });
        document.getElementById("savedQueriesModal").style.display = "flex";
    }

    function closeSavedQueriesDialog() {
        document.getElementById("savedQueriesModal").style.display = "none";
        selectedQueryName = null;
    }

    
    function editSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
            return;
        }
    
        const queryToEdit = queries.definitions.find(q => q.name === selectedQueryName);
        console.log("Edit query=",selectedQueryName, queryToEdit )
        if (queryToEdit) {
            if (queryToEdit.config === null && queryToEdit.joins === null) {
                // –í–ª–∞—Å–Ω–∏–π SQL-–∑–∞–ø–∏—Ç
                editOwnQuery(queryToEdit);
            } else {
                populateQueryModal(queryToEdit);
                // –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Ç
            }
            closeSavedQueriesDialog();
        } else {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
    
    
    function executeSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.");
            return;
        }
    
        const queryDef = queries.definitions.find(q => q.name === selectedQueryName);
        if (!queryDef) {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
    
        document.getElementById("queryName").value = queryDef.name;
        document.getElementById("generatedSql").innerText = queryDef.sql;
        closeSavedQueriesDialog();
        executeSqlQuery();
    }

function populateQueryModal(queryDefinition) {
    document.getElementById("queryName").value = queryDefinition.name;
    const queryBody = document.getElementById("queryBody");
    queryBody.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ä—è–¥–∫–∏ –ø–æ–ª—ñ–≤
    document.getElementById("joinBody").querySelector("tbody").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ –∑–≤‚Äô—è–∑–∫–∏

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –ø–æ–ª—ñ–≤
    queryDefinition.config.forEach(item => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td><select class="query-table-select" onchange="populateFieldDropdown(this)"></select></td>
            <td><select class="query-field-select"></select></td>
            <td><input type="checkbox" checked class="query-visible-checkbox"></td>
            <td>
                <select class="query-sort-select">
                    <option value="">–ù–µ–≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–æ</option>
                    <option value="ASC">–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º</option>
                    <option value="DESC">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</option>
                </select>
            </td>
            <td>
                <div style="display: flex; gap: 4px; align-items: center;">
                <select class="query-operator-select" style="width: 60px;">
                    <option title="—Ä—ñ–≤–Ω–µ" value="==">==</option>
                    <option title="–º–µ–Ω—à–µ" value="<">&lt;</option>
                    <option title="–º–µ–Ω—à–µ –∞–±–æ —Ä—ñ–≤–Ω–µ" value="<=">&lt;=</option>
                    <option title="–±—ñ–ª—å—à–µ" value=">">&gt;</option>
                    <option title="–±—ñ–ª—å—à–µ –∞–±–æ —Ä—ñ–≤–Ω–µ" value=">=">&gt;=</option>
                    <option title="–Ω–µ —Ä—ñ–≤–Ω–µ" value="!=">!=</option>
                    <option title="—Å—Ö–æ–∂–µ –Ω–∞ —à–∞–±–ª–æ–Ω" value="LIKE">LIKE</option>
                    <option title="–≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø–µ—Ä–µ–ª—ñ–∫—É" value="IN">IN</option>
                    <option title="–Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø–µ—Ä–µ–ª—ñ–∫—É" value="NOT IN">NOT IN</option>
                    <option title="–≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø—Ä–æ–º—ñ–∂–∫—É" value="BETWEEN">BETWEEN</option>
                    <option title="–Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø—Ä–æ–º—ñ–∂–∫—É" value="NOT BETWEEN">NOT BETWEEN</option>
                </select>
                    <input type="text" class="query-criteria-input" style="flex: 1;">
                </div>
            </td>
            <td>
                <select class="query-field-role" title="–¢–∏–ø —É—á–∞—Å—Ç—ñ —É –∑–∞–ø–∏—Ç—ñ" onchange="toggleAliasInput(this)">
                    <option value="select">----</option>
                    <option title="–ì–†–£–ü–ê" value="group">GROUP</option>
                    <option title="–ö–Ü–õ–¨–ö–Ü–°–¢–¨" value="count">COUNT</option>
                    <option title="–°–£–ú–ê" value="sum">SUM</option>
                    <option title="–°–ï–†–ï–î–ù–Ñ" value="avg">AVG</option>
                    <option title="–ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ï" value="min">MIN</option>
                    <option title="–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ï" value="max">MAX</option>
                </select>
                <input type="text" class="query-alias-input" placeholder="–ü—Å–µ–≤–¥–æ–Ω—ñ–º" style="margin-top:4px; display:none; width:100%;">
            </td>
            <td><button onclick="deleteQueryRow(this)">‚ùå</button></td>
        `;
        queryBody.appendChild(row);

        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏
        populateTableDropdownsForRow(row);
        row.querySelector(".query-table-select").value = item.tableName;
        populateFieldDropdown(row.querySelector(".query-table-select"));
        row.querySelector(".query-field-select").value = item.fieldName;
        row.querySelector(".query-visible-checkbox").checked = item.isVisible;
        row.querySelector(".query-sort-select").value = item.sortBy;

        const operatorSelect = row.querySelector(".query-operator-select");
        const criteriaInput = row.querySelector(".query-criteria-input");

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —ñ –∫—Ä–∏—Ç–µ—Ä—ñ–π

        operatorSelect.value = item.operator;
        criteriaInput.value = item.criteria;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—å –ø–æ–ª—è (–≤–∞–∂–ª–∏–≤–æ!)
        const roleSelect = row.querySelector(".query-field-role");
        roleSelect.value = item.fieldRole || "select";     
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
        const aliasInput = row.querySelector(".query-alias-input");
        if (item.alias) {
            aliasInput.value = item.alias;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å —ñ–Ω–ø—É—Ç—É –ø—Å–µ–≤–¥–æ–Ω—ñ–º–∞
        toggleAliasInput(roleSelect);
        
        
    });

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è JOIN-–∑–≤‚Äô—è–∑–∫—ñ–≤
    if (queryDefinition.joins && queryDefinition.joins.length > 0) {
        const joinTable = document.getElementById("joinBody");
        const tbody = joinTable.querySelector("tbody");
        joinTable.style.display = "table";

        queryDefinition.joins.forEach(join => {
            const match = join.condition.match(/"([^"]+)"\."([^"]+)" = "([^"]+)"\."([^"]+)"/);
            if (!match) return;

            const [, tableA, fieldA, tableB, fieldB] = match;

            const row = document.createElement("tr");
            row.innerHTML = `
                <td><select class="join-table-a" onchange="populateJoinFields(this, true)"></select></td>
                <td><select class="join-field-a"></select></td>
                <td><select class="join-table-b" onchange="populateJoinFields(this, false)"></select></td>
                <td><select class="join-field-b"></select></td>
                <td><button onclick="this.closest('tr').remove()">‚ùå</button></td>
            `;
            tbody.appendChild(row);

            const tableSelectA = row.querySelector(".join-table-a");
            const tableSelectB = row.querySelector(".join-table-b");
            const fieldSelectA = row.querySelector(".join-field-a");
            const fieldSelectB = row.querySelector(".join-field-b");

            [tableSelectA, tableSelectB].forEach(select => {
                select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
                database.tables.forEach(t => {
                    const opt = document.createElement("option");
                    opt.value = t.name;
                    opt.textContent = t.name;
                    select.appendChild(opt);
                });
            });

            tableSelectA.value = tableA;
            tableSelectB.value = tableB;

            populateJoinFields(tableSelectA, true);
            populateJoinFields(tableSelectB, false);

            fieldSelectA.value = fieldA;
            fieldSelectB.value = fieldB;
        });
    }

    document.getElementById("queryModal").style.display = "flex";
}



    function deleteSelectedQuery() {
        if (!selectedQueryName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        const queryIndex = queries.definitions.findIndex(q => q.name === selectedQueryName);
        if (queryIndex !== -1) {
            const deletedQueryName = queries.definitions[queryIndex].name;
            queries.definitions.splice(queryIndex, 1); // Remove from definitions
            saveDatabase(); // Save updated definitions

            // Also remove any corresponding query results from `queries.results` and from the `data-menu`
            const menuDisplayName = `*–∑–∞–ø–∏—Ç "${deletedQueryName}"`; // Construct the display name for the result
            const resultIndex = queries.results.findIndex(r => r.name === `–∑–∞–ø–∏—Ç "${deletedQuery_name}"`); // Find the result by its internal name
            if (resultIndex !== -1) {
                queries.results.splice(resultIndex, 1); // Remove from results
            }

            const dataMenu = document.getElementById("data-menu");
            const existingMenuItem = Array.from(dataMenu.children).find(item => item.textContent === menuDisplayName);
            if (existingMenuItem) {
                existingMenuItem.remove(); // Remove from menu
            }

            Message(`–ó–∞–ø–∏—Ç "${deletedQueryName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
            showSavedQueriesDialog(); // Refresh the list
        } else {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
    // --------------------

    function addJoinRow() {
        const joinTable = document.getElementById("joinBody");
        const tbody = joinTable.querySelector("tbody");

        joinTable.style.display = "table"; // –ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞

        const row = document.createElement("tr");
        row.innerHTML = `
            <td><select class="join-table-a" onchange="populateJoinFields(this, true)"></select></td>
            <td><select class="join-field-a"></select></td>
            <td><select class="join-table-b" onchange="populateJoinFields(this, false)"></select></td>
            <td><select class="join-field-b"></select></td>
            <td><button onclick="this.closest('tr').remove()">‚ùå</button></td>
        `;
        tbody.appendChild(row);

        const selects = row.querySelectorAll("select");
        selects.forEach(select => {
            if (select.classList.contains("join-table-a") || select.classList.contains("join-table-b")) {
                select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
                database.tables.forEach(t => {
                    const opt = document.createElement("option");
                    opt.value = t.name;
                    opt.textContent = t.name;
                    select.appendChild(opt);
                });
            }
        });
    }


    function populateJoinFields(tableSelect, isLeft) {
        const row = tableSelect.closest("tr");
        const fieldSelect = isLeft ? row.querySelector(".join-field-a") : row.querySelector(".join-field-b");
        fieldSelect.innerHTML = "";

        const table = database.tables.find(t => t.name === tableSelect.value);
        if (table) {
            table.schema.forEach(field => {
                const opt = document.createElement("option");
                opt.value = field.title;
                opt.textContent = field.title;
                fieldSelect.appendChild(opt);
            });
        }
    }
    //

    function openRelationFromQuery() {
        const joinRows = document.querySelectorAll("#joinBody tbody tr");
        database.relations = [];

        joinRows.forEach(row => {
            const tableA = row.querySelector(".join-table-a")?.value;
            const fieldA = row.querySelector(".join-field-a")?.value;
            const tableB = row.querySelector(".join-table-b")?.value;
            const fieldB = row.querySelector(".join-field-b")?.value;

            if (tableA && fieldA && tableB && fieldB) {
                database.relations.push({
                    fromTable: tableA,
                    fromField: fieldA,
                    toTable: tableB,
                    toField: fieldB
                });
            }
        });

        saveDatabase();
        openRelationDesigner(() => {
            // callback –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ JOIN
            loadRelationsToJoinTable();
        });
    }




    // Functions for managing saved tables
    function showSavedTablesDialog() {
        const listEl = document.getElementById("savedTablesList");
        listEl.innerHTML = "";
        selectedTableNameForEdit = null; // Reset selection

        database.tables.forEach(table => {
            const li = document.createElement("li");
            li.textContent = table.name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.tableName = table.name; // Store the table name in a data attribute

            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedTableNameForEdit = li.dataset.tableName;
            });
            listEl.appendChild(li);
        });
        document.getElementById("savedTablesModal").style.display = "flex";
    }

    function closeSavedTablesDialog() {
        document.getElementById("savedTablesModal").style.display = "none";
        selectedTableNameForEdit = null;
    }

    function openSelectedTable() {
        if (!selectedTableNameForEdit) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è.");
            return;
        }
        editData(selectedTableNameForEdit); // Use existing editData function
        closeSavedTablesDialog();
    }

    function confirmDeleteTable() {
        if (!selectedTableNameForEdit) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        selectedTableNameForDelete = selectedTableNameForEdit; // Store for confirmation
        document.getElementById("deleteTableConfirmText").innerHTML =
            `–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é <b>"${selectedTableNameForDelete}"</b>?`;
        document.getElementById("deleteTableConfirmModal").style.display = "flex";
    }

    function doDeleteTable() {
        if (selectedTableNameForDelete) {
            try {
                db.run(`DROP TABLE IF EXISTS "${selectedTableNameForDelete}"`);
                // Remove from in-memory database.tables array
                database.tables = database.tables.filter(t => t.name !== selectedTableNameForDelete);
                saveDatabase(); // Persist changes to localStorage

                // Remove from "–î–∞–Ω—ñ" menu
                const dataMenu = document.getElementById("data-menu");
                const menuItemToRemove = Array.from(dataMenu.children).find(item => item.textContent === selectedTableNameForDelete);
                if (menuItemToRemove) {
                    menuItemToRemove.remove();
                }

                Message(`–¢–∞–±–ª–∏—Ü—é "${selectedTableNameForDelete}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
                closeDeleteTableConfirmModal();
                showSavedTablesDialog(); // Refresh the list in the dialog
            } catch (e) {
                Message(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: ${e.message}`);
            }
        }
    }

    function closeDeleteTableConfirmModal() {
        document.getElementById("deleteTableConfirmModal").style.display = "none";
        selectedTableNameForDelete = null;
    }



let isGridVisible = false; // Track grid visibility


function populateFieldPanelTableSelect() {
    fieldPanelTableSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –∞–±–æ –∑–∞–ø–∏—Ç</option>";
    database.tables.forEach(table => {
        const option = document.createElement("option");
        option.value = table.name;
        option.textContent = table.name;
        fieldPanelTableSelect.appendChild(option);
    });
    queries.results.forEach(query => {
        const option = document.createElement("option");
        option.value = `*${query.name}`;
        option.textContent = `*${query.name}`;
        fieldPanelTableSelect.appendChild(option);
    });
}


let startX, startY, startWidth, startHeight;




function cancelFieldSelection() {
    document.getElementById("fieldSelectionModal").style.display = "none";
}

function closeReportCreatorModal() {
    document.getElementById("reportCreatorModal").style.display = "none";
    document.getElementById("reportCanvas").classList.remove('grid-visible');
    isGridVisible = false;
}

let activeElement = null;
let isDragging = false;
let isResizing = false;
let resizeHandle = null;
let initialX, initialY;
let initialLeft, initialTop, initialWidth, initialHeight;

    // --- —Å–ø—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º —ñ –∑–≤—ñ—Ç—ñ–≤ ---
    
function initFieldPanelListeners(tableSelect, fieldSelect, fieldClass) {
        tableSelect.addEventListener("change", () => {
            const selectedTableName = tableSelect.value;
            const selectedTable =
                database.tables.find(t => t.name === selectedTableName) ||
                queries.results.find(q => `*${q.name}` === selectedTableName);
    
            fieldSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ</option>";
            if (selectedTable) {
                selectedTable.schema.forEach(field => {
                    const option = document.createElement("option");
                    option.value = field.title;
                    option.textContent = field.title;
                    fieldSelect.appendChild(option);
                });
            }
            if (activeElement && activeElement.classList.contains(fieldClass)) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                const currentField = activeElement.dataset.fieldName || "";
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = selectedTableName ? `${selectedTableName}.${currentField}` : "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
                }
                activeElement.dataset.tableName = selectedTableName;
            }
        });
    
        fieldSelect.addEventListener("change", () => {
            const selectedTableName = tableSelect.value;
            const selectedFieldName = fieldSelect.value;
            if (activeElement && activeElement.classList.contains(fieldClass) && selectedTableName && selectedFieldName) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = `${selectedTableName}.${selectedFieldName}`;
                }
                activeElement.dataset.tableName = selectedTableName;
                activeElement.dataset.fieldName = selectedFieldName;
            } else if (activeElement && activeElement.classList.contains(fieldClass)) {
                const fieldTextDiv = activeElement.querySelector('.field-text');
                if (fieldTextDiv) {
                    fieldTextDiv.innerText = tableSelect.value ? `${tableSelect.value}.` : "–ü–æ–ª–µ –¥–∞–Ω–∏—Ö";
                }
                delete activeElement.dataset.fieldName;
            }
        });
    }
    

document.addEventListener('DOMContentLoaded', () => {
    //  –æ–±—Ä–æ–±–Ω–∏–∫–∏ 
    initFieldPanelListeners(fieldPanelTableSelect, fieldPanelFieldSelect, "report-field");
    // --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É ---
    document.getElementById("fontFamilySelect").addEventListener("change", (e) => {
        if (activeElement && isTextElement(activeElement)) activeElement.style.fontFamily = e.target.value;
    });
    document.getElementById("fontSizeInput").addEventListener("input", (e) => {
        if (activeElement && isTextElement(activeElement)) activeElement.style.fontSize = `${e.target.value}px`;
    });
    document.getElementById("fontColorInput").addEventListener("input", (e) => {
        if (activeElement && isTextElement(activeElement)) activeElement.style.color = e.target.value;
    });
    document.getElementById("fontWeightToggle").addEventListener("change", (e) => {
        if (activeElement && isTextElement(activeElement)) activeElement.style.fontWeight = e.target.checked ? 'bold' : 'normal';
    });
    document.getElementById("fontStyleToggle").addEventListener("change", (e) => {
        if (activeElement && isTextElement(activeElement)) activeElement.style.fontStyle = e.target.checked ? 'italic' : 'normal';
    });
    document.getElementById("textDecorationUnderline").addEventListener("change", (e) => {
        if (activeElement && isTextElement(activeElement)) updateTextDecoration();
    });
    document.getElementById("textDecorationStrikethrough").addEventListener("change", (e) => {
        if (activeElement && isTextElement(activeElement)) updateTextDecoration();
    });
});

function populateFieldSelectionPanel() {
    const fieldPanelTableSelect = document.getElementById("fieldPanelTableSelect");
    fieldPanelTableSelect.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
    database.tables.forEach(table => {
        const option = document.createElement("option");
        option.value = table.name;
        option.textContent = table.name;
        fieldPanelTableSelect.appendChild(option);
    });
    queries.results.forEach(query => {
        const option = document.createElement("option");
        option.value = `*${query.name}`;
        option.textContent = `*${query.name}`;
        fieldPanelTableSelect.appendChild(option);
    });

    if (activeElement && activeElement.dataset.tableName) {
        fieldPanelTableSelect.value = activeElement.dataset.tableName;
        const event = new Event('change');
        fieldPanelTableSelect.dispatchEvent(event);
    } else {
        fieldPanelTableSelect.value = "";
    }
    if (activeElement && activeElement.dataset.fieldName) {
        document.getElementById("fieldPanelFieldSelect").value = activeElement.dataset.fieldName;
    } else {
        document.getElementById("fieldPanelFieldSelect").value = "";
    }
}




    function openTextOptions() {
        if (!activeElement || !isTextElement(activeElement)) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç '–ù–∞–ø–∏—Å' –∞–±–æ '–ü–æ–ª–µ' –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.");
            return;
        }


        // Populate modal with current activeElement styles
        const fontFamilySelect = document.getElementById("fontFamilySelect");
        const fontSizeInput = document.getElementById("fontSizeInput");
        const fontColorInput = document.getElementById("fontColorInput");
        const fontWeightToggle = document.getElementById("fontWeightToggle");
        const fontStyleToggle = document.getElementById("fontStyleToggle");
        const textDecorationUnderline = document.getElementById("textDecorationUnderline");
        const textDecorationStrikethrough = document.getElementById("textDecorationStrikethrough");

        fontFamilySelect.value = activeElement.style.fontFamily || 'Arial';
        fontSizeInput.value = parseInt(activeElement.style.fontSize) || 16;
        fontColorInput.value = activeElement.style.color || '#000000';
        fontWeightToggle.checked = activeElement.style.fontWeight === 'bold';
        fontStyleToggle.checked = activeElement.style.fontStyle === 'italic';

        const textDecoration = activeElement.style.textDecoration;
        textDecorationUnderline.checked = textDecoration.includes('underline');
        textDecorationStrikethrough.checked = textDecoration.includes('line-through');


        document.getElementById("textOptionsModal").style.display = "flex";
    }

    function closeTextOptionsModal() {
        document.getElementById("textOptionsModal").style.display = "none";
    }

    function updateTextDecoration() {
        const textDecorationUnderline = document.getElementById("textDecorationUnderline");
        const textDecorationStrikethrough = document.getElementById("textDecorationStrikethrough");

        let decorations = [];
        if (textDecorationUnderline.checked) {
            decorations.push('underline');
        }
        if (textDecorationStrikethrough.checked) {
            decorations.push('line-through');
        }
        if (activeElement) {
            activeElement.style.textDecoration = decorations.join(' ');
        }
    }

    function saveReport() {
        const reportName = document.getElementById("reportNameInput").value.trim();
        const reportCanvas = document.getElementById("reportCanvas");

        const elements = [...reportCanvas.querySelectorAll('.report-element')].map(el => {
            const type = el.classList.contains("report-label") ? "label" : "field";

            return {
                type,
                left: el.offsetLeft,
                top: el.offsetTop,
                width: el.offsetWidth,
                height: el.offsetHeight,
                fontFamily: el.style.fontFamily || "Arial",
                fontSize: el.style.fontSize || "16px",
                fontWeight: el.style.fontWeight || "normal",
                fontStyle: el.style.fontStyle || "normal",
                textDecoration: el.style.textDecoration || "",
                color: el.style.color || "#000000",
                text: el.innerText || "",
                tableName: el.dataset.tableName || null,
                fieldName: el.dataset.fieldName || null
            };
        });

        const reportObject = {
            name: reportName,
            elements
        };

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ø–∞–º‚Äô—è—Ç—ñ
        const index = database.reports.findIndex(r => r.name === reportName);
        if (index !== -1) {
            database.reports[index] = reportObject;
        } else {
            database.reports.push(reportObject);
        }

        saveDatabase();
        Message(`–ó–≤—ñ—Ç "${reportName}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`);
    }



    function isTextElement(el) {
        return el.classList.contains("report-label") || el.classList.contains("report-field") || el.classList.contains("form-label") || el.classList.contains("form-field");
    }

    function addPx(value) {
        if (typeof value === "number") return value + "px";
        if (typeof value === "string" && !value.endsWith("px") && /^\d+$/.test(value)) {
            return value + "px";
        }
        return value;
    }


    function previewReport(report = null) {
        const previewModal = document.getElementById("reportPreviewModal");
        const previewCanvas = document.getElementById("reportPreviewCanvas");
        const titleEl = document.getElementById("reportPreviewTitle");

        previewCanvas.innerHTML = "";

        let elements = [];
        let reportName = "";

        if (report) {
            reportName = report.name || "–ó–≤—ñ—Ç –±–µ–∑ –Ω–∞–∑–≤–∏";
            elements = report.elements || [];
        } else {
            reportName = document.getElementById("reportNameInput").value.trim();
            const canvasElements = document.querySelectorAll("#reportCanvas .report-element");
            elements = Array.from(canvasElements).map(el => {
                const type = el.classList.contains("report-label") ? "label" : "field";
                return {
                    type: type,
                    text: el.innerText.trim(),
                    left: el.style.left,
                    top: el.style.top,
                    width: el.style.width,
                    height: el.style.height,
                    fontFamily: el.style.fontFamily || 'Arial',
                    fontSize: el.style.fontSize || '16px',
                    fontWeight: el.style.fontWeight || 'normal',
                    fontStyle: el.style.fontStyle || 'normal',
                    textDecoration: el.style.textDecoration || '',
                    color: el.style.color || '#000000',
                    tableName: el.dataset.tableName || '',
                    fieldName: el.dataset.fieldName || ''
                };
            });
        }

        titleEl.innerText = reportName;

        elements.forEach(el => {
            const clone = document.createElement("div");

            Object.assign(clone.style, {
                position: "absolute",
                left: addPx(el.left),
                top: addPx(el.top),
                width: addPx(el.width),
                height: addPx(el.height),
                fontFamily: el.fontFamily,
                fontSize: el.fontSize,
                fontWeight: el.fontWeight,
                fontStyle: el.fontStyle,
                textDecoration: el.textDecoration,
                color: el.color,
                padding: "5px",
                boxSizing: "border-box",
                overflow: "auto",
                whiteSpace: "pre-line",
                border: "none",
                backgroundColor: "transparent"
            });

            if (el.type === "label") {
                clone.innerText = el.text;
            }

        if (el.type === "field") {
            const tableName = el.tableName;
            const fieldName = el.fieldName;
        
            let lines = [];
            const table = findTableOrQuery(tableName);  // üÜï —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ
        
            if (table && table.data.length > 0) {
                const colIndex = table.schema.findIndex(col => col.title === fieldName);
                if (colIndex !== -1) {
                    lines = table.data.map(row => row[colIndex] ?? "");
                } else {
                    lines = ["–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"];
                }
            } else {
                lines = ["–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"];
            }
        
            clone.innerText = lines.join("\n");
        }
        

            previewCanvas.appendChild(clone);
        });

        previewModal.style.display = "flex";
    }

    function findTableOrQuery(tableName) {
        return (
            database.tables.find(t => t.name === tableName) ||
            queries.results.find(q => `*${q.name}` === tableName)
        );
    }




    function closeReportPreview() {
        document.getElementById("reportPreviewModal").style.display = "none";
    }

    let relationLines = [];
    let selectedFieldEl = null;
    let onRelationModalClose = null;

    function openRelationDesigner(callback) {
        const modal = document.getElementById("relationModal");
        const canvas = document.getElementById("relationCanvas");
        canvas.innerHTML = ""; // –æ—á–∏—Å—Ç–∏—Ç–∏
        console.log(">database.relations=",database.relations)
        relationLines = [];
        selectedFieldEl = null;
        onRelationModalClose = callback;
        // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        database.relations = database.relations.filter(rel => !rel.readonly);
        database.tables.forEach(table => {
            table.schema.forEach(field => {
                if (field.foreignKey && field.refTable && field.refField) {
                    database.relations.push({
                        fromTable: table.name,
                        fromField: field.title,
                        toTable: field.refTable,
                        toField: field.refField,
                        readonly: true, // üëà –¶–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó —è–∫ "—á–µ—Ä–≤–æ–Ω–∏–π —ñ –Ω–µ–∑–º—ñ–Ω–Ω–∏–π"
                    });
                }
            });
        });
        console.log(">>database.relations=",database.relations)
    
        const offsetX = 50, offsetY = 50;
    
        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—å
        database.tables.forEach((table, i) => {
            const block = document.createElement("div");
            block.className = "relation-table";
            block.style.position = "absolute";
            block.style.left = `${offsetX + (i % 3) * 300}px`;
            block.style.top = `${offsetY + Math.floor(i / 3) * 250}px`;
            block.style.width = "180px";
            block.style.opacity = "0.65";
            block.style.background = "#fff";
            block.style.border = "1px solid #aaa";
            block.style.boxShadow = "2px 2px 4px rgba(0,0,0,0.1)";
            block.style.cursor = "move";
            block.style.padding = "0px";
            block.dataset.tableName = table.name;
    
            const pkField = table.schema.find(col => col.primaryKey)?.title;
    
            const title = document.createElement("div");
            title.innerText = table.name;
            title.style.fontWeight = "bold";
            title.style.padding = "4px 8px";
            title.style.backgroundColor = "#eee";
            title.style.borderBottom = "1px solid #ccc";
            title.style.borderTopLeftRadius = "4px";
            title.style.borderTopRightRadius = "4px";
            block.appendChild(title);
    
            const tableList = document.createElement("table");
            table.schema.forEach(field => {
                const row = document.createElement("tr");
                const cell = document.createElement("td");
                cell.innerText = field.title + (field.title === pkField ? " üîë " : "");
    
                cell.style.padding = "0px";
                cell.style.border = "1px solid #ddd";
                cell.style.cursor = "pointer";
                cell.style.width = "178px";
                cell.dataset.table = table.name;
                cell.dataset.field = field.title;
    
                cell.addEventListener("click", () => handleFieldClick(cell));
                cell.addEventListener("dblclick", () => {
                    const index = relationLines.findIndex(rel =>
                        (rel.from === cell || rel.to === cell)
                    );
                    if (index !== -1) {
                        const rel = relationLines[index];
                        if (rel.readonly) {
                            Message("–¶–µ–π –∑–≤‚Äô—è–∑–æ–∫ —î —Å–∏—Å—Ç–µ–º–Ω–∏–º —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π.");
                            return;
                        }
                        relationLines.splice(index, 1);
    
                        // üíæ –û–Ω–æ–≤–∏—Ç–∏ database.relations –ª–∏—à–µ –¥–ª—è —Ä—É—á–Ω–∏—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤
                        const userRelations = relationLines
                            .filter(line => !line.readonly)
                            .map(line => ({
                                fromTable: line.from.dataset.table,
                                fromField: line.from.dataset.field,
                                toTable: line.to.dataset.table,
                                toField: line.to.dataset.field,
                                color: line.color,
                                readonly: false
                            }));
                        
                        const readonlyRelations = database.relations.filter(rel => rel.readonly);
                        database.relations = [...readonlyRelations, ...userRelations];
    
                        saveDatabase();
                        redrawLines();
                    }
                });
    
                row.appendChild(cell);
                tableList.appendChild(row);
            });
    
            block.appendChild(tableList);
            makeDraggable(block);
            canvas.appendChild(block);
        });
    
        // üîÅ –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏
        relationLines = [];
        console.log(">>>database.relations=",database.relations)
        if (Array.isArray(database.relations)) {
            database.relations.forEach(rel => {
                const fromCell = [...canvas.querySelectorAll("td")]
                    .find(td => td.dataset.table === rel.fromTable && td.dataset.field === rel.fromField);
                const toCell = [...canvas.querySelectorAll("td")]
                    .find(td => td.dataset.table === rel.toTable && td.dataset.field === rel.toField);
    
                if (fromCell && toCell) {
                    relationLines.push({
                        from: fromCell,
                        to: toCell,
                        readonly: rel.readonly || false,
                        color: rel.color || "red"
                    });
                }
            });
        }
    
        requestAnimationFrame(redrawLines); // üñç –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—ó –ø—ñ—Å–ª—è DOM
    
        modal.style.display = "flex";
    
        modal.querySelector(".close-btn").onclick = () => {
            modal.style.display = "none";
            if (typeof callback === "function") callback();
        };
    }
    

    function handleFieldClick(cell) {
        if (cell.classList.contains("selected")) {
            cell.classList.remove("selected");
            selectedFieldEl = null;
            redrawLines();
            return;
        }

        if (!selectedFieldEl) {
            cell.classList.add("selected");
            selectedFieldEl = cell;
        } else {
            if (selectedFieldEl === cell) return;

            // –î–æ–¥–∞—Ç–∏ –∑–≤'—è–∑–æ–∫
            relationLines.push({
                from: selectedFieldEl,
                to: cell
            });

            // üîÑ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É database.relations
            database.relations = relationLines.map(line => ({
                fromTable: line.from.dataset.table,
                fromField: line.from.dataset.field,
                toTable: line.to.dataset.table,
                toField: line.to.dataset.field
            }));
            saveDatabase();


            selectedFieldEl.classList.remove("selected");
            cell.classList.remove("selected");
            selectedFieldEl = null;

            redrawLines();
        }
    }


    function makeDraggable(el) {
        const canvas = document.getElementById("relationCanvas");
        let isDragging = false;
        let offsetX = 0,
            offsetY = 0;

        el.addEventListener("mousedown", e => {
            if (e.target.tagName === "TD") return; // –Ω–µ —á—ñ–ø–∞—î–º–æ –∫–ª—ñ–∫–∏ –ø–æ –ø–æ–ª—è—Ö
            isDragging = true;

            const rect = el.getBoundingClientRect();
            const canvasRect = canvas.getBoundingClientRect();

            // –ó—Å—É–≤ –º—ñ–∂ –∫—É—Ä—Å–æ—Ä–æ–º —ñ –≤–µ—Ä—Ö–Ω—ñ–º –ª—ñ–≤–∏–º –∫—É—Ç–æ–º –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;

            // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            const onMouseMove = (e) => {
                if (!isDragging) return;

                const x = e.clientX - canvasRect.left - offsetX;
                const y = e.clientY - canvasRect.top - offsetY;

                el.style.left = `${x}px`;
                el.style.top = `${y}px`;

                redrawLines();
            };

            const onMouseUp = () => {
                isDragging = false;
                document.removeEventListener("mousemove", onMouseMove);
                document.removeEventListener("mouseup", onMouseUp);
            };

            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", onMouseUp);
        });
    }



function redrawLines() {
    const canvas = document.getElementById("relationCanvas");

    const existingSvg = document.getElementById("relation-svg");
    if (existingSvg) existingSvg.remove();

    const svgEl = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgEl.setAttribute("id", "relation-svg");
    svgEl.style.position = "absolute";
    svgEl.style.top = 0;
    svgEl.style.left = 0;
    svgEl.style.width = "100%";
    svgEl.style.height = "100%";
    svgEl.style.zIndex = "0";
    svgEl.style.pointerEvents = "none";

    // <defs> –¥–ª—è —Å—Ç—Ä—ñ–ª–æ–∫
    const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");

    // –ß–µ—Ä–≤–æ–Ω–∞ —Å—Ç—Ä—ñ–ª–∫–∞ (FOREIGN KEY)
    const markerRed = document.createElementNS("http://www.w3.org/2000/svg", "marker");
    markerRed.setAttribute("id", "arrowRed");
    markerRed.setAttribute("markerWidth", "6");
    markerRed.setAttribute("markerHeight", "6");
    markerRed.setAttribute("refX", "6");
    markerRed.setAttribute("refY", "3");
    markerRed.setAttribute("orient", "auto");
    markerRed.setAttribute("markerUnits", "strokeWidth");

    const pathRed = document.createElementNS("http://www.w3.org/2000/svg", "path");
    pathRed.setAttribute("d", "M 0 0 L 6 3 L 0 6 z");
    pathRed.setAttribute("fill", "red");
    markerRed.appendChild(pathRed);
    defs.appendChild(markerRed);

    // –ë–ª–∞–∫–∏—Ç–Ω–∞ —Å—Ç—Ä—ñ–ª–∫–∞ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ)
    const markerBlue = document.createElementNS("http://www.w3.org/2000/svg", "marker");
    markerBlue.setAttribute("id", "arrowBlue");
    markerBlue.setAttribute("markerWidth", "6");
    markerBlue.setAttribute("markerHeight", "6");
    markerBlue.setAttribute("refX", "6");
    markerBlue.setAttribute("refY", "3");
    markerBlue.setAttribute("orient", "auto");
    markerBlue.setAttribute("markerUnits", "strokeWidth");

    const pathBlue = document.createElementNS("http://www.w3.org/2000/svg", "path");
    pathBlue.setAttribute("d", "M 0 0 L 6 3 L 0 6 z");
    pathBlue.setAttribute("fill", "deepskyblue");
    markerBlue.appendChild(pathBlue);
    defs.appendChild(markerBlue);

    svgEl.appendChild(defs);

    const canvasRect = canvas.getBoundingClientRect();

    relationLines.forEach(line => {
        const fromRect = line.from.getBoundingClientRect();
        const toRect = line.to.getBoundingClientRect();

        const fromCenterX = fromRect.left + fromRect.width / 2 - canvasRect.left;
        const toCenterX = toRect.left + toRect.width / 2 - canvasRect.left;

        // –±–∞–∑–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        let fromY = fromRect.top + fromRect.height / 2 - canvasRect.top;
        let toY = toRect.top + toRect.height / 2 - canvasRect.top;

        // —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –∑–≤'—è–∑–æ–∫ ‚Üí –∑–º—ñ—â—É—î–º–æ –≤–Ω–∏–∑
        if (!line.readonly) {
            fromY += 3;
            toY += 3;
        }

        const H_OFFSET = 12;
        let fromX, toX, fromDir, toDir;

        if (fromCenterX < toCenterX) {
            fromX = fromRect.left + fromRect.width - canvasRect.left;
            toX = toRect.left - canvasRect.left;
            fromDir = +1;
            toDir = -1;
        } else {
            fromX = fromRect.left - canvasRect.left;
            toX = toRect.left + toRect.width - canvasRect.left;
            fromDir = -1;
            toDir = +1;
        }

        const p1 = { x: fromX, y: fromY };
        const p2 = { x: fromX + fromDir * H_OFFSET, y: fromY };
        const p4 = { x: toX + toDir * H_OFFSET, y: toY };
        const p5 = { x: toX, y: toY };

        const points = [p1, p2, p4, p5].map(p => `${p.x},${p.y}`).join(" ");

        const path = document.createElementNS("http://www.w3.org/2000/svg", "polyline");
        path.setAttribute("points", points);
        path.setAttribute("fill", "none");

        if (line.readonly) {
            path.setAttribute("stroke", "red");
            path.setAttribute("marker-end", "url(#arrowRed)");
        } else {
            path.setAttribute("stroke", "deepskyblue");
            path.setAttribute("marker-end", "url(#arrowBlue)");
        }

        path.setAttribute("stroke-width", "2");
        svgEl.appendChild(path);
    });

    canvas.insertBefore(svgEl, canvas.firstChild);
}






    function closeRelationModal() {
        document.getElementById("relationModal").style.display = "none";
        if (typeof onRelationModalClose === "function") {
            onRelationModalClose();
            onRelationModalClose = null; // –æ—á–∏—Å—Ç–∏—Ç–∏
        }
    }


    function saveRelations() {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∑–≤‚Äô—è–∑–∫–∏ (–Ω–µ readonly)
        const userRelations = relationLines
            .filter(line => !line.readonly)
            .map(line => ({
                fromTable: line.from.dataset.table,
                fromField: line.from.dataset.field,
                toTable: line.to.dataset.table,
                toField: line.to.dataset.field,
                color: line.color || "black",
                readonly: false
            }));
    
        // –ó–∞–ª–∏—à–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏ (readonly) –±–µ–∑ –∑–º—ñ–Ω
        const systemRelations = database.relations.filter(rel => rel.readonly);
    
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∑–≤‚Äô—è–∑–∫–∏
        database.relations = [...systemRelations, ...userRelations];
    
        saveDatabase();
        Message("–ó–≤‚Äô—è–∑–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
        closeRelationModal();
    }
    

    function loadRelationsToJoinTable() {
        const joinTable = document.getElementById("joinBody");
        const tbody = joinTable.querySelector("tbody");
        tbody.innerHTML = "";
        joinTable.style.display = "table";
    
        // –ë–µ—Ä–µ–º–æ –ª–∏—à–µ –Ω–µ-readonly –∑–≤‚Äô—è–∑–∫–∏
        database.relations
            .filter(rel => !rel.readonly)
            .forEach(rel => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td><select class="join-table-a" onchange="populateJoinFields(this, true)"></select></td>
                    <td><select class="join-field-a"></select></td>
                    <td><select class="join-table-b" onchange="populateJoinFields(this, false)"></select></td>
                    <td><select class="join-field-b"></select></td>
                    <td><button onclick="this.closest('tr').remove()">‚úï</button></td>
                `;
                tbody.appendChild(row);
    
                const tableSelectA = row.querySelector(".join-table-a");
                const tableSelectB = row.querySelector(".join-table-b");
                const fieldSelectA = row.querySelector(".join-field-a");
                const fieldSelectB = row.querySelector(".join-field-b");
    
                [tableSelectA, tableSelectB].forEach(select => {
                    select.innerHTML = "<option value=''>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é</option>";
                    database.tables.forEach(t => {
                        const opt = document.createElement("option");
                        opt.value = t.name;
                        opt.textContent = t.name;
                        select.appendChild(opt);
                    });
                });
    
                tableSelectA.value = rel.fromTable;
                tableSelectB.value = rel.toTable;
    
                populateJoinFields(tableSelectA, true);
                populateJoinFields(tableSelectB, false);
    
                fieldSelectA.value = rel.fromField;
                fieldSelectB.value = rel.toField;
            });
    }
    


async function exportDTA() {
    const zip = new JSZip();

    // SQLite –±–∞–∑–∞
    const dbData = db.export();
    zip.file("database.sqlite", dbData);

    // –ó–∞–ø–∏—Ç–∏
    const queriesJson = JSON.stringify(queries.definitions, null, 2);
    zip.file("queries.json", queriesJson);

    // –ó–≤—ñ—Ç–∏
    const reportsJson = JSON.stringify(database.reports, null, 2);
    zip.file("reports.json", reportsJson);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
    zip.file("query-results.json", JSON.stringify(queries.results || []));

    // –°—Ö–µ–º–∏ (–±–µ–∑ data)
    const schemas = database.tables.map(t => ({
        name: t.name,
        schema: t.schema
    }));
    zip.file("schemas.json", JSON.stringify(schemas, null, 2));

    // üÜï –§–æ—Ä–º–∏
    const formsJson = JSON.stringify(database.forms || [], null, 2);
    zip.file("forms.json", formsJson);

    // –ê—Ä—Ö—ñ–≤
    const content = await zip.generateAsync({ type: "blob" });
    const filename = (database.fileName || "my_database") + ".dta";

    const a = document.createElement("a");
    a.href = URL.createObjectURL(content);
    a.download = filename;
    a.click();
}


async function importDTA(file) {
    const zip = await JSZip.loadAsync(file);
    const dbFile = await zip.file("database.sqlite").async("uint8array");
    db = new SQL.Database(dbFile);
    database.fileName = file.name.split('.')[0];

    // –ó–∞–ø–∏—Ç–∏
    const queriesText = await zip.file("queries.json").async("string");
    queries.definitions = JSON.parse(queriesText);

    // –ó–≤—ñ—Ç–∏
    const reportsText = await zip.file("reports.json").async("string");
    database.reports = JSON.parse(reportsText);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
    if (zip.file("query-results.json")) {
        const resultsText = await zip.file("query-results.json").async("string");
        queries.results = JSON.parse(resultsText);
    } else {
        queries.results = [];
    }

    // –°—Ö–µ–º–∏
    let savedSchemas = [];
    if (zip.file("schemas.json")) {
        const schemasText = await zip.file("schemas.json").async("string");
        savedSchemas = JSON.parse(schemasText);
    }

    // üÜï –§–æ—Ä–º–∏
    if (zip.file("forms.json")) {
        const formsText = await zip.file("forms.json").async("string");
        database.forms = JSON.parse(formsText);
    } else {
        database.forms = [];
    }

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —á–µ—Ä–µ–∑ sqlite_master + savedSchemas
    database.tables = [];
    const res = db.exec("SELECT name, sql FROM sqlite_master WHERE type='table';");
    if (res.length > 0) {
        const tableRows = res[0].values;
        tableRows.forEach(([name, sql]) => {
            if (name.startsWith("sqlite_")) return;

            const savedSchema = savedSchemas.find(s => s.name === name)?.schema;

            let schema = [];
            if (savedSchema) {
                schema = savedSchema;
            } else {
                const match = sql.match(/\((.+)\)/s);
                if (match) {
                    const schemaText = match[1];
                    const schemaParts = schemaText.split(",").map(s => s.trim());
                    schema = schemaParts.map(part => {
                        const [titleRaw, typeRaw, ...rest] = part.split(/\s+/);
                        return {
                            title: titleRaw.replace(/"/g, ''),
                            type: typeRaw === "INTEGER" ? "–¶—ñ–ª–µ —á–∏—Å–ª–æ" :
                                  typeRaw === "REAL"    ? "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ" :
                                  typeRaw === "BOOLEAN" ? "–¢–∞–∫/–ù—ñ" :
                                  typeRaw === "TEXT"    ? "–¢–µ–∫—Å—Ç" : typeRaw,
                            primaryKey: rest.includes("PRIMARY") || rest.includes("PRIMARY KEY"),
                            comment: rest.includes("PRIMARY") ? "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á" : ""
                        };
                    });
                }
            }

            const selectRes = db.exec(`SELECT * FROM "${name}"`);
            const dataRows = selectRes.length ? selectRes[0].values : [];

            database.tables.push({
                name,
                schema,
                data: dataRows
            });
        });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é
    document.getElementById("data-menu").innerHTML = "";
    database.tables.forEach(t => addTableToMenu(t.name));
    queries.results.forEach(q => addTableToMenu(`*${q.name}`));

    saveDatabase();
    Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ .dta —Ñ–∞–π–ª—É.");
    updateMainTitle();
    updateQuickAccessPanel(
        getCurrentTableNames(),
        getCurrentQueryNames(),
        getCurrentReportNames(),
        getCurrentFormNames()
    );
}
/**
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º
 **/
function createConstructor() {
        document.getElementById(constructorMode+"CreatorModal").style.display = "flex";
        let newMode = "–ù–æ–≤–∞_—Ñ–æ—Ä–º–∞";
        if (constructorMode==="report") newMode = "–ù–æ–≤–∏–π_–∑–≤—ñ—Ç";
        document.getElementById(constructorMode+"NameInput").value = newMode;
        screenCanvas = document.getElementById(constructorMode+"Canvas");
        screenCanvas.innerHTML = "";
        document.getElementById("fieldSelectionModal").style.display = "none";        
        document.getElementById(constructorMode+"Canvas").classList.remove('grid-visible');
        isGridVisible = false;

}
/**
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤
 **/
function createReport() {
        constructorMode = "report";
        createConstructor();
    }
/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
 **/
function editSelectedReport() {
        if (!selectedReportName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
            return;
        }
        document.getElementById("reportListModal").style.display = "none";
        const report = database.reports.find(r => r.name === selectedReportName);
        if (!report) {
            Message("–ó–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
        constructorMode = "report";
        screenCanvas = document.getElementById(constructorMode+"Canvas");
        renderCanvas(report);

        document.getElementById("reportCreatorModal").style.display = "flex";

        Message(`–ó–≤—ñ—Ç "${report.name}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.`);
}    
/** **/
let currentFormRecordIndex = 0; // For form viewer navigation
let selectedFormName = null; // To keep track of the selected form in the saved forms dialog 
let selectedFormField = null;   
/**
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ–æ—Ä–º
 **/
function createForm() {
        constructorMode = "form";
        createConstructor();
    }

function saveForm() {
        const formName = document.getElementById("formNameInput").value.trim();
        const formCanvas = document.getElementById("formCanvas");

        const elements = [...formCanvas.querySelectorAll('.form-element')].map(el => {
            const type = el.classList.contains("form-label") ? "label" : "field";

            return {
                type,
                left: el.offsetLeft,
                top: el.offsetTop,
                width: el.offsetWidth,
                height: el.offsetHeight,
                fontFamily: el.style.fontFamily || "Arial",
                fontSize: el.style.fontSize || "16px",
                fontWeight: el.style.fontWeight || "normal",
                fontStyle: el.style.fontStyle || "normal",
                textDecoration: el.style.textDecoration || "",
                color: el.style.color || "#000000",
                text: el.innerText?.trim() || "",
                tableName: el.dataset.tableName || null,
                fieldName: el.dataset.fieldName || null
            };
        });

        const formObject = {
            name: formName,
            elements
        };

        const index = database.forms.findIndex(f => f.name === formName);
        if (index !== -1) database.forms[index] = formObject;
        else database.forms.push(formObject);

        saveDatabase();
        Message(`–§–æ—Ä–º—É "${formName}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`);
}

/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó —Ñ–æ—Ä–º–∏
 **/
function editSelectedForm() {
        if (!selectedFormName) {
            Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
            return;
        }

        const form = database.forms.find(f => f.name === selectedFormName);
        if (!form) {
            Message("–§–æ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        document.getElementById("savedFormsModal").style.display = "none";
        constructorMode = "form";
        screenCanvas = document.getElementById(constructorMode+"Canvas");
        renderCanvas(form);

        document.getElementById("formCreatorModal").style.display = "flex";

        Message(`–§–æ—Ä–º–∞ "${form.name}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.`);
}

function closeFormModal() {
        document.getElementById("formCreatorModal").style.display = "none";
        // Ensure the field selection panel is hidden when closing the modal
        document.getElementById("fieldSelectionModal").style.display = "none";        
        // Ensure grid is off when closing report creator
        document.getElementById("formCanvas").classList.remove('grid-visible');
        isGridVisible = false;

}
function showSavedFormsDialog() {
        const listEl = document.getElementById("savedFormsList");
        if (!listEl) {
            console.error("–ï–ª–µ–º–µ–Ω—Ç #savedFormsList –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ modal –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ä–º —ñ—Å–Ω—É—î.");
            Message("–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ä–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
        listEl.innerHTML = "";
        selectedFormName = null;

        if (database && database.forms) {
            database.forms.forEach(form => {
                const li = document.createElement("li");
                li.textContent = form.name;
                li.style.padding = "8px";
                li.style.cursor = "pointer";
                li.dataset.formName = form.name;

                li.addEventListener("click", () => {
                    [...listEl.children].forEach(el => el.style.background = "");
                    li.style.background = "#d0e0ff";
                    selectedFormName = li.dataset.formName;
                });
                listEl.appendChild(li);
            });
        }
        document.getElementById("savedFormsModal").style.display = "flex";
    }

function deleteSelectedFormElement() {
      if (!activeElement || !activeElement.classList.contains("form-element")) {
        Message("–í–∏–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
        return;
      }
    
      activeElement.remove();
      activeElement = null;
 }    

function closeSavedFormsDialog() {
        const savedFormsModal = document.getElementById("savedFormsModal");
        if (savedFormsModal) {
            savedFormsModal.style.display = "none";
        }
        selectedFormName = null;
}

function previewSelecteForm() {
        if (!selectedFormName) {
            Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.");
            return;
        }

        const form = database.forms.find(f => f.name === selectedFormName);
        if (!form) {
            Message("–§–æ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        document.getElementById("savedFormsModal").style.display = "none";
        previewSavedForm(form);
}

// Form Viewer
function previewSavedForm(form) {
        const previewModal = document.getElementById("formPreviewModal");
        const previewCanvas = document.getElementById("formPreviewCanvas");

        console.log("form =", form);
        console.log("form.elements =", form.elements);
        console.log(database.forms);

        previewCanvas.innerHTML = "";
        currentFormRecordIndex = 0;
        document.getElementById("formPreviewTitle").innerText = `${form.name} ‚Äî –∑–∞–ø–∏—Å #1`;

        const table = database.tables.find(t => t.name === form.table);
        const record = table?.data?.[0] || [];

        form.elements.forEach(el => {
            if (el.type === "field") {
                const table = database.tables.find(t => t.name === el.tableName);
                const record = table?.data?.[currentFormRecordIndex] || [];
                const colIndex = table?.schema.findIndex(c => c.title === el.fieldName);

                const input = document.createElement("input");
                input.type = "text";
                input.style.position = "absolute";
                input.style.left = el.left + "px";
                input.style.top = el.top + "px";
                input.style.width = el.width + "px";
                input.style.height = el.height + "px";
                input.style.fontFamily = el.fontFamily;
                input.style.fontSize = el.fontSize;
                input.style.fontWeight = el.fontWeight;
                input.style.fontStyle = el.fontStyle;
                input.style.textDecoration = el.textDecoration;
                input.style.color = el.color;
                input.style.background = "#ccc";
                input.style.padding = "2px";
                input.style.borderStyle = "inset";
                input.style.borderWidth = "3px";
                input.style.borderColor = "#888";
                input.style.overflow = "hidden";
                input.style.whiteSpace = "nowrap";

                input.dataset.tableName = el.tableName;
                input.dataset.fieldName = el.fieldName;
                input.dataset.colIndex = colIndex;

                input.value = colIndex !== -1 ? (record?.[colIndex] ?? "") : "–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";

                previewCanvas.appendChild(input);
            } else if (el.type === "label") {
                const label = document.createElement("div");
                label.innerText = el.text || "";
                label.style.position = "absolute";
                label.style.left = el.left + "px";
                label.style.top = el.top + "px";
                label.style.width = el.width + "px";
                label.style.height = el.height + "px";
                label.style.fontFamily = el.fontFamily;
                label.style.fontSize = el.fontSize;
                label.style.fontWeight = el.fontWeight;
                label.style.fontStyle = el.fontStyle;
                label.style.textDecoration = el.textDecoration;
                label.style.color = el.color;
                label.style.padding = "5px";
                label.style.border = "none";
                label.style.background = "transparent";
                label.style.overflow = "hidden";
                label.style.whiteSpace = "nowrap";
                label.contentEditable = "false";

                previewCanvas.appendChild(label);
            }
        });


        previewModal.style.display = "flex";
}
function deleteSelectedForm() {
        if (!selectedFormName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }
        const formIndex = database.forms.findIndex(q => q.name === selectedFormName);
        if (formIndex !== -1) {
            const deletedFormName = database.forms[formIndex].name;
            database.forms.splice(formIndex, 1); // Remove 
            saveDatabase(); // Save updated

            const dataMenu = document.getElementById("data-menu");

            Message(`–§–æ—Ä–º—É "${deletedFormName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
            showSavedFormsDialog(); // Refresh the list
        } else {
            Message("–í–∏–±—Ä–∞–Ω—É —Ñ–æ—Ä–º—É  –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
}
//*******************************************************************************


/**
* –î–æ–¥–∞—î –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –ø—Ä–∏ –∫–ª—ñ–∫—É —ñ –ø–æ–∫–∞–∑—É—î –º–∞—Ä–∫–µ—Ä–∏
**/
function initializeCanvasElement(element) {
    element.addEventListener("click", (e) => {
        e.stopPropagation();
        
        document.querySelectorAll("."+constructorMode+"-element.selected").forEach(el => {
            el.classList.remove("selected");
            el.querySelectorAll(".resize-handle").forEach(h => h.remove());
        });

        element.classList.add("selected");
        addResizeHandles(element);
    });
}
/**
 * –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–≤—ñ—Ç—É/—Ñ–æ—Ä–º–∏
 **/
function renderCanvas(stored) {
        const cm = constructorMode;
        const cNameInput = document.getElementById(cm+"NameInput");
        const cCanvas = document.getElementById(cm+"Canvas"); 
        cNameInput.value = stored.name;
        cCanvas.innerHTML = "";

        stored.elements.forEach(el => {
            const div = document.createElement("div");
            div.classList.add(cm+"-element");
            div.style.position = "absolute";
            div.style.left = el.left + "px";
            div.style.top = el.top + "px";
            div.style.width = el.width + "px";
            div.style.height = el.height + "px";
            div.style.cursor = "grab";
            div.style.boxSizing = "border-box";
            div.style.fontFamily = el.fontFamily;
            div.style.fontSize = el.fontSize;
            div.style.fontWeight = el.fontWeight;
            div.style.fontStyle = el.fontStyle;
            div.style.textDecoration = el.textDecoration;
            div.style.color = el.color;
            console.log("el(edit)=", el)
            if (el.type === "field") {
                div.classList.add(cm+"-field");
                div.dataset.fieldName = el.fieldName;
                div.dataset.tableName = el.tableName;
                div.style.border = "1px dashed green";
                div.style.backgroundColor = "rgba(144, 238, 144, 0.3)";

                const fieldText = document.createElement("div");
                fieldText.classList.add("field-text");
                fieldText.innerText = `${el.tableName}.${el.fieldName}`;
                div.appendChild(fieldText);
            } else if (el.type === "label") {
                div.classList.add(cm+"-label");
                div.contentEditable = "false";
                div.innerText = el.text;
                div.style.border = "1px dashed gray";
                div.style.backgroundColor = "rgba(240,240,240,0.8)";
            }

            cCanvas.appendChild(div);
            initializeCanvasElement(div);
            makeDraggableAndResizable(div); 
        }); 
    }

// –î–æ–¥–∞—î–º–æ –Ω–∞–ø–∏—Å
function addScreenLabel() {    
    const labelElement = document.createElement("div");
    labelElement.className = constructorMode+"-element "+constructorMode+"-label";
    Object.assign(labelElement.style, {
        position: "absolute",
        left: "50px",
        top: "50px",
        width: "150px",
        height: "40px",
        border: "1px solid blue",
        backgroundColor: "rgba(173, 216, 230, 0.3)",
        padding: "5px",
        cursor: "grab",
        boxSizing: "border-box"
    });

    labelElement.contentEditable = "false";
    labelElement.innerText = "–ù–æ–≤–∏–π –Ω–∞–ø–∏—Å";
    screenCanvas.appendChild(labelElement);
    // –î–æ–¥–∞—î–º–æ resize-–º–∞—Ä–∫–µ—Ä–∏
    addResizeHandles(labelElement);    
    makeDraggableAndResizable(labelElement);
}
// –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ
function addScreenField() {   
    const fieldElement = document.createElement("div");
    fieldElement.className = constructorMode+"-element "+constructorMode+"-field";
    Object.assign(fieldElement.style, {
        position: "absolute",
        left: "200px",
        top: "100px",
        width: "200px",
        height: "40px",
        border: "1px dashed green",
        backgroundColor: "rgba(144,238,144,0.3)",
        padding: "5px",
        cursor: "grab",
        boxSizing: "border-box"
    });

    const fieldText = document.createElement("div");
    fieldText.className = "field-text";
    fieldText.innerText = "–ü–æ–ª–µ";
    fieldElement.appendChild(fieldText);

    // –î–æ–¥–∞—î–º–æ resize-–º–∞—Ä–∫–µ—Ä–∏
    addResizeHandles(fieldElement);

    // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ–ª—è
    fieldElement.addEventListener("click", () => {
        selectedFormField = fieldElement;
    });
    screenCanvas.appendChild(fieldElement);
    makeDraggableAndResizable(fieldElement);
}

let currentEditElement = null;
function editLabel(el) {
    currentEditElement = el;
    const modal = document.getElementById("editLabelModal");
    const input = document.getElementById("editInput");

    input.value = el.innerText;
    modal.style.display = "flex";

    input.focus();
}

// –ö–Ω–æ–ø–∫–∞ Ok
function textOk() {
    if (currentEditElement) {
        currentEditElement.innerText = document.getElementById("editInput").value;
    }
        // –î–æ–¥–∞—î–º–æ resize-–º–∞—Ä–∫–µ—Ä–∏ –æ–∫—Ä–µ–º–æ
    ["top-left", "top-right", "bottom-left", "bottom-right"].forEach(pos => {
        const handle = document.createElement("div");
        handle.className = `resize-handle ${pos}`;
        currentEditElement.appendChild(handle);
    });
    document.getElementById("editLabelModal").style.display = "none";
    currentEditElement = null;
    dragging = false;
   
};

// –ö–Ω–æ–ø–∫–∞ –°–∫–∞—Å—É–≤–∞—Ç–∏
function textCancel() {
    document.getElementById("editLabelModal").style.display = "none";
    currentEditElement = null;
    dragging = false;    
};

/**
 * –ó—Ä–æ–±–∏—Ç–∏ –æ–±'—î–∫—Ç –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–∏–º, –∑—ñ –∑–º—ñ–Ω–æ—é —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É
 **/

function makeDraggableAndResizable(el) {
    const parent = el.parentElement;

    // === DRAG ===
    let offsetX, offsetY, dragging = false;
    el.addEventListener("mousedown", startDrag);
    el.addEventListener("touchstart", startDrag);
    
    function startDrag(e) {        
          
            console.log('Click!!!')
            if (!e.target.classList.contains("resize-handle")) {
                const dXY = 5;
                const curRect = el.getBoundingClientRect();
                const curX = e.touches ? e.touches[0].clientX : e.clientX;
                const curY = e.touches ? e.touches[0].clientY : e.clientY;
                let inRect =((curX > curRect.left+dXY) && (curX < curRect.right-dXY) && (curY > curRect.top+dXY) && (curY < curRect.bottom-dXY))
                if (inRect){
                    console.log("EDIT")
                    editLabel(el);
                    stopDrag()
                     dragging = false;
                    }
                return;
            }
        
    
        // –Ø–∫—â–æ –∫–ª—ñ–∫ –ø–æ resize-handle ‚Äî –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
        if (e.target.classList.contains("resize-handle")) return;
    
        // –Ü–Ω–∞–∫—à–µ ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
        dragging = true;
        const rect = el.getBoundingClientRect();
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const clientY = e.touches ? e.touches[0].clientY : e.clientY;
        offsetX = clientX - rect.left;
        offsetY = clientY - rect.top;
    
        document.addEventListener("mousemove", onDrag);
        document.addEventListener("mouseup", stopDrag);
        document.addEventListener("touchmove", onDrag);
        document.addEventListener("touchend", stopDrag);
    
    }

    function onDrag(e) {
        if (!dragging) return;
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const clientY = e.touches ? e.touches[0].clientY : e.clientY;
        const parentRect = parent.getBoundingClientRect();
        let left = clientX - parentRect.left - offsetX;
        let top = clientY - parentRect.top - offsetY;
        el.style.left = Math.max(0, left) + "px";
        el.style.top = Math.max(0, top) + "px";
    }

    function stopDrag() {
        dragging = false;
        document.removeEventListener("mousemove", onDrag);
        document.removeEventListener("mouseup", stopDrag);
        document.removeEventListener("touchmove", onDrag);
        document.removeEventListener("touchend", stopDrag);
    }

    // === RESIZE ===
    const handles = el.querySelectorAll(".resize-handle");
    handles.forEach(handle => {
        handle.addEventListener("mousedown", startResize);
        handle.addEventListener("touchstart", startResize);

        function startResize(e) {
            e.stopPropagation(); // —â–æ–± –Ω–µ —Ä—É—Ö–∞–≤—Å—è —Å–∞–º –µ–ª–µ–º–µ–Ω—Ç
            const rect = el.getBoundingClientRect();
            const parentRect = parent.getBoundingClientRect();
            const startX = e.touches ? e.touches[0].clientX : e.clientX;
            const startY = e.touches ? e.touches[0].clientY : e.clientY;
            const startW = rect.width;
            const startH = rect.height;
            const startL = rect.left - parentRect.left;
            const startT = rect.top - parentRect.top;
            const pos = handle.classList[1];
            console.log("pos=",pos)

            function onResize(ev) {
                const clientX = ev.touches ? ev.touches[0].clientX : ev.clientX;
                const clientY = ev.touches ? ev.touches[0].clientY : ev.clientY;
                let dx = clientX - startX;
                let dy = clientY - startY;

                if (pos.includes("right")) {
                    el.style.width = Math.max(40, startW + dx) + "px";
                }
                if (pos.includes("bottom")) {
                    el.style.height = Math.max(20, startH + dy) + "px";
                }
                if (pos.includes("left")) {
                    el.style.width = Math.max(40, startW - dx) + "px";
                    el.style.left = Math.max(0, startL + dx) + "px";
                }
                if (pos.includes("top")) {
                    el.style.height = Math.max(20, startH - dy) + "px";
                    el.style.top = Math.max(0, startT + dy) + "px";
                }
            }

            function stopResize() {
                document.removeEventListener("mousemove", onResize);
                document.removeEventListener("mouseup", stopResize);
                document.removeEventListener("touchmove", onResize);
                document.removeEventListener("touchend", stopResize);
            }

            document.addEventListener("mousemove", onResize);
            document.addEventListener("mouseup", stopResize);
            document.addEventListener("touchmove", onResize);
            document.addEventListener("touchend", stopResize);
        }
    });
}
   


function addScreenGrid() {    
    if (screenGridVisible) {
            screenCanvas.style.backgroundImage = "none";
        } else {
            screenCanvas.style.backgroundImage =
                "repeating-linear-gradient(0deg, #ccc 0, #ccc 1px, transparent 1px, transparent 19px), " +
                "repeating-linear-gradient(90deg, #ccc 0, #ccc 1px, transparent 1px, transparent 19px)";
            screenCanvas.style.backgroundSize = "20px 20px";
        }
        screenGridVisible = !screenGridVisible;
}    

function previewForm() {
    const formName = document.getElementById("formNameInput").value.trim();
    const previewModal = document.getElementById("formPreviewModal");
    const previewCanvas = document.getElementById("formPreviewCanvas");

    previewCanvas.innerHTML = "";
    document.getElementById("formPreviewTitle").innerText =
        `${formName} ‚Äî –∑–∞–ø–∏—Å #${currentFormRecordIndex + 1}`;

    const elements = [...document.querySelectorAll("#formCanvas .form-label, #formCanvas .form-field")];

    elements.forEach(el => {
        if (el.classList.contains("form-field")) {
            const tableName = el.dataset.tableName;
            const fieldName = el.dataset.fieldName;
            const table = database.tables.find(t => t.name === tableName);

            const fieldContainer = document.createElement("div");
            fieldContainer.className = "form-field"; // –≤–∞–∂–ª–∏–≤–æ –ª–∏—à–∏—Ç–∏ –∫–ª–∞—Å
            fieldContainer.style.position = "absolute";
            fieldContainer.style.left = el.style.left;
            fieldContainer.style.top = el.style.top;
            fieldContainer.style.width = el.style.width;
            fieldContainer.style.height = el.style.height;
            fieldContainer.style.fontFamily = el.style.fontFamily || 'Arial';
            fieldContainer.style.fontSize = el.style.fontSize || '16px';
            fieldContainer.style.fontWeight = el.style.fontWeight || 'normal';
            fieldContainer.style.fontStyle = el.style.fontStyle || 'normal';
            fieldContainer.style.textDecoration = el.style.textDecoration || '';
            fieldContainer.style.color = el.style.color || '#000000';
            fieldContainer.style.padding = "2px";
            fieldContainer.style.borderStyle = "inset";
            fieldContainer.style.borderWidth = "3px";
            fieldContainer.style.borderColor = "#888";
            fieldContainer.style.overflow = "hidden";
            fieldContainer.style.whiteSpace = "nowrap";
            fieldContainer.style.background = "#ccc";

            // –∑–±–µ—Ä–µ–∂–µ–º–æ –∑–≤'—è–∑–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
            fieldContainer.dataset.tableName = tableName || "";
            fieldContainer.dataset.fieldName = fieldName || "";

            let cellValue = "";
            let colSchema = null;
            let colIndex = -1;

            if (table && table.data.length > currentFormRecordIndex) {
                colIndex = table.schema.findIndex(c => c.title === fieldName);
                if (colIndex !== -1) {
                    colSchema = table.schema[colIndex];
                    const record = table.data[currentFormRecordIndex];
                    cellValue = record?.[colIndex] ?? "";
                    fieldContainer.dataset.colIndex = String(colIndex);
                } else {
                    cellValue = "–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
                }
            } else {
                cellValue = "–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞";
            }

            if (colSchema) {
                const control = advDataInput(
                    fieldContainer,
                    cellValue,
                    colSchema,
                    table.data[currentFormRecordIndex],
                    colIndex,
                    false // —É –ø—Ä–µ–≤‚Äô—é –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
                );

                // –¥—É–±–ª—é—î–º–æ dataset —ñ –Ω–∞ control (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ—à—É–∫—É —Å–∞–º–µ –ø–æ control)
                if (control) {
                    control.dataset.tableName = fieldContainer.dataset.tableName;
                    control.dataset.fieldName = fieldContainer.dataset.fieldName;
                    control.dataset.colIndex  = fieldContainer.dataset.colIndex;
                }
            } else {
                fieldContainer.textContent = cellValue;
            }

            previewCanvas.appendChild(fieldContainer);

        } else {
            const label = document.createElement("div");
            label.style.position = "absolute";
            label.style.left = el.style.left;
            label.style.top = el.style.top;
            label.style.width = el.style.width;
            label.style.height = el.style.height;
            label.style.fontFamily = el.style.fontFamily || 'Arial';
            label.style.fontSize = el.style.fontSize || '16px';
            label.style.fontWeight = el.style.fontWeight || 'normal';
            label.style.fontStyle = el.style.fontStyle || 'normal';
            label.style.textDecoration = el.style.textDecoration || '';
            label.style.color = el.style.color || '#000000';
            label.style.padding = "5px";
            label.style.border = "none";
            label.style.background = "transparent";
            label.style.overflow = "hidden";
            label.style.whiteSpace = "nowrap";
            label.innerText = el.innerText.trim();

            previewCanvas.appendChild(label);
        }
    });

    previewModal.style.display = "flex";
}

function saveFormChanges() {
    const fields = [...document.querySelectorAll("#formPreviewCanvas .form-field")];

    if (fields.length === 0) {
        Message("–ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.");
        return;
    }

    // –ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
    const tableNames = [...new Set(fields.map(f => f.dataset.tableName).filter(Boolean))];
    if (tableNames.length !== 1) {
        Message("–ü–æ–ª—è —Ñ–æ—Ä–º–∏ –Ω–∞–ª–µ–∂–∞—Ç—å —Ä—ñ–∑–Ω–∏–º —Ç–∞–±–ª–∏—Ü—è–º –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.");
        return;
    }

    const tableName = tableNames[0];
    const table = database.tables.find(t => t.name === tableName);
    if (!table) {
        Message("–¢–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        return;
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    const hasValue = v => !(v === undefined || v === null || (typeof v === "string" && v.trim() === ""));
    const toNullIfEmpty = v => (hasValue(v) ? v : null);

    // –ó–±—ñ—Ä —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å
    const values = {};
    let allEmpty = true;

    fields.forEach(f => {
        const colIndex = Number(f.dataset.colIndex ?? (f.querySelector("[data-col-index]")?.dataset.colIndex));
        const colSchema = table.schema[colIndex];
        if (!colSchema) return;

        const control = f.querySelector("input, select, textarea, [contenteditable='true']");
        let value;

        if (!control) {
            value = f.textContent ?? "";
        } else if (control.tagName === "SELECT") {
            value = control.value === "empty" ? null : control.value;
        } else if (control.hasAttribute("contenteditable")) {
            value = control.innerText;
        } else {
            value = control.value;
        }

        const t = String(colSchema.type || "").toLowerCase();
        if (t === "—Ü—ñ–ª–µ —á–∏—Å–ª–æ" || t === "integer") {
            value = hasValue(value) ? parseInt(String(value).trim(), 10) : null;
            if (Number.isNaN(value)) value = null;
        } else if (t === "–¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ" || t === "real" || t === "float" || t === "numeric") {
            value = hasValue(value) ? Number(String(value).trim()) : null;
            if (Number.isNaN(value)) value = null;
        } else if (t === "—Ç–∞–∫/–Ω—ñ" || t === "boolean") {
            const s = String(value).toLowerCase().trim();
            value = (s === "1" || s === "true" || s === "yes" || s === "on") ? 1 : 0;
        } else if (t === "–¥–∞—Ç–∞" || t === "date") {
            value = (hasValue(value) && /^\d{4}-\d{2}-\d{2}$/.test(String(value))) ? String(value) : null;
        } else {
            // –ù–µ–≤—ñ–¥–æ–º–∏–π –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ç–∏–ø: –ø–æ—Ä–æ–∂–Ω—ñ–π => null (—É–Ω–∏–∫–∞—î–º–æ STRICT datatype mismatch)
            value = toNullIfEmpty(value);
        }

        const fieldName = f.dataset.fieldName;
        if (!fieldName) return;

        values[fieldName] = value;
        if (value !== null && value !== "") allEmpty = false;
    });

    if (allEmpty) {
        Message("–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ.");
        return;
    }

    // –ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ –æ–¥–∏–Ω PK-—Å—Ç–æ–≤–ø–µ—Ü—å)
    const pkCol = table.schema.find(col => col.primaryKey);
    if (!pkCol) {
        Message("–£ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.");
        return;
    }
    const pkField = pkCol.title;
    const pkIndex = table.schema.findIndex(col => col.primaryKey);

    // PK –∑—ñ –∑–Ω–∞—á–µ–Ω—å —Ñ–æ—Ä–º–∏ —Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ –ø–∞–º'—è—Ç—ñ
    let pkValueFromForm = values[pkField];
    const pkFromRow = (currentFormRecordIndex !== undefined) ? table.data[currentFormRecordIndex]?.[pkIndex] : undefined;
    const hasExistingPkInRow = hasValue(pkFromRow);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º: —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —á–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
    const isEditExisting = hasExistingPkInRow; // –≤–∞–∂–ª–∏–≤–æ: "–ø–æ—Ä–æ–∂–Ω—ñ–π" —Ä—è–¥–æ–∫ (PK –ø–æ—Ä–æ–∂–Ω—ñ–π) => —Ü–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å!

    // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Ä–µ–∂–∏–º—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ---
    if (!isEditExisting) {
        // –ù–æ–≤–∏–π –∑–∞–ø–∏—Å
        if (pkCol.autoInc) {
            // –ù–µ –≤—Å—Ç–∞–≤–ª—è—î–º–æ PK –≤–∑–∞–≥–∞–ª—ñ ‚Äî –Ω–µ—Ö–∞–π SQLite –∑–≥–µ–Ω–µ—Ä—É—î
            delete values[pkField];
            pkValueFromForm = undefined;
        } else {
            // –ù–µ –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–∏–π PK –º–∞—î –±—É—Ç–∏ –∑–∞–¥–∞–Ω–æ
            if (!hasValue(pkValueFromForm)) {
                Message(`–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ "${pkField}".`);
                return;
            }
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
            const checkSQL = `SELECT COUNT(*) AS cnt FROM "${tableName}" WHERE "${pkField}" = ?`;
            const res = db.exec(checkSQL, [pkValueFromForm]);
            if (res.length > 0 && res[0].values[0][0] > 0) {
                Message(`–ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ "${pkField}" = "${pkValueFromForm}" –≤–∂–µ —ñ—Å–Ω—É—î —É —Ç–∞–±–ª–∏—Ü—ñ.`);
                return;
            }
        }
    } else {
        // --- –†–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
        // –Ø–∫—â–æ PK –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç ‚Äî –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –º—ñ–Ω—è—Ç–∏ –π–æ–≥–æ —Ä—É–∫–∞–º–∏; —Ñ—ñ–∫—Å—É—î–º–æ —Å—Ç–∞—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        if (pkCol.autoInc) {
            values[pkField] = pkFromRow;
        } else {
            // –ù–µ –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–∏–π ‚Äî —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ PK, –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
            if (hasValue(pkValueFromForm) && String(pkValueFromForm) !== String(pkFromRow)) {
                const checkSQL = `SELECT COUNT(*) AS cnt FROM "${tableName}" WHERE "${pkField}" = ?`;
                const res = db.exec(checkSQL, [pkValueFromForm]);
                if (res.length > 0 && res[0].values[0][0] > 0) {
                    Message(`–ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ "${pkField}" = "${pkValueFromForm}" –≤–∂–µ —ñ—Å–Ω—É—î —É —Ç–∞–±–ª–∏—Ü—ñ.`);
                    return;
                }
            } else {
                // –Ø–∫—â–æ —É —Ñ–æ—Ä–º—ñ PK –Ω–µ –∑–∞–¥–∞–Ω–∏–π, –ª–∏—à–∞—î–º–æ —Å—Ç–∞—Ä–∏–π
                values[pkField] = pkFromRow;
            }
        }
    }

    // --- –ó–∞–ø–∏—Å —É –ë–î ---
    if (!isEditExisting) {
        // INSERT (–±–µ–∑ REPLACE), PK –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç ‚Äî –±–µ–∑ PK –≤ —Å–ø–∏—Å–∫—É –ø–æ–ª—ñ–≤
        const fieldKeys = Object.keys(values);
        const placeholders = fieldKeys.map(() => "?").join(", ");
        const sql = `INSERT INTO "${tableName}" (${fieldKeys.map(f => `"${f}"`).join(", ")}) VALUES (${placeholders})`;
        const params = fieldKeys.map(f => values[f]);
        db.run(sql, params);

        // –Ø–∫—â–æ PK –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç ‚Äî –ø—ñ–¥—Ç—è–≥—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π PK
        if (pkCol.autoInc) {
            const r = db.exec(`SELECT last_insert_rowid() AS id`);
            const newId = r && r[0] && r[0].values && r[0].values[0] ? r[0].values[0][0] : null;
            values[pkField] = newId;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ in-memory: –∑–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π ¬´–ø–æ—Ä–æ–∂–Ω—ñ–π¬ª —Ä—è–¥–æ–∫, —è–∫—â–æ –≤—ñ–Ω —î; —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ
        const newRow = table.schema.map(col => (col.title in values) ? values[col.title] : null);
        if (currentFormRecordIndex !== undefined) {
            table.data[currentFormRecordIndex] = newRow;
        } else {
            table.data.push(newRow);
            currentFormRecordIndex = table.data.length - 1;
        }
        Message("–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!");
    } else {
        // UPDATE –ª–∏—à–µ —Ç–∏—Ö –ø–æ–ª—ñ–≤, —â–æ —É —Ñ–æ—Ä–º—ñ
        // –Ø–∫—â–æ PK –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç ‚Äî –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ pkField —É SET
        const updateKeys = Object.keys(values).filter(k => !(pkCol.autoInc && k === pkField));
        const setClause = updateKeys.map(k => `"${k}" = ?`).join(", ");
        const params = updateKeys.map(k => values[k]);
        const wherePk = pkFromRow; // —Å—Ç–∞—Ä–∏–π PK
        const sql = `UPDATE "${tableName}" SET ${setClause} WHERE "${pkField}" = ?`;
        db.run(sql, [...params, wherePk]);

        // –û–Ω–æ–≤–ª—é—î–º–æ in-memory: –º–µ—Ä–¥–∂–∏–º–æ –ª–∏—à–µ —Ç—ñ –ø–æ–ª—è, —â–æ –ø—Ä–∏–π—à–ª–∏ –∑ —Ñ–æ—Ä–º–∏
        const row = table.data[currentFormRecordIndex];
        const colIndexByTitle = Object.fromEntries(table.schema.map((c, i) => [c.title, i]));
        updateKeys.forEach(k => {
            const idx = colIndexByTitle[k];
            if (idx !== undefined) row[idx] = values[k];
        });
        // –Ø–∫—â–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–µ-–∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–∏–π PK ‚Äî —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–∏–º–æ –π–æ–≥–æ —É —Ä—è–¥–∫—É
        if (!pkCol.autoInc && hasValue(values[pkField])) {
            row[pkIndex] = values[pkField];
        }

        Message("–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    }

    saveDatabase();
}

//
function addResizeHandles(element) {
    const positions = ["top-left", "top-right", "bottom-left", "bottom-right"];
    positions.forEach(pos => {
        const handle = document.createElement("div");
        handle.classList.add("resize-handle", pos);
        handle.style.cursor = {
            "top-left": "nwse-resize",
            "top-right": "nesw-resize",
            "bottom-left": "nesw-resize",
            "bottom-right": "nwse-resize"
        }[pos];        
        element.appendChild(handle);
    });
}

//*******************************
document.addEventListener('DOMContentLoaded', () => {
        const reportCanvas = document.getElementById("reportCanvas");
        const formCanvas   = document.getElementById("formCanvas");
        const fieldSelectionModal = document.getElementById("fieldSelectionModal");
        const fieldPanelTableSelect1 = document.getElementById("fieldPanelTableSelect");
        const fieldPanelFieldSelect1 = document.getElementById("fieldPanelFieldSelect");
        initFieldPanelListeners(fieldPanelTableSelect1, fieldPanelFieldSelect1, "form-field");
        
        formCanvas.addEventListener("mousedown", (e) => {
            const element = e.target.closest(".form-element");
            const handle = e.target.closest(".resize-handle");

            document.querySelectorAll(".form-element.selected").forEach(el => el.classList.remove("selected"));            
            fieldSelectionModal.style.display = "none";
            closeTextOptionsModal();

            if (element) {
                activeElement = element;
                activeElement.classList.add("selected");                
                const rect = activeElement.getBoundingClientRect();

                initialLeft = activeElement.offsetLeft;
                initialTop = activeElement.offsetTop;
                initialWidth = rect.width;
                initialHeight = rect.height;
                initialX = e.clientX;
                initialY = e.clientY;

                if (handle) {
                    isResizing = true;
                    resizeHandle = handle;
                    element.style.cursor = handle.style.cursor;
                } else {
                    isDragging = true;
                    element.style.cursor = "grabbing";

                    const BORDER_TOLERANCE = 10;
                    const elementRect = activeElement.getBoundingClientRect();
                    const relativeClickX = e.clientX - elementRect.left;
                    const relativeClickY = e.clientY - elementRect.top;

                    const nearLeft = relativeClickX < BORDER_TOLERANCE;
                    const nearRight = elementRect.width - relativeClickX < BORDER_TOLERANCE;
                    const nearTop = relativeClickY < BORDER_TOLERANCE;
                    const nearBottom = elementRect.height - relativeClickY < BORDER_TOLERANCE;

                    if (activeElement.classList.contains("form-label")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            isDragging = false;
                            element.focus();
                        }
                    } else if (activeElement.classList.contains("form-field")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            fieldSelectionModal.style.display = "flex";
                            populateFieldSelectionPanel();
                            
                            isDragging = false;
                        } else {
                            fieldSelectionModal.style.display = "none";
                        }
                    }
                }

                if (isDragging || isResizing || (activeElement.classList.contains("form-label") && !isDragging)) {
                    e.preventDefault();
                }
            } else {
                activeElement = null;
            }
        });
        
        reportCanvas.addEventListener("mousedown", (e) => {
            const element = e.target.closest(".report-element");
            const handle = e.target.closest(".resize-handle");

            document.querySelectorAll(".report-element.selected").forEach(el => el.classList.remove("selected"));            
            fieldSelectionModal.style.display = "none";
            closeTextOptionsModal();

            if (element) {
                activeElement = element;
                activeElement.classList.add("selected");
                //addResizeHandles(element); // üîß –º–∞—Ä–∫–µ—Ä–∏ —Ä–æ–∑–º—ñ—Ä—É
                const rect = activeElement.getBoundingClientRect();

                initialLeft = activeElement.offsetLeft;
                initialTop = activeElement.offsetTop;
                initialWidth = rect.width;
                initialHeight = rect.height;
                initialX = e.clientX;
                initialY = e.clientY;

                if (handle) {
                    isResizing = true;
                    resizeHandle = handle;
                    element.style.cursor = handle.style.cursor;
                } else {
                    isDragging = true;
                    element.style.cursor = "grabbing";

                    const BORDER_TOLERANCE = 10;
                    const elementRect = activeElement.getBoundingClientRect();
                    const relativeClickX = e.clientX - elementRect.left;
                    const relativeClickY = e.clientY - elementRect.top;

                    const nearLeft = relativeClickX < BORDER_TOLERANCE;
                    const nearRight = elementRect.width - relativeClickX < BORDER_TOLERANCE;
                    const nearTop = relativeClickY < BORDER_TOLERANCE;
                    const nearBottom = elementRect.height - relativeClickY < BORDER_TOLERANCE;

                    if (activeElement.classList.contains("report-label")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            isDragging = false;
                            element.focus();
                        }
                    } else if (activeElement.classList.contains("report-field")) {
                        if (!nearLeft && !nearRight && !nearTop && !nearBottom) {
                            fieldSelectionModal.style.display = "flex";
                            populateFieldSelectionPanel();
                            
                            isDragging = false;
                        } else {
                            fieldSelectionModal.style.display = "none";
                        }
                    }
                }

                if (isDragging || isResizing || (activeElement.classList.contains("report-label") && !isDragging)) {
                    e.preventDefault();
                }
            } else {
                activeElement = null;
            }
        });


        formCanvas.addEventListener("mousemove", (e) => {
            if (!activeElement) return;
            const dx = e.clientX - initialX;
            const dy = e.clientY - initialY;

            if (isDragging) {
                activeElement.style.left = `${initialLeft + dx}px`;
                activeElement.style.top = `${initialTop + dy}px`;
            } else if (isResizing) {
                let newWidth = initialWidth;
                let newHeight = initialHeight;
                let newLeft = initialLeft;
                let newTop = initialTop;

                if (resizeHandle.classList.contains("bottom-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight + dy);
                } else if (resizeHandle.classList.contains("bottom-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight + dy);
                    newLeft = initialLeft + dx;
                } else if (resizeHandle.classList.contains("top-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newTop = initialTop + dy;
                } else if (resizeHandle.classList.contains("top-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newLeft = initialLeft + dx;
                    newTop = initialTop + dy;
                }

                activeElement.style.width = `${newWidth}px`;
                activeElement.style.height = `${newHeight}px`;
                activeElement.style.left = `${newLeft}px`;
                activeElement.style.top = `${newTop}px`;
            }
        });

        formCanvas.addEventListener("mouseup", () => {
            if (activeElement) activeElement.style.cursor = "grab";
            isDragging = false;
            isResizing = false;
            resizeHandle = null;
        });
        
       reportCanvas.addEventListener("mousemove", (e) => {
            if (!activeElement) return;
            const dx = e.clientX - initialX;
            const dy = e.clientY - initialY;

            if (isDragging) {
                activeElement.style.left = `${initialLeft + dx}px`;
                activeElement.style.top = `${initialTop + dy}px`;
            } else if (isResizing) {
                let newWidth = initialWidth;
                let newHeight = initialHeight;
                let newLeft = initialLeft;
                let newTop = initialTop;

                if (resizeHandle.classList.contains("bottom-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight + dy);
                } else if (resizeHandle.classList.contains("bottom-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight + dy);
                    newLeft = initialLeft + dx;
                } else if (resizeHandle.classList.contains("top-right")) {
                    newWidth = Math.max(50, initialWidth + dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newTop = initialTop + dy;
                } else if (resizeHandle.classList.contains("top-left")) {
                    newWidth = Math.max(50, initialWidth - dx);
                    newHeight = Math.max(30, initialHeight - dy);
                    newLeft = initialLeft + dx;
                    newTop = initialTop + dy;
                }

                activeElement.style.width = `${newWidth}px`;
                activeElement.style.height = `${newHeight}px`;
                activeElement.style.left = `${newLeft}px`;
                activeElement.style.top = `${newTop}px`;
            }
        });

        reportCanvas.addEventListener("mouseup", () => {
            if (activeElement) activeElement.style.cursor = "grab";
            isDragging = false;
            isResizing = false;
            resizeHandle = null;
        });

    });
    

    document.addEventListener("click", (e) => {
        let el = e.target.closest(".report-element");
        if (el) {
            activeElement = el;
            return;
        }
        el = e.target.closest(".form-element");
        if (el) {
            activeElement = el;
            return;
        }
    });

    function goToFirstRecord() {
        currentFormRecordIndex = 0;
        previewForm();
    }

    function goToPreviousRecord() {
        currentFormRecordIndex = Math.max(0, currentFormRecordIndex - 1);
        previewForm();
    }

    function goToNextRecord() {
        // –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–∞–∫—Å. –¥–æ–≤–∂–∏–Ω—É —Ç–∞–±–ª–∏—Ü—å
        const tables = database.tables;
        const maxLength = Math.max(...tables.map(t => t.data.length));
        currentFormRecordIndex = Math.min(maxLength - 1, currentFormRecordIndex + 1);
        previewForm();
    }

    function goToLastRecord() {
        const tables = database.tables;
        const maxLength = Math.max(...tables.map(t => t.data.length));
        currentFormRecordIndex = maxLength - 1;
        previewForm();
    }

    function createNewRecord() {
        // –¥–æ–¥–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Å –¥–æ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É —Ñ–æ—Ä–º—ñ
        const elements = [...document.querySelectorAll("#formCanvas .form-field")];
        const usedTables = [...new Set(elements.map(el => el.dataset.tableName))];
        let isNewRecord = true;    
        usedTables.forEach(tableName => {
            const table = database.tables.find(t => t.name === tableName);
            if (!table) return;

            const emptyRow = table.schema.map(() => "");
            table.data.push(emptyRow);
        });

        saveDatabase();

        // –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
        goToLastRecord();
    }

    // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    function updateMainTitle() {
        const titleBar = document.getElementById("mainTitle");
        if (database.fileName) {
            titleBar.textContent = "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: " + database.fileName;
        } else {
            titleBar.textContent = "–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö";
        }
    }

    // —ñ–º–ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
    function importSQLiteDb(file) {
        if (!file) {
            Message("–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.");
            return;
        }
    
        const reader = new FileReader();
    
        reader.onload = function(event) {
            const arrayBuffer = event.target.result;
            const uIntArray = new Uint8Array(arrayBuffer);
    
            try {
                clearDB();
                const importedDb = new SQL.Database(uIntArray);
                
                const nameWithoutExt = file.name.replace(/\.[^/.]+$/, "");
                const fileName = nameWithoutExt;
    
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª –≤ localStorage
                const base64 = btoa(String.fromCharCode(...uIntArray));
                localStorage.setItem(fileName + ".db-data", base64);    
               
                db = importedDb;    
    
                const res = db.exec("SELECT name, sql FROM sqlite_master WHERE type='table';");
                if (res.length > 0) {
                    const tableRows = res[0].values;
                    tableRows.forEach(([name]) => {
                        if (name.startsWith("sqlite_")) return;
    
                        const pragmaRes = db.exec(`PRAGMA table_info("${name}")`);
                        if (!pragmaRes.length) return;
                        
                        const columns = pragmaRes[0].values;
                        
                        // üÜï –ó—á–∏—Ç—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ
                        const fkRes = db.exec(`PRAGMA foreign_key_list("${name}")`);
                        const foreignKeys = fkRes.length ? fkRes[0].values.map(([id, seq, refTable, fromCol, toCol]) => ({
                            fromCol, refTable, toCol
                        })) : [];
                        
                        // –§–æ—Ä–º—É—î–º–æ —Å—Ö–µ–º—É
                        const schema = columns.map(([cid, title, type, notnull, dflt_value, pk]) => {
                           
                            const fk = foreignKeys.find(f => f.fromCol === title);
                            if (!(fk ===undefined)) {
                                console.log("FK import=", title,foreignKeys)
                                console.log("fk.refTable import=", fk.refTable)
                                console.log("fk.toCol import=", fk.toCol) }
                            return {
                                title,
                                type: type.toUpperCase() === "INTEGER" ? "–¶—ñ–ª–µ —á–∏—Å–ª–æ"
                                    : type.toUpperCase() === "REAL" ? "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ"
                                    : type.toUpperCase().includes("TEXT") ? "–¢–µ–∫—Å—Ç"
                                    : type.toUpperCase().includes("BOOL") ? "–¢–∞–∫/–ù—ñ"
                                    : type,
                                primaryKey: pk > 0,
                                comment: pk > 0 ? "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á" : "",
                                foreignKey: !!fk,
                                refTable: fk ? fk.refTable : null,
                                refField: fk ? fk.toCol : null
                            };
                        });
    
                        const selectRes = db.exec(`SELECT * FROM "${name}"`);
                        const dataRows = selectRes.length ? selectRes[0].values : [];
                        console.log("Schema=",schema)
                        database.tables.push({
                            name: name,
                            schema: schema,
                            data: dataRows
                        });
                    });
                }
    
                // üÜï –î–æ–¥–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ –¥–æ database.relations
                const fkTables = db.exec("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'");
                if (fkTables.length > 0) {
                    fkTables[0].values.forEach(([tableName]) => {
                        const fkRes = db.exec(`PRAGMA foreign_key_list("${tableName}")`);
                        if (!fkRes.length) return;
    
                        fkRes[0].values.forEach(fk => {
                            const [, , refTable, fromCol, toCol] = fk;
    
                            // –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
                            const exists = database.relations.some(r =>
                                r.fromTable === tableName &&
                                r.fromField === fromCol &&
                                r.toTable === refTable &&
                                r.toField === toCol
                            );
    
                            if (!exists) {
                                database.relations.push({
                                    fromTable: tableName,
                                    fromField: fromCol,
                                    toTable: refTable,
                                    toField: toCol,
                                    color: "red",
                                    readonly: true
                                });
                            }
                        });
                    });
                }
                database.fileName = fileName;
                saveDatabase()
                database.tables.forEach(t => addTableToMenu(t.name));
                updateMainTitle();
                Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '" + fileName + "'.");
                updateQuickAccessPanel(
                    getCurrentTableNames(),
                    getCurrentQueryNames(),
                    getCurrentReportNames(),
                    getCurrentFormNames()
                );
            } catch (e) {
                Message("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ: " + e.message);
            }
        };
    
        reader.readAsArrayBuffer(file);
    }
    
    // –µ–∫—Å–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö SQLite
    function exportSQLiteDb() {
        if (!db) {
            Message("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.");
            return;
        }

        const data = db.export();
        const blob = new Blob([data], {
            type: "application/x-sqlite3"
        });

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É –∑ database.fileName –∞–±–æ "my_database"
        const fileName = (database.fileName || "my_database") + ".sqlite";

        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = fileName;
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        URL.revokeObjectURL(a.href);
        a.remove();
    }
/**
 * –Ü–º–ø–æ—Ä—Ç –∑ CVS —Ñ–∞–π–ª—É
 **/ 
// –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
function showCsvImportDialog() {
    const select = document.getElementById("csvTargetTable");
    select.innerHTML = "";
    database.tables.forEach(table => {
        const option = document.createElement("option");
        option.value = table.name;
        option.textContent = table.name;
        select.appendChild(option);
    });
    document.getElementById("csvImportModal").style.display = "flex";
}

// –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
function closeCsvImportDialog() {
    document.getElementById("csvImportModal").style.display = "none";
}

// –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É
function proceedCsvImport() {
    closeCsvImportDialog();
    document.getElementById("csvFileInput").value = ""; // –°–∫–∏–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ñ–∞–π–ª
    document.getElementById("csvFileInput").click(); // –í—ñ–¥–∫—Ä–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
}

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª—É
function handleCsvFile(file) {
    if (!file) {
        Message("–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.");
        return;
    }

    const reader = new FileReader();
    reader.onload = function(event) {
        const csvText = event.target.result;
        const lines = csvText.trim().split("\n");

        if (lines.length === 0) {
            Message("CSV-—Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            return;
        }

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞: –≤–∏–±–∏—Ä–∞—î–º–æ —Ç–æ–π, —â–æ —á–∞—Å—Ç—ñ—à–µ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –≤ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É
        const firstLine = lines[0];
        const hasSemicolon = (firstLine.split(";").length - 1);
        const hasComma = (firstLine.split(",").length - 1);
        const delimiter = hasSemicolon > hasComma ? ";" : ",";

        // –†–æ–∑–±–∏–≤–∞—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏
        const rows = lines.map(line => {
            return line.split(delimiter).map(val => val.trim().replace(/^"(.*)"$/, '$1')); // –≤–∏–¥–∞–ª—è—î–º–æ –ª–∞–ø–∫–∏, —è–∫—â–æ —î
        });

        // –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const headerRow = rows[0];
        const dataRows = rows.slice(1); // —Ä–µ—à—Ç–∞ ‚Äî –¥–∞–Ω—ñ

        if (dataRows.length === 0) {
            Message("–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.");
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–ª—å–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
        const tableName = document.getElementById("csvTargetTable").value;
        const table = database.tables.find(t => t.name === tableName);
        if (!table) {
            Message("–¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
        const expectedHeaders = table.schema.map(col => col.title);
        if (headerRow.length !== expectedHeaders.length) {
            Message(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É –∑–∞–≥–æ–ª–æ–≤–∫—É (${headerRow.length}) –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ (${expectedHeaders.length}).`);
            return;
        }

        const mismatch = expectedHeaders.some((expected, i) => headerRow[i] !== expected);
        if (mismatch) {
            Message("–ù–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É CSV –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Å—Ö–µ–º—ñ —Ç–∞–±–ª–∏—Ü—ñ.");
            console.log("–û—á—ñ–∫—É–≤–∞–Ω–æ:", expectedHeaders);
            console.log("–û—Ç—Ä–∏–º–∞–Ω–æ:", headerRow);
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É –¥–∞–Ω–∏—Ö
        const invalidRow = dataRows.find(row => row.length !== expectedHeaders.length);
        if (invalidRow) {
            Message(`–†—è–¥–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤: ${invalidRow.length} (–æ—á—ñ–∫—É—î—Ç—å—Å—è ${expectedHeaders.length}).`);
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
        const typeMap = {
            "–¶—ñ–ª–µ —á–∏—Å–ª–æ": val => /^-?\d+$/.test(val),
            "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ": val => /^-?\d+(\.\d+)?$/.test(val),
            "–¢–∞–∫/–ù—ñ": val => /^(true|false|1|0)$/i.test(val),
            "–¢–µ–∫—Å—Ç": val => true,
            "–î–∞—Ç–∞": val => !isNaN(Date.parse(val)) || /^\d{4}-\d{2}-\d{2}$/.test(val)
        };

        for (let i = 0; i < dataRows.length; i++) {
            const row = dataRows[i];
            for (let j = 0; j < expectedHeaders.length; j++) {
                const val = row[j];
                const type = table.schema[j].type;
                if (!typeMap[type](val)) {
                    Message(`–ü–æ–º–∏–ª–∫–∞ —Ç–∏–ø—É –≤ —Ä—è–¥–∫—É ${i + 1}, –ø–æ–ª–µ "${table.schema[j].title}" (${type}): "${val}".`);
                    return;
                }
            }
        }

        // –£—Å–µ –≥–∞—Ä–∞–∑–¥ ‚Äî –≤—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
        const colNames = table.schema.map(col => `"${col.title}"`).join(", ");
        db.run("BEGIN TRANSACTION");
        try {
            dataRows.forEach(row => {
                const values = row.map(val => `'${val.replace(/'/g, "''")}'`).join(", ");
                const sql = `INSERT INTO "${table.name}" (${colNames}) VALUES (${values})`;
                db.run(sql);
            });
            db.run("COMMIT");
            Message(`–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${dataRows.length} –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é "${table.name}".`);
            saveDatabase();
        } catch (e) {
            db.run("ROLLBACK");
            Message("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ –¥–∞–Ω–∏—Ö: " + e.message);
        }
    };

    reader.readAsText(file);
}
/**
 * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ 8-—Å–∏–º–≤–æ–ª—å–Ω–∏–π —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ 
 **/
 function toHex4Part(num) {
    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ 8-—Å–∏–º–≤–æ–ª—å–Ω–∏–π —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ (32 –±—ñ—Ç–∏ = 8 hex)
    const hex = num.toString(16).padStart(8, '0').toUpperCase();
    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ 4 –≥—Ä—É–ø–∏ –ø–æ 2 —Å–∏–º–≤–æ–ª–∏
    return `${hex.slice(0,2)}-${hex.slice(2,4)}-${hex.slice(4,6)}-${hex.slice(6,8)}`;
}

    // –ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–æ–º–æ—Å—Ç–µ–π –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
function showDatabaseInfo() {
        if (!db || !database.fileName) {
            Message("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.");
            return;
        }

        let info = `–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É: ${database.fileName}.sqlite\n\n`;

        // –ß–∏—Ç–∞—î–º–æ user_version
        let dbId = null;
        try {
            const res = db.exec("PRAGMA user_version;");
            console.log("PRAGMA user_version=",res)
            if (res.length && res[0].values.length) {
                dbId = res[0].values[0][0]; // —Ü–µ —á–∏—Å–ª–æ
            }
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è user_version:", e);
        }

        if (dbId !== null && dbId > 0) {
            const hexId = toHex4Part(dbId);
            info += `–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä: ${hexId}\n`;
        } else {
            info += `–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n`;
        }

        info += "\n";

        if (!database.tables.length) {
            info += "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—å.";
        } else {
            info += "–¢–∞–±–ª–∏—Ü—ñ:\n";
            database.tables.forEach(table => {
                try {
                    const res = db.exec(`SELECT COUNT(*) AS count FROM "${table.name}"`);
                    const count = res.length ? res[0].values[0][0] : 0;
                    info += `- ${table.name}: ${count} –∑–∞–ø–∏—Å—ñ–≤\n`;
                } catch (e) {
                    info += `- ${table.name}: –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É\n`;
                }
            });
        }

        // –û–±‚Äô—î–º –±–∞–∑–∏
        try {
            const exportData = db.export();
            const sizeInBytes = exportData.length;
            const sizeInKB = (sizeInBytes / 1024).toFixed(2);
            const sizeInMB = (sizeInBytes / 1024 / 1024).toFixed(2);

            info += `\n–û–±‚Äô—î–º —Ñ–∞–π–ª—É: ${sizeInBytes} –±–∞–π—Ç (${sizeInKB} KB, ${sizeInMB} MB)`;
        } catch (e) {
            info += `\n–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –æ–±‚Äô—î–º –±–∞–∑–∏.`;
        }

        document.getElementById("dbInfoContent").innerText = info;
        document.getElementById("dbInfoModal").style.display = "flex";
    }

    function closeDbInfoModal() {
        document.getElementById("dbInfoModal").style.display = "none";
    }
    // –ó–∞–∫—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    function closeDatabase() {
        if (!db) {
            Message("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞.");
            return;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
        saveDatabase();

        // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
        db = null;
        clearDB();
        updateMainTitle(); // –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ "–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö"
        document.getElementById("import-table-link").style.display = "none";
        Message("–ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ.");       
    }

    // –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏
    function exitApplication() {
        document.getElementById("exitModal").style.display = "flex";

        setTimeout(() => {
            // –°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –≤–∫–ª–∞–¥–∫—É (–Ω–µ –∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±—Ä–∞—É–∑–µ—Ä–∞)
            window.open('', '_self', '');
            window.close();

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            document.body.innerHTML = "<div style='display:flex; align-items:center; justify-content:center; height:100vh; font-size:32px;'>–†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</div>";
        }, 3000);
    }

    // –í—ñ–∫–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
    function showReportsList() {
        const listEl = document.getElementById("reportList");
        listEl.innerHTML = "";
        selectedReportName = null;

        database.reports.forEach((report) => {
            console.log("report=", report)
            const li = document.createElement("li");
            li.textContent = report.name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.reportName = report.name; // Store the report name in a data attribute

            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedReportName = li.dataset.reportName;
            });
            listEl.appendChild(li);
        });
        document.getElementById("reportListModal").style.display = "flex";
    }

    function closeReportList() {
        document.getElementById("reportListModal").style.display = "none";
    }

    function deleteSelectedReport() {
        if (!selectedReportName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }

        const reportIndex = database.reports.findIndex(r => r.name === selectedReportName);
        if (reportIndex === -1) {
            Message("–í–∏–±—Ä–∞–Ω–∏–π –∑–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        const deletedName = database.reports[reportIndex].name;
        database.reports.splice(reportIndex, 1); // –≤–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É

        saveDatabase(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

        // –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É "–î–∞–Ω—ñ", —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º –±—É–≤
        const dataMenu = document.getElementById("data-menu");
        const menuItem = Array.from(dataMenu.children).find(item => item.textContent === deletedName);
        if (menuItem) menuItem.remove();

        Message(`–ó–≤—ñ—Ç "${deletedName}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
        showReportsList(); // –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–≤—ñ—Ç—ñ–≤
    }

    function previewSelectedReport() {
        if (!selectedReportName) {
            Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.");
            return;
        }

        const report = database.reports.find(r => r.name === selectedReportName);
        if (!report) {
            Message("–ó–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        previewReport(report); // —Ñ—É–Ω–∫—Ü—ñ—è –≤–∂–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
    }



    function deleteActiveElement() {
        if (!activeElement) {
            Message("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }

        const confirmed = confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç?");
        if (!confirmed) return;

        activeElement.remove();
        activeElement = null;

        // –ó–∞–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞–Ω–µ–ª—ñ
        document.getElementById("fieldSelectionModal").style.display = "none";
        closeTextOptionsModal();
    }
    // –†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É
    // –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤.
    
    function createOwnSQL() {
        document.getElementById("ownSqlInput").value = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥—É
        document.getElementById("ownSqlResults").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
        document.getElementById("ownSqlModal").style.display = "flex";
    }
    //
    
    function editOwnQuery(query) {
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–ª–∞—Å–Ω–æ–≥–æ SQL
        const modal = document.getElementById("ownSqlModal");
        if (modal) modal.style.display = "flex";
    
        // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞–∑–≤—É –∑–∞–ø–∏—Ç—É
        const nameInput = document.getElementById("ownSQLName");
        if (nameInput) nameInput.value = query.name || "";
    
        // –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç SQL-–∑–∞–ø–∏—Ç—É
        const sqlTextarea = document.getElementById("ownSqlInput");
        if (sqlTextarea) sqlTextarea.value = query.sql || "";
        
        document.getElementById("ownSqlResults").innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
    }
    
    // –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤.
    
    function closeOwnSqlModal() {
        document.getElementById("ownSqlModal").style.display = "none";
    }
    
    
    function saveOwnSQL() {
        const sql = document.getElementById("ownSqlInput").value.trim();
        const name = document.getElementById("ownSQLName")?.value.trim();
    
        if (!sql) {
            Message("SQL-–∑–∞–ø–∏—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            return;
        }
    
        if (!name) {
            Message("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∑–∞–ø–∏—Ç—É —É –ø–æ–ª–µ ¬´–ù–∞–∑–≤–∞ –∑–∞–ø–∏—Ç—É¬ª.");
            return;
        }
    
        // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –∑–∞–ø–∏—Ç—É
        const query = {
            name: name,
            sql: sql,
            config: null,
            joins: null
        };
    
        // –®—É–∫–∞—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –∑–∞–ø–∏—Ç
        const existingIndex = queries.definitions.findIndex(q => q.name === name);
    
        if (existingIndex !== -1) {
            if (!confirm("–ó–∞–ø–∏—Ç –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –≤–∂–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏?")) return;
            queries.definitions[existingIndex] = query;
        } else {
            queries.definitions.push(query);
        }
    
        saveDatabase();
        Message("–ó–∞–ø–∏—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
    }
    

    function showAboutModal() {
        const modal = document.getElementById("aboutModal");
        modal.style.display = "flex";
    }
    function closeAboutModal() {
        const modal = document.getElementById("aboutModal");
        modal.style.display = "none";
    }
/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ 
 * —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –∫–ª—é—á ‚Äì –ø–æ–∫–∞–∑—É—î–º–æ –¥–≤–∞ —Å—Ç–æ–≤–ø—Ü—ñ
 * —è–∫—â–æ –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞ ‚Äì –ø—Ä–∏—Ö–æ–≤—É—î–º–æ 
 */
function updateSchemaTableHeader(hasForeign) {
    const thead = document.getElementById("schemaHead");
    thead.innerHTML = ""; // –æ—á–∏—Å—Ç–∏—Ç–∏

    const headerRow = document.createElement("tr");
    headerRow.innerHTML = `
        <th>üîë</th>
        <th>–ù–∞–∑–≤–∞ –ø–æ–ª—è</th>
        <th>–¢–∏–ø</th>
        <th>üìå</th>
        <th id="refTableHeader">–¢–∞–±–ª–∏—Ü—è üìå</th>
        <th id="refFieldHeader">–ü–æ–ª–µ üìå</th>
        <th>–ö–æ–º–µ–Ω—Ç–∞—Ä</th>
        <th>‚úÇ</th>
    `;
    thead.appendChild(headerRow);

    // –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–±–æ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏
    document.getElementById("refTableHeader").style.display = hasForeign ? "" : "none";
    document.getElementById("refFieldHeader").style.display = hasForeign ? "" : "none";
}


/**
 *  –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∫–ª—é—á—ñ–≤
 **/
 function getPrimaryKeyFieldsForTable(tableName) {
    console.log("getPrimaryKeyFieldsForTable=",tableName) 
    const tbl = database.tables.find(t => t.name === tableName);
    console.log("tbl=",tbl) 
    if (!tbl || !tbl.schema) return [];
    return tbl.schema.filter(c => c.primaryKey).map(c => c.title);
}



  function editSelectedTableSchema() {
    if (!selectedTableNameForEdit) {
        Message("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
        return;
    }
    
    const tableToEdit = database.tables.find(t => t.name === selectedTableNameForEdit);
    if (!tableToEdit) {
        Message("–í–∏–±—Ä–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        return;
    }
    newDbFile = false;
    isNewTable = false;
    editingTableName = tableToEdit;
    console.log("Edit schema=", selectedTableNameForEdit)
    table.schema = tableToEdit.schema || [];
    document.getElementById("savedTablesModal").style.display = "none";
    const tbody = document.getElementById("schemaBody");
    tbody.innerHTML = "";
    document.getElementById("tableName").value = tableToEdit.name;
    tableList = database.tables.map(t => t.name); // –¥–ª—è FK
    const tableOptions = tableList.map(t => `<option value="${t}">${t}</option>`).join("");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –æ–¥—Ä–∞–∑—É
    let rows = [];

    let hasForeign = table.schema.some(f => f.foreignKey);
    console.log("hasForeign=", hasForeign)
    updateSchemaTableHeader(hasForeign);
    table.schema.forEach(field => {
        const row = document.createElement("tr");

        const isPrimary = field.primaryKey ? 'checked' : '';
        const pkCellStyle = (field.primaryKey && field.autoInc) 
            ? 'background-color: #0f56d9; text-align:center;' 
            : 'text-align:center;';
                    
        const isForeign = field.foreignKey ? 'checked' : '';
        const selectedType = field.type || "–¢–µ–∫—Å—Ç";
        const fkTable = field.refTable || "";
        const fkField = field.refField || "";
        console.log("field.refField=",field.refField)
        const comment = field.comment || "";

        const tableSelectHtml = `
            <select onchange="updateFieldOptions(this)" ${isForeign ? "" : "disabled"}>
                <option value="">(—Ç–∞–±–ª–∏—Ü—è)</option>
                ${tableOptions.replace(`value="${fkTable}"`, `value="${fkTable}" selected`)}
            </select>
        `;

        const fkFieldOptions = getPrimaryKeyFieldsForTable(fkTable).map(f =>
            `<option value="${f}" ${f === fkField ? "selected" : ""}>${f}</option>`).join("");

        console.log("fkFieldOptions=",getPrimaryKeyFieldsForTable(fkTable))
        const fieldSelectHtml = `
            <select ${isForeign ? "" : "disabled"}>
                <option value="">(–ø–æ–ª–µ)</option>
                ${fkFieldOptions}
            </select>
        `;

        // –ó–±—ñ—Ä —É—Å—ñ—Ö –∫–æ–º—ñ—Ä–æ–∫
        const cells = [
            `<td style="${pkCellStyle}"><input type="checkbox" onchange="handlePrimaryKey(this)" ${isPrimary}></td>`,
            `<td contenteditable="true">${field.title}</td>`,
            `<td><select>
                <option ${selectedType === "–¢–µ–∫—Å—Ç" ? "selected" : ""}>–¢–µ–∫—Å—Ç</option>
                <option ${selectedType === "–¶—ñ–ª–µ —á–∏—Å–ª–æ" ? "selected" : ""}>–¶—ñ–ª–µ —á–∏—Å–ª–æ</option>
                <option ${selectedType === "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ" ? "selected" : ""}>–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ</option>
                <option ${selectedType === "–¢–∞–∫/–ù—ñ" ? "selected" : ""}>–¢–∞–∫/–ù—ñ</option>
                <option ${selectedType === "–î–∞—Ç–∞" ? "selected" : ""}>–î–∞—Ç–∞</option>
            </select></td>`,
            `<td style="text-align:center;"><input type="checkbox" onchange="handleForeignKey(this)" ${isForeign}></td>`,
        ];

        // FK —Å—Ç–æ–≤–ø—Ü—ñ
        if (hasForeign) {
            cells.push(`<td>${tableSelectHtml}</td>`);
            cells.push(`<td>${fieldSelectHtml}</td>`);
        }

        cells.push(`<td contenteditable="true">${comment}</td>`);
        cells.push(`<td style="text-align:center;"><button onclick="deleteSchemaRow(this)">‚ùå</button></td>`);

        row.innerHTML = cells.join("");
        rows.push(row);
    });

    // –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –∑—ñ–±—Ä–∞–Ω—ñ —Ä—è–¥–∫–∏
    rows.forEach(r => tbody.appendChild(r));

    document.getElementById("makeTable").innerText = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ`;
    document.getElementById("modal").style.display = "flex";
}

/**
 * –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä—É
 */    
function copySelectedTable() {
    if (!selectedTableNameForEdit) {
        Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.");
        return;
    }

    const originalTable = database.tables.find(t => t.name === selectedTableNameForEdit);
    if (!originalTable) {
        Message("–¢–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        return;
    }

    // –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—É —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
    let baseName = "–ö–æ–ø—ñ—è_" + selectedTableNameForEdit;
    let newName = baseName;
    let counter = 1;
    while (database.tables.some(t => t.name === newName)) {
        newName = baseName + "_" + counter++;
    }

    // –ö–æ–ø—ñ—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
    const newTable = {
        name: newName,
        schema: JSON.parse(JSON.stringify(originalTable.schema)),
        data: JSON.parse(JSON.stringify(originalTable.data || []))
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –≤ SQLite
    try {
        const fields = newTable.schema.map(field => {
            let type = field.type.toUpperCase();
            if (type === "–¶–Ü–õ–ï –ß–ò–°–õ–û") type = "INTEGER";
            else if (type === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") type = "REAL";
            else if (type === "–¢–ï–ö–°–¢") type = "TEXT";
            else if (type === "–¢–ê–ö/–ù–Ü") type = "BOOLEAN";
            else if (type === "–î–ê–¢–ê") type = "TEXT";

            let def = `"${field.title}" ${type}`;
            if (field.primaryKey) def += " PRIMARY KEY";
            return def;
        });

        const foreignKeys = newTable.schema
            .filter(f => f.foreignKey && f.refTable && f.refField)
            .map(f => `FOREIGN KEY ("${f.title}") REFERENCES "${f.refTable}"("${f.refField}")`);

        const createSQL = `CREATE TABLE "${newTable.name}" (${[...fields, ...foreignKeys].join(", ")});`;
        db.run("PRAGMA foreign_keys = OFF;");
        db.run(createSQL);
       


        // –í—Å—Ç–∞–≤–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
        newTable.data.forEach(row => {
            const columns = newTable.schema.map(f => `"${f.title}"`);
            const values = row.map(v => v === null ? "NULL" : `'${String(v).replace(/'/g, "''")}'`);
            const insertSQL = `INSERT INTO "${newTable.name}" (${columns.join(", ")}) VALUES (${values.join(", ")});`;
            db.run(insertSQL);
        });
        db.run("PRAGMA foreign_keys = ON;");
        // –î–æ–¥–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –≤ —Å–ø–∏—Å–æ–∫
        database.tables.push(newTable);
        addTableToMenu(newTable.name);
        saveDatabase();

        Message(`–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–ø—ñ—é —Ç–∞–±–ª–∏—Ü—ñ "${newTable.name}".`);
        showSavedTablesDialog(); // –æ–Ω–æ–≤–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥

    } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:", e);
        Message("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–ø—ñ—é —Ç–∞–±–ª–∏—Ü—ñ.");
    }
}

/**
 * –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
 **/
function printReportPreview() {
        const previewContent = document.getElementById("reportPreviewCanvas");
    
        if (!previewContent) {
            alert("–ù–µ–º–∞—î –∑–≤—ñ—Ç—É –¥–ª—è –¥—Ä—É–∫—É.");
            return;
        }
    
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –¥—Ä—É–∫—É
        const printWindow = window.open('', '_blank');
    
        // –§–æ—Ä–º—É—î–º–æ –≤–º—ñ—Å—Ç
        printWindow.document.write(`
            <html>
            <head>
                <title>–î—Ä—É–∫ –∑–≤—ñ—Ç—É</title>
                <style>
                    body { margin: 0; font-family: Arial, sans-serif; }
                    #reportPreviewCanvas {
                        position: relative;
                        width: 100%;
                        height: auto;
                        border: none;
                    }
                    .report-label, .report-field {
                        position: absolute;
                        box-sizing: border-box;
                        border: 1px solid #ccc;
                        padding: 2px;
                    }
                    .field-text {
                        font-style: italic;
                    }
                </style>
            </head>
            <body>
                <div id="reportPreviewCanvas">
                    ${previewContent.innerHTML}
                </div>
                <script>
                    window.onload = function() {
                        window.print();
                        window.onafterprint = () => window.close();
                    };
                </script>
            </body>
            </html>
        `);
    
        printWindow.document.close();
    }
 //
 function openTableByName(name) {
     console.log("edit=",database.tables[name])
     selectedTableNameForEdit = name
     openSelectedTable()
     }
 //
 function editQueryByName(name) { 
    console.log("edit=",name);
    selectedQueryName = name;
    editSelectedQuery()
 }
 function editReportByName(name) { 
    console.log("edit=",name);
    selectedReportName = name;
    editSelectedReport()
 }
 function editFormByName(name) { 
    console.log("edit=",name);
    selectedFormName = name;
    editSelectedForm()
 }
//
/**
 * –ï–∫—Å–ø–æ—Ä—Ç—É—î –≤–º—ñ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ —É CSV-—Ñ–∞–π–ª —ñ–∑ –Ω–∞–∑–≤–æ—é "<–Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ>.csv".
 * 
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ:
 * {
 *   name: "Teachers",            // –ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
 *   schema: [...],              // –ú–∞—Å–∏–≤ –ø–æ–ª—ñ–≤ (—ñ–∑ –Ω–∞–∑–≤–æ—é, —Ç–∏–ø–æ–º, —Ç–æ—â–æ)
 *   data: [[1, "–Ü–º'—è"], ...]    // –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö
 * }
 *
 * CSV-—Ñ–∞–π–ª –º–∞—Ç–∏–º–µ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–∞–ª—ñ ‚Äî –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ ";"
 * –£—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –æ–±–≥–æ—Ä–Ω—É—Ç—ñ –≤ –ª–∞–ø–∫–∏.
 */
function exportTableToCSV() {
    const tableName = selectedTableNameForEdit;
    console.log("CSV name=",tableName);   
    const table = database.tables.find(t => t.name === tableName);
    console.log("CSV table=",table)
    if (!table || !table.name || !table.schema || !table.data) {
        console.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.");
        return;
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –∑—ñ —Å—Ö–µ–º–∏
    const headers = table.schema.map(field => field.title);

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ CSV, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    const csvRows = [];
    csvRows.push(headers.join(";")); // –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏

    // –î–æ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
    for (const row of table.data) {
        const csvRow = row.map(value => {
            // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –∞–±–æ –ª–∞–ø–∫–∏ ‚Äî –æ–±–≥–æ—Ä–Ω—É—Ç–∏ –≤ –ª–∞–ø–∫–∏ —ñ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –ª–∞–ø–∫–∏
            if (typeof value === "string") {
                const escaped = value.replace(/"/g, '""');
                return `"${escaped}"`;
            }
            return value;
        });
        csvRows.push(csvRow.join(";"));
    }

    // –û–±‚Äô—î–¥–Ω–∞—Ç–∏ —Ä—è–¥–∫–∏ –≤ —Ç–µ–∫—Å—Ç
    const csvContent = csvRows.join("\n");

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ blob —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const fileName = `${table.name}.csv`;

    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.style.display = "none";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}


 // –ü–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
 function updateQuickAccessPanel(tables, qqueries, reports, forms) {
      const panel = document.getElementById("quickAccessPanel");
      const sections = [
          {
            id: "quickTables",
            iconsId: "quickTablesIcons",
            items: tables,
            icon: "üìÑ",
            image: "img/table-icon.png",
            openFunc: openTableByName
          },
          {
            id: "quickQueries",
            iconsId: "quickQueriesIcons",
            items: qqueries,
            icon: "üîç",
            image: "img/query-icon.png",
            openFunc: editQueryByName
          },
          {
            id: "quickReports",
            iconsId: "quickReportsIcons",
            items: reports,
            icon: "üìù",
            image: "img/report-icon.png",
            openFunc: editReportByName
          },
          {
            id: "quickForms",
            iconsId: "quickFormsIcons",
            items: forms,
            icon: "üìë",
            image: "img/form-icon.png",
            openFunc: editFormByName
          }
        ];
        
    
      let hasAny = false;
    
      sections.forEach(section => {
        const container = document.getElementById(section.id);
        const iconsContainer = document.getElementById(section.iconsId);
        iconsContainer.innerHTML = "";
    
        if (section.items && section.items.length) {
          container.style.display = "block";
          hasAny = true;
          section.items.forEach(name => {
            
            if (section.id==="quickTables") {
                name = database.tables[name].name
            }
            if (section.id==="quickQueries") {
                name = queries.definitions[name].name
            }       
            const el = document.createElement("div");
            el.className = "quick-icon";
            el.innerHTML = `
            <div class='icon'>
            <img src="${section.image}" alt="icon" />
            </div>
            <div>${name}</div>`;
            el.onclick = () => section.openFunc(name);
            iconsContainer.appendChild(el);
          });
        } else {
          container.style.display = "none";
        }
       
      });
    
      panel.style.display = hasAny ? "flex" : "none";
      document.getElementById("startPrompt").style.display = "none";
      document.getElementById("logo-image").style.display = "none";
      document.getElementById("title-image").style.display = "block"; 
    }
    
    function openMainMenu() {
      document.getElementById("mainMenuModal").style.display = "flex";
    }

    function closeMainMenu() {
      document.getElementById("mainMenuModal").style.display = "none";
    }
    
    function closeAllModals() {
      document.querySelectorAll(".modal").forEach(modal => {
        modal.style.display = "none";
      });
    }
    
    function filesMenu() {
      closeAllModals();
      document.getElementById("files_Modal").style.display = "flex";
    }
    
    function createMenu() {
      closeAllModals();
      document.getElementById("create_Modal").style.display = "flex";
    }
    
    function dataMenu() {
      closeAllModals();
      document.getElementById("data_Modal").style.display = "flex";
      document.getElementById("data_Modal").style.display = "flex";
    }
    
    function tablesMenu() {
      closeAllModals();
      document.getElementById("tables_Modal").style.display = "flex";
    }
    
    function queriesMenu() {
      closeAllModals();
      document.getElementById("queries_Modal").style.display = "flex";
    }
    
    function reportsMenu() {
      closeAllModals();
      document.getElementById("reports_Modal").style.display = "flex";
    }
    
    function formsMenu() {
      closeAllModals();
      document.getElementById("forms_Modal").style.display = "flex";
    }
    
    function helpMenu() {
      closeAllModals();
      document.getElementById("help_Modal").style.display = "flex";
    }
    
window.addEventListener("click", function(event) {
  if (event.target.classList.contains("modal")) {
    event.target.style.display = "none";
  }
});

function showData() {
        const dropdown = document.getElementById("data-menu");
        if (!dropdown) {
            console.error("–ï–ª–µ–º–µ–Ω—Ç #data-menu –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
    
        // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—å –∑ <a> –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ dropdown
        const tableNames = [...dropdown.querySelectorAll("a")]
            .map(a => a.textContent.trim())
            .filter(name => name);
    
        if (tableNames.length === 0) {
            Message("–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            return;
        }
    
        const listEl = document.getElementById("tableListInModal");
        listEl.innerHTML = "";
        listEl.style.listStyle = "none";
        selectedTableNameForEdit = null;
    
        tableNames.forEach(name => {
            const li = document.createElement("li");
            li.textContent = name;
            li.style.padding = "8px";
            li.style.cursor = "pointer";
            li.dataset.tableName = name;
    
            li.addEventListener("click", () => {
                [...listEl.children].forEach(el => el.style.background = "");
                li.style.background = "#d0e0ff";
                selectedTableNameForEdit = li.dataset.tableName;
            });
    
            listEl.appendChild(li);
        });
    
        document.getElementById("dataModal").style.display = "flex";
    }
    function confirmOpenSelectedTable() {
        if (!selectedTableNameForEdit) {
            Message("–û–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –∑—ñ —Å–ø–∏—Å–∫—É.");
            return;
        }
        document.getElementById("dataModal").style.display = "none";
        openSelectedTable(); // –¢–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
    }
    
let selectedDataWorkName = null;

function showDataWorkDialog() {
    const listEl = document.getElementById("dataWorkList");
    listEl.innerHTML = "";
    selectedDataWorkName = null;

    // –î–æ–¥–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    (database.tables || []).forEach(t => {
        const li = document.createElement("li");
        li.textContent = t.name;
        li.style.padding = "8px";
        li.style.cursor = "pointer";
        li.addEventListener("click", () => {
            [...listEl.children].forEach(el => el.style.background = "");
            li.style.background = "#d0e0ff";
            selectedDataWorkName = t.name;
        });
        listEl.appendChild(li);
    });

    // –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
    (queries.results || []).forEach(q => {
        const li = document.createElement("li");
        li.textContent = "*" + q.name; // * ‚Äî —â–æ–± –≤—ñ–¥—Ä—ñ–∑–Ω–∏—Ç–∏
        li.style.padding = "8px";
        li.style.cursor = "pointer";
        li.addEventListener("click", () => {
            [...listEl.children].forEach(el => el.style.background = "");
            li.style.background = "#d0e0ff";
            selectedDataWorkName = "*" + q.name;
        });
        listEl.appendChild(li);
    });

    document.getElementById("dataWorkModal").style.display = "flex";
}

function closeDataWorkDialog() {
    document.getElementById("dataWorkModal").style.display = "none";
}

let currentDataView = { columns: [], rows: [] };

function openSelectedDataWork() {
    if (!selectedDataWorkName) {
        Message("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É.");
        return;
    }
    closeDataWorkDialog();
    openDataView(selectedDataWorkName);
}

function openDataView(tableName) {
    let tableData;
    let columns;

    if (tableName.startsWith('*')) {
        const q = queries.results.find(t => t.name === tableName.substring(1));
        if (!q) return Message("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        columns = q.schema.map(c => c.title);
        tableData = q.data;
    } else {
        const t = database.tables.find(tbl => tbl.name === tableName);
        if (!t) return Message("–¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
        columns = t.schema.map(c => c.title);
        tableData = t.data;
    }

    currentDataView.columns = columns;
    currentDataView.rows = [...tableData];

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–µ–ª–µ–∫—Ç –ø–æ–ª—ñ–≤
    const select = document.getElementById("dataFieldSelect");
    select.innerHTML = columns.map(c => `<option value="${c}">${c}</option>`).join("");

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞–Ω—ñ
    renderDataViewTable(columns, currentDataView.rows);

    document.getElementById("dataViewTitle").textContent = `–¢–∞–±–ª–∏—Ü—è: ${tableName}`;
    document.getElementById("dataViewModal").style.display = "flex";
}

function renderDataViewTable(columns, rows) {
    const head = document.getElementById("dataViewHead");
    const body = document.getElementById("dataViewBody");

    head.innerHTML = "";
    const trHead = document.createElement("tr");
    columns.forEach(c => {
        const th = document.createElement("th");
        th.textContent = c;
        trHead.appendChild(th);
    });
    head.appendChild(trHead);

    body.innerHTML = "";
    rows.forEach(r => {
        const tr = document.createElement("tr");
        r.forEach(cell => {
            const td = document.createElement("td");
            td.textContent = cell;
            tr.appendChild(td);
        });
        body.appendChild(tr);
    });
}

function sortDataTable() {
    const field = document.getElementById("dataFieldSelect").value;
    const order = document.querySelector('input[name="sortOrder"]:checked').value;
    const colIndex = currentDataView.columns.indexOf(field);
    if (colIndex === -1) return;

    currentDataView.rows.sort((a, b) => {
        if (a[colIndex] < b[colIndex]) return order === "asc" ? -1 : 1;
        if (a[colIndex] > b[colIndex]) return order === "asc" ? 1 : -1;
        return 0;
    });

    renderDataViewTable(currentDataView.columns, currentDataView.rows);
}

function applyDataFilter() {
    const mask = document.getElementById("dataFilterInput").value.trim();
    const condition = document.getElementById("dataFilterCondition").value;
    
    if (!mask || !condition) {
        renderDataViewTable(currentDataView.columns, currentDataView.rows);
        return;
    }

    const field = document.getElementById("dataFieldSelect").value;
    const colIndex = currentDataView.columns.indexOf(field);
    if (colIndex === -1) return;

    // –ú–∞—Å–∫–∞ –≤ RegExp
    const regex = maskToRegex(mask);

    const filtered = currentDataView.rows.filter(r => {
        const cellValue = String(r[colIndex]);

        // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ —É–º–æ–≤—ñ
        switch (condition) {
            case "=":
                return regex.test(cellValue);
            case "!=":
                return !regex.test(cellValue);
            case ">":
                return cellValue > mask;
            case "<":
                return cellValue < mask;
            default:
                return true;
        }
    });

    renderDataViewTable(currentDataView.columns, filtered);
}



function applyDataSearch() {
    const mask= document.getElementById("dataSearchInput").value.toLowerCase();
    if (!mask) {
        renderDataViewTable(currentDataView.columns, currentDataView.rows);
        return;
    }

    const field = document.getElementById("dataFieldSelect").value;
    const colIndex = currentDataView.columns.indexOf(field);
    if (colIndex === -1) return;

    const regex = maskToRegex(mask);

    const filtered = currentDataView.rows.filter(r =>
        regex.test(String(r[colIndex]))
    );

    renderDataViewTable(currentDataView.columns, filtered);
}
function closeDataViewModal() {
    document.getElementById("dataViewModal").style.display = "none";
}
function maskToRegex(mask) {
    // –ï–∫—Ä–∞–Ω—É—î–º–æ –≤—Å—ñ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ RegExp, —â–æ–± –≤–æ–Ω–∏ –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–ª–∏
    let regexStr = mask.replace(/([.+^${}()|\\])/g, "\\$1");

    // –ó—ñ—Ä–æ—á–∫–∞ (*) ‚Üí .* (–±—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤)
    regexStr = regexStr.replace(/\*/g, ".*");

    // –ó–Ω–∞–∫ –ø–∏—Ç–∞–Ω–Ω—è (?) ‚Üí . (–æ–¥–∏–Ω –±—É–¥—å-—è–∫–∏–π —Å–∏–º–≤–æ–ª)
    regexStr = regexStr.replace(/\?/g, ".");

    // –†–µ—à—ñ—Ç–∫–∞ (#) ‚Üí [0-9] (–æ–¥–Ω–∞ –±—É–¥—å-—è–∫–∞ —Ü–∏—Ñ—Ä–∞)
    regexStr = regexStr.replace(/#/g, "[0-9]");

    // [!...] ‚Üí [^...] (–∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è —É —Ä–µ–≥—É–ª—è—Ä–∫–∞—Ö)
    regexStr = regexStr.replace(/\[!([^\]]+)\]/g, "[^$1]");

    // –î—ñ–∞–ø–∞–∑–æ–Ω–∏ —Ç–∞ –∑–≤–∏—á–∞–π–Ω—ñ [ ] –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î, –±–æ –≤–æ–Ω–∏ –≤–∂–µ –≤–∞–ª—ñ–¥–Ω—ñ —É RegExp
    // –¢—É—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–±–∏—Ä–∞—î–º–æ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –∑ []
    regexStr = regexStr.replace(/\\\[/g, "[");
    regexStr = regexStr.replace(/\\\]/g, "]");

    return new RegExp("^" + regexStr + "$", "i"); // ^ —ñ $ ‚Äî —â–æ–± –∑–±—ñ–≥–∞–≤—Å—è –≤–µ—Å—å —Ä—è–¥–æ–∫
}
/**
 * –Ü–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ñ –∑ Excel/LO Calc/WPS Spreadsheet —á–µ—Ä–µ–∑ Ctrl+C/Ctrl+V
 **/
function showImportTableDialog() {
  document.getElementById("importTableModal").style.display = "flex";
  const input = document.getElementById("clipboardInput");
  input.value = "";
  input.focus();

  // –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤—É—î–º–æ —Ñ–æ–∫—É—Å –ø—Ä–∏ –±—É–¥—å-—è–∫–æ–º—É –∫–ª—ñ–∫—É / –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ
  document.getElementById("importTableModal").addEventListener("click", () => input.focus());
  document.getElementById("importTableModal").addEventListener("keydown", () => input.focus());

  input.onpaste = function(e) {
    e.preventDefault();
    const text = (e.clipboardData || window.clipboardData).getData("text");
    renderPreviewTable(text);
  };
}


function closeImportTableDialog() {
  document.getElementById("importTableModal").style.display = "none";
  document.getElementById("previewArea").innerHTML = "";
}

let importedData = null; // –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏

function renderPreviewTable(text) {
  if (!text.trim()) return;
  const rows = text.trim().split("\n").map(r => r.split("\t"));
  importedData = rows;

  const table = document.createElement("table");
  table.border = "1";
  rows.forEach((row, i) => {
    const tr = document.createElement("tr");
    row.forEach(cell => {
      const td = document.createElement(i === 0 ? "th" : "td");
      td.textContent = cell.trim();
      tr.appendChild(td);
    });
    table.appendChild(tr);
  });
  const preview = document.getElementById("previewArea");
  preview.innerHTML = "";
  preview.appendChild(table);
  document.getElementById("importMsg").style.display = "none";
}

function confirmImportTable() {
  if (!importedData || importedData.length < 2) {
    Message("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É.");
    return;
  }

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
  const headers = importedData[0];
  const sampleRow = importedData[1];
  const schema = headers.map((h, i) => {
    const val = sampleRow[i];
    let type = "–¢–µ–∫—Å—Ç";
    if (!isNaN(parseInt(val)) && Number.isInteger(Number(val))) type = "–¶—ñ–ª–µ —á–∏—Å–ª–æ";
    else if (!isNaN(parseFloat(val))) type = "–î—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ";
    else if (/^\d{4}-\d{2}-\d{2}$/.test(val)) type = "–î–∞—Ç–∞";
    return { title: h.trim(), type: type };
  });

  // –¥–æ–¥–∞—î–º–æ ID –Ω–∞ –ø–æ—á–∞—Ç–∫—É
  const fullSchema = [{ title: "ID", type: "–¶—ñ–ª–µ —á–∏—Å–ª–æ", primaryKey: true, autoInc: true }]
    .concat(schema);

  // –ø–æ–∫–∞–∑ —É –≤—ñ–∫–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  document.getElementById("confirmImportModal").style.display = "flex";
  const schemaDiv = document.getElementById("tableSchemaPreview");

  // –º–∞–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
  let html = `<table border="1" cellpadding="5" style="border-collapse:collapse; width:100%;">`;
  html += `<thead><tr><th>–ù–∞–∑–≤–∞ –ø–æ–ª—è</th><th>–¢–∏–ø –¥–∞–Ω–∏—Ö</th><th>PK</th><th>–ê–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç</th></tr></thead><tbody>`;
  fullSchema.forEach(f => {
    html += `<tr>
      <td>${f.title}</td>
      <td>${f.type}</td>
      <td>${f.primaryKey ? "üîë" : ""}</td>
      <td>${f.autoInc ? "‚úîÔ∏è" : ""}</td>
    </tr>`;
  });
  html += `</tbody></table>`;
  schemaDiv.innerHTML = html;

  // –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
  window._importSchema = fullSchema;
}


function closeConfirmImport() {
  document.getElementById("confirmImportModal").style.display = "none";
}

function saveImportedTable() {
  const name = document.getElementById("importTableName").value.trim();
  if (!checkName(name)) return;

  const schema = [].concat(window._importSchema);

  // —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
  const newTable = { name, schema, data: [] };
  importedData.slice(1).forEach((row, i) => {
    const rec = [i+1].concat(row); // –¥–æ–¥–∞—î–º–æ ID
    newTable.data.push(rec);
  });

  database.tables.push(newTable);

  // —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤ SQLite
  const fieldsDef = schema.map(f => {
    let t = f.type.toUpperCase();
    if (t === "–¶–Ü–õ–ï –ß–ò–°–õ–û") t = "INTEGER";
    if (t === "–î–†–û–ë–û–í–ï –ß–ò–°–õ–û") t = "REAL";
    if (t === "–¢–ï–ö–°–¢") t = "TEXT";
    if (t === "–î–ê–¢–ê") t = "TEXT";
    let def = `"${f.title}" ${t}`;
    if (f.primaryKey) def += " PRIMARY KEY AUTOINCREMENT";
    return def;
  }).join(", ");
  db.run(`CREATE TABLE "${name}" (${fieldsDef});`);

  // –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö
  newTable.data.forEach(row => {
    const values = row.map(v => v === null ? "NULL" : `'${String(v).replace(/'/g,"''")}'`);
    db.run(`INSERT INTO "${name}" VALUES (${values.join(", ")});`);
  });

  saveDatabase();
  addTableToMenu(name);
  Message("–¢–∞–±–ª–∏—Ü—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.");
  closeImportTableDialog();
  closeConfirmImport();
}



